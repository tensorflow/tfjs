# Copyright 2021 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =============================================================================

load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library", "pkg_npm")
load("//tools:copy_to_dist.bzl", "copy_to_dist", "copy_ts_library_to_dist")
load("//tools:tfjs_bundle.bzl", "tfjs_bundle")
load("//tools:tfjs_web_test.bzl", "tfjs_web_test")

package(default_visibility = ["//visibility:public"])

tfjs_bundle(
    name = "tf-backend-webgl",
    entry_point = "//tfjs-backend-webgl/src:index.ts",
    external = [
        "crypto",
        "@tensorflow/tfjs-core",
        "seedrandom",
        "@tensorflow/tfjs-backend-cpu",
    ],
    globals = {
        "@tensorflow/tfjs-core": "tf",
        "seedrandom": "seedrandom",
    },
    umd_name = "tf",
    deps = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_lib",
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_src_lib",
    ],
)

copy_ts_library_to_dist(
    name = "copy_src_to_dist",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_lib",
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_src_lib",
    ],
    root = "src",
)

copy_to_dist(
    name = "copy_bundles",
    srcs = [
        ":tf-backend-webgl",
        ":tf-backend-webgl.es2017",
        ":tf-backend-webgl.es2017.min",
        ":tf-backend-webgl.fesm",
        ":tf-backend-webgl.fesm.min",
        ":tf-backend-webgl.min",
        ":tf-backend-webgl.node",
    ],
)

copy_file(
    name = "copy_miniprogram",
    src = ":tf-backend-webgl.min.js",
    out = "dist/miniprogram/index.js",
)

copy_file(
    name = "copy_miniprogram_map",
    src = ":tf-backend-webgl.min.js.map",
    out = "dist/miniprogram/index.js.map",
)

pkg_npm(
    name = "tfjs-backend-webgl_pkg",
    package_name = "@tensorflow/tfjs-backend-webgl",
    srcs = [
        "README.md",
        "package.json",
    ],
    tags = ["ci"],
    deps = [
        ":copy_bundles",
        ":copy_miniprogram",
        ":copy_miniprogram_map",
        ":copy_src_to_dist",
    ],
)

STATIC_FILES = [
    # Listed here so sourcemaps are served
    "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
]

tfjs_web_test(
    name = "tfjs-backend-webgl2_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl2",
    ],
    browsers = [
        "bs_chrome_mac",
        "bs_firefox_mac",
        "bs_android_10",
        "win_10_chrome",
    ],
    headless = False,
    presubmit_browsers = [
        "bs_chrome_mac",
        "bs_android_10",
    ],
    static_files = STATIC_FILES,
)

tfjs_web_test(
    name = "tfjs-backend-webgl1_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl1",
    ],
    browsers = [
        "bs_safari_mac",
        "bs_ios_12",
    ],
    headless = False,
    presubmit_browsers = [
        "bs_safari_mac",
        "bs_ios_12",
    ],
    static_files = STATIC_FILES,
)

tfjs_web_test(
    name = "tfjs-backend-webgl_unpacked_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl2",
        "--flags",
        '{"WEBGL_PACK": false}',
    ],
    browsers = [
        "bs_chrome_mac",
    ],
    headless = False,
    presubmit_browsers = [],  # Only run in nightly
    static_files = STATIC_FILES,
)

tfjs_web_test(
    name = "tfjs-backend-webgl_forward_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl2",
        "--flags",
        '{"WEBGL_CPU_FORWARD": true}',
    ],
    browsers = [
        "bs_chrome_mac",
    ],
    headless = False,
    presubmit_browsers = [],  # Only run in nightly
    static_files = STATIC_FILES,
)

tfjs_web_test(
    name = "tfjs-backend-webgl_uniforms_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl2",
        "--flags",
        '{"WEBGL_USE_SHAPES_UNIFORMS": true}',
    ],
    browsers = [
        "bs_chrome_mac",
    ],
    headless = False,
    presubmit_browsers = [],  # Only run in nightly
    static_files = STATIC_FILES,
)

tfjs_web_test(
    name = "tfjs-backend-webgl_exp_conv_test",
    srcs = [
        "//tfjs-backend-webgl/src:tfjs-backend-webgl_test_bundle",
    ],
    args = [
        "--testEnv",
        "webgl2",
        "--flags",
        '{"WEBGL_EXP_CONV": true}',
    ],
    browsers = [
        "bs_chrome_mac",
    ],
    headless = False,
    presubmit_browsers = [],  # Only run in nightly
    static_files = STATIC_FILES,
)

js_library(
    name = "package_json",
    srcs = [
        ":package.json",
    ],
)

test_suite(
    name = "tests",
    tests = [
        ":tfjs-backend-webgl2_test",
    ],
)
