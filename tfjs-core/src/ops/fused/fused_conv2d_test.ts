/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

import * as tf from '../../index';
import {ALL_ENVS, describeWithFlags} from '../../jasmine_util';
import {expectArraysClose} from '../../test_util';

function generateCaseInputs(totalSizeTensor: number, totalSizeFilter: number) {
  const inp = new Array(totalSizeTensor);
  const filt = new Array(totalSizeFilter);

  for (let i = 0; i < totalSizeTensor; i++) {
    inp[i] = i * 0.001 - totalSizeTensor * 0.001 / 2;
  }
  for (let i = 0; i < totalSizeFilter; i++) {
    const sign = i % 2 === 0 ? -1 : 1;
    filt[i] = i * 0.001 * sign;
  }

  return {input: inp, filter: filt};
}

describeWithFlags('fused conv2d', ALL_ENVS, () => {
  it('basic', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({x, filter: w, strides: stride, pad});
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected =
        [-5, 2, -11, 5, -17, 8, -23, 11, -29, 14, -35, 17, -41, 20, -47, 23];

    expectArraysClose(await result.data(), expected);
  });

  it('basic with relu', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'relu'
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected = [0, 2, 0, 5, 0, 8, 0, 11, 0, 14, 0, 17, 0, 20, 0, 23];

    expectArraysClose(await result.data(), expected);
  });

  it('relu with stride 2 x=[1,8,8,16] f=[3,3,16,1] s=[2,2] d=1 p=same',
     async () => {
       const inputDepth = 16;
       const xSize = 8;
       const inputShape: [number, number, number, number] =
           [1, xSize, xSize, inputDepth];
       const outputDepth = 1;
       const fSize = 3;
       const pad = 'same';
       const stride: [number, number] = [2, 2];

       // TODO(annxingyuan): Make this test work with large inputs
       // https://github.com/tensorflow/tfjs/issues/3143
       const inputData = [];
       for (let i = 0; i < xSize * xSize * inputDepth; i++) {
         inputData.push(i % 5);
       }

       const wData = [];
       for (let i = 0; i < fSize * fSize * inputDepth * outputDepth; i++) {
         wData.push(i % 5);
       }

       const x = tf.tensor4d(inputData, inputShape);
       const w = tf.tensor4d(wData, [fSize, fSize, inputDepth, outputDepth]);

       const result = tf.fused.conv2d({
         x,
         filter: w,
         strides: stride,
         pad,
         dataFormat: 'NHWC',
         dilations: [1, 1],
         activation: 'relu'
       });
       expect(result.shape).toEqual([1, 4, 4, 1]);
       expectArraysClose(await result.data(), new Float32Array([
                           854, 431, 568, 382, 580, 427, 854, 288, 431, 568,
                           580, 289, 285, 570, 285, 258
                         ]));
     });

  it('relu bias stride 2 x=[1,8,8,16] f=[3,3,16,1] s=[2,2] d=8 p=same',
     async () => {
       const inputDepth = 16;
       const xSize = 8;
       const inputShape: [number, number, number, number] =
           [1, xSize, xSize, inputDepth];
       const outputDepth = 8;
       const fSize = 3;
       const pad = 'same';
       const stride: [number, number] = [2, 2];

       const inputs = generateCaseInputs(
           1 * xSize * xSize * inputDepth,
           fSize * fSize * inputDepth * outputDepth);
       const x = tf.tensor4d(inputs.input, inputShape);
       const w =
           tf.tensor4d(inputs.filter, [fSize, fSize, inputDepth, outputDepth]);
       const bias = tf.tensor1d([1, 4, 2, 3, 9, 6, 5, 8]);
       const result = tf.fused.conv2d({
         x,
         filter: w,
         strides: stride,
         pad,
         dataFormat: 'NHWC',
         dilations: [1, 1],
         activation: 'relu',
         bias
       });
       expect(result.shape).toEqual([1, 4, 4, 8]);
       expectArraysClose(await result.data(), new Float32Array([
                           25.75398063659668,
                           0,
                           26.857805252075195,
                           0,
                           33.961631774902344,
                           0,
                           30.065458297729492,
                           0,
                           23.118206024169922,
                           0,
                           24.212820053100586,
                           0,
                           31.307422637939453,
                           0,
                           27.402034759521484,
                           0,
                           20.482431411743164,
                           0,
                           21.567821502685547,
                           0,
                           28.653217315673828,
                           0,
                           24.73861312866211,
                           0,
                           11.078080177307129,
                           0,
                           12.130399703979492,
                           0,
                           19.182720184326172,
                           0,
                           15.235037803649902,
                           0,
                           4.6677775382995605,
                           0.31717729568481445,
                           5.697869777679443,
                           0,
                           12.727968215942383,
                           2.2569849491119385,
                           8.758066177368164,
                           4.226885795593262,
                           2.0319995880126953,
                           2.9575586318969727,
                           3.052880048751831,
                           1.9366796016693115,
                           10.073760032653809,
                           4.915799617767334,
                           6.094639778137207,
                           6.89492130279541,
                           0,
                           5.5979437828063965,
                           0.4078875780105591,
                           4.586280822753906,
                           7.419551849365234,
                           7.5746169090271,
                           3.43121600151062,
                           9.562952041625977,
                           0,
                           6.404943943023682,
                           0,
                           5.401776313781738,
                           6.5998077392578125,
                           8.398608207702637,
                           2.602976083755493,
                           10.395440101623535,
                           0,
                           21.440250396728516,
                           0,
                           20.483882904052734,
                           0,
                           23.527509689331055,
                           0,
                           25.571144104003906,
                           0,
                           24.080629348754883,
                           0,
                           23.133480072021484,
                           0,
                           26.186328887939453,
                           0,
                           28.239177703857422,
                           0,
                           26.721012115478516,
                           0,
                           25.783079147338867,
                           0,
                           28.84514808654785,
                           0,
                           30.907209396362305,
                           0,
                           18.914127349853516,
                           0,
                           17.960111618041992,
                           0,
                           21.006093978881836,
                           0,
                           23.052082061767578,
                           0,
                           17.89089584350586,
                           0,
                           16.95684814453125,
                           0,
                           20.022798538208008,
                           0,
                           22.088754653930664,
                           0,
                           19.06132698059082,
                           0,
                           18.133424758911133,
                           0,
                           21.205520629882812,
                           0,
                           23.27761459350586,
                           0,
                           20.23175811767578,
                           0,
                           19.309999465942383,
                           0,
                           22.388240814208984,
                           0,
                           24.46647834777832,
                           0,
                           13.584352493286133,
                           0,
                           12.6395845413208,
                           0,
                           15.694815635681152,
                           0,
                           17.750045776367188
                         ]));
     });

  it('relu bias stride 2 x=[1,8,8,16] f=[3,3,16,1] s=[2,2] d=64 p=same',
     async () => {
       const inputDepth = 16;
       const xSize = 8;
       const inputShape: [number, number, number, number] =
           [1, xSize, xSize, inputDepth];
       const outputDepth = 64;
       const fSize = 3;
       const pad = 'same';
       const stride: [number, number] = [2, 2];

       const inputs = generateCaseInputs(
           1 * xSize * xSize * inputDepth,
           fSize * fSize * inputDepth * outputDepth);
       const x = tf.tensor4d(inputs.input, inputShape);
       const w =
           tf.tensor4d(inputs.filter, [fSize, fSize, inputDepth, outputDepth]);
       const bias = tf.tensor1d([
         1, 4, 2, 3, 9, 6, 5, 8, 1, 4, 2, 3, 9, 6, 5, 8, 1, 4, 2, 3, 9, 6,
         5, 8, 1, 4, 2, 3, 9, 6, 5, 8, 1, 4, 2, 3, 9, 6, 5, 8, 1, 4, 2, 3,
         9, 6, 5, 8, 1, 4, 2, 3, 9, 6, 5, 8, 1, 4, 2, 3, 9, 6, 5, 8
       ]);
       const result = tf.fused.conv2d({
         x,
         filter: w,
         strides: stride,
         pad,
         dataFormat: 'NHWC',
         dilations: [1, 1],
         activation: 'relu',
         bias
       });
       expect(result.shape).toEqual([1, 4, 4, 64]);
       expectArraysClose(await result.data(), new Float32Array([
                           199.03184509277344,
                           0,
                           200.1356964111328,
                           0,
                           207.23953247070312,
                           0,
                           203.34336853027344,
                           0,
                           199.44715881347656,
                           0,
                           200.5509796142578,
                           0,
                           207.65484619140625,
                           0,
                           203.7585906982422,
                           0,
                           199.86244201660156,
                           0,
                           200.96629333496094,
                           0,
                           208.07015991210938,
                           0,
                           204.1739044189453,
                           0,
                           200.2777099609375,
                           0,
                           201.38162231445312,
                           0,
                           208.4853973388672,
                           0,
                           204.5892791748047,
                           0,
                           200.6930694580078,
                           0,
                           201.7969207763672,
                           0,
                           208.90066528320312,
                           0,
                           205.00453186035156,
                           0,
                           201.10836791992188,
                           0,
                           202.21212768554688,
                           0,
                           209.3160400390625,
                           0,
                           205.41981506347656,
                           0,
                           201.52366638183594,
                           0,
                           202.62745666503906,
                           0,
                           209.7312774658203,
                           0,
                           205.83505249023438,
                           0,
                           201.93893432617188,
                           0,
                           203.04275512695312,
                           0,
                           210.1466064453125,
                           0,
                           206.2504119873047,
                           0,
                           177.94564819335938,
                           0,
                           179.040283203125,
                           0,
                           186.1348876953125,
                           0,
                           182.2294921875,
                           0,
                           178.32408142089844,
                           0,
                           179.41868591308594,
                           0,
                           186.51332092285156,
                           0,
                           182.60792541503906,
                           0,
                           178.7025604248047,
                           0,
                           179.797119140625,
                           0,
                           186.89170837402344,
                           0,
                           182.98629760742188,
                           0,
                           179.08096313476562,
                           0,
                           180.17556762695312,
                           0,
                           187.27020263671875,
                           0,
                           183.36476135253906,
                           0,
                           179.45938110351562,
                           0,
                           180.5540313720703,
                           0,
                           187.64859008789062,
                           0,
                           183.7431640625,
                           0,
                           179.8378143310547,
                           0,
                           180.93243408203125,
                           0,
                           188.02700805664062,
                           0,
                           184.12167358398438,
                           0,
                           180.21627807617188,
                           0,
                           181.31082153320312,
                           0,
                           188.40548706054688,
                           0,
                           184.50006103515625,
                           0,
                           180.5947265625,
                           0,
                           181.6892852783203,
                           0,
                           188.78384399414062,
                           0,
                           184.87852478027344,
                           0,
                           156.8594512939453,
                           0,
                           157.94485473632812,
                           0,
                           165.0302276611328,
                           0,
                           161.11561584472656,
                           0,
                           157.2010498046875,
                           0,
                           158.28640747070312,
                           0,
                           165.3717803955078,
                           0,
                           161.45721435546875,
                           0,
                           157.54257202148438,
                           0,
                           158.6279754638672,
                           0,
                           165.71339416503906,
                           0,
                           161.7987823486328,
                           0,
                           157.88418579101562,
                           0,
                           158.96957397460938,
                           0,
                           166.05491638183594,
                           0,
                           162.14028930664062,
                           0,
                           158.22573852539062,
                           0,
                           159.31114196777344,
                           0,
                           166.3965301513672,
                           0,
                           162.48191833496094,
                           0,
                           158.5672607421875,
                           0,
                           159.6526641845703,
                           0,
                           166.7381134033203,
                           0,
                           162.82345581054688,
                           0,
                           158.90890502929688,
                           0,
                           159.99427795410156,
                           0,
                           167.07962036132812,
                           0,
                           163.16506958007812,
                           0,
                           159.2504119873047,
                           0,
                           160.33587646484375,
                           0,
                           167.42117309570312,
                           0,
                           163.506591796875,
                           0,
                           81.62464141845703,
                           0,
                           82.67694854736328,
                           0,
                           89.72926330566406,
                           0,
                           85.78160858154297,
                           0,
                           81.83391571044922,
                           0,
                           82.88624572753906,
                           0,
                           89.93854522705078,
                           0,
                           85.99088287353516,
                           0,
                           82.04319763183594,
                           0,
                           83.09552764892578,
                           0,
                           90.14784240722656,
                           0,
                           86.20018005371094,
                           0,
                           82.2524642944336,
                           0,
                           83.30479431152344,
                           0,
                           90.35710144042969,
                           0,
                           86.40945434570312,
                           0,
                           82.46175384521484,
                           0,
                           83.51408386230469,
                           0,
                           90.56640625,
                           0,
                           86.61871337890625,
                           0,
                           82.67106628417969,
                           0,
                           83.72337341308594,
                           0,
                           90.77566528320312,
                           0,
                           86.82799530029297,
                           0,
                           82.88030242919922,
                           0,
                           83.93262481689453,
                           0,
                           90.98494720458984,
                           0,
                           87.03728485107422,
                           0,
                           83.08960723876953,
                           0,
                           84.14189910888672,
                           0,
                           91.19425964355469,
                           0,
                           87.24657440185547,
                           0,
                           30.342220306396484,
                           0,
                           31.372314453125,
                           0,
                           38.40240478515625,
                           0,
                           34.43248748779297,
                           0,
                           30.462581634521484,
                           0,
                           31.49268341064453,
                           0,
                           38.522789001464844,
                           0,
                           34.55289077758789,
                           0,
                           30.582958221435547,
                           0,
                           31.613065719604492,
                           0,
                           38.64316177368164,
                           0,
                           34.67326354980469,
                           0,
                           30.703351974487305,
                           0,
                           31.733449935913086,
                           0,
                           38.7635612487793,
                           0,
                           34.79364013671875,
                           0,
                           30.823745727539062,
                           0,
                           31.85383415222168,
                           0,
                           38.883941650390625,
                           0,
                           34.91405487060547,
                           0,
                           30.944120407104492,
                           0,
                           31.97423553466797,
                           0,
                           39.00433349609375,
                           0,
                           35.03441619873047,
                           0,
                           31.064529418945312,
                           0,
                           32.09461212158203,
                           0,
                           39.12467956542969,
                           0,
                           35.15480422973633,
                           0,
                           31.18491554260254,
                           0,
                           32.214988708496094,
                           0,
                           39.24509048461914,
                           0,
                           35.275184631347656,
                           0,
                           9.255995750427246,
                           0,
                           10.276878356933594,
                           0,
                           17.29776954650879,
                           0,
                           13.31864070892334,
                           0,
                           9.339529991149902,
                           0,
                           10.360406875610352,
                           0,
                           17.38127899169922,
                           0,
                           13.402166366577148,
                           0,
                           9.423040390014648,
                           0,
                           10.443924903869629,
                           0,
                           17.464799880981445,
                           0,
                           13.485676765441895,
                           0,
                           9.506563186645508,
                           0,
                           10.52743911743164,
                           0,
                           17.548315048217773,
                           0,
                           13.569193840026855,
                           0,
                           9.590082168579102,
                           0,
                           10.610960006713867,
                           0,
                           17.631839752197266,
                           0,
                           13.652719497680664,
                           0,
                           9.673604011535645,
                           0,
                           10.694486618041992,
                           0,
                           17.71535301208496,
                           0,
                           13.736241340637207,
                           0,
                           9.75711727142334,
                           0,
                           10.777996063232422,
                           0,
                           17.798879623413086,
                           0,
                           13.819762229919434,
                           0,
                           9.840631484985352,
                           0,
                           10.861517906188965,
                           0,
                           17.882396697998047,
                           0,
                           13.903274536132812,
                           0,
                           0,
                           16.824371337890625,
                           0,
                           15.81270980834961,
                           0,
                           18.80104637145996,
                           0,
                           20.789379119873047,
                           0,
                           16.77772331237793,
                           0,
                           15.766058921813965,
                           0,
                           18.754398345947266,
                           0,
                           20.742725372314453,
                           0,
                           16.731060028076172,
                           0,
                           15.719403266906738,
                           0,
                           18.70773696899414,
                           0,
                           20.696077346801758,
                           0,
                           16.684402465820312,
                           0,
                           15.672741889953613,
                           0,
                           18.66107749938965,
                           0,
                           20.6494197845459,
                           0,
                           16.63775062561035,
                           0,
                           15.626089096069336,
                           0,
                           18.614425659179688,
                           0,
                           20.602767944335938,
                           0,
                           16.59109115600586,
                           0,
                           15.579432487487793,
                           0,
                           18.567766189575195,
                           0,
                           20.556106567382812,
                           0,
                           16.5444393157959,
                           0,
                           15.5327787399292,
                           0,
                           18.521106719970703,
                           0,
                           20.50945281982422,
                           0,
                           16.497783660888672,
                           0,
                           15.486122131347656,
                           0,
                           18.474454879760742,
                           0,
                           20.462799072265625,
                           0,
                           23.250638961791992,
                           0,
                           22.247472763061523,
                           0,
                           25.24430274963379,
                           0,
                           27.241140365600586,
                           0,
                           23.237972259521484,
                           0,
                           22.23480224609375,
                           0,
                           25.231632232666016,
                           0,
                           27.228464126586914,
                           0,
                           23.225296020507812,
                           0,
                           22.22212791442871,
                           0,
                           25.21895980834961,
                           0,
                           27.21579360961914,
                           0,
                           23.212623596191406,
                           0,
                           22.209455490112305,
                           0,
                           25.206287384033203,
                           0,
                           27.203121185302734,
                           0,
                           23.199953079223633,
                           0,
                           22.19678497314453,
                           0,
                           25.19361686706543,
                           0,
                           27.190446853637695,
                           0,
                           23.187280654907227,
                           0,
                           22.184112548828125,
                           0,
                           25.18094253540039,
                           0,
                           27.177776336669922,
                           0,
                           23.17460823059082,
                           0,
                           22.17144012451172,
                           0,
                           25.168270111083984,
                           0,
                           27.16510772705078,
                           0,
                           23.161937713623047,
                           0,
                           22.15877342224121,
                           0,
                           25.15559959411621,
                           0,
                           27.152433395385742,
                           0,
                           143.3692626953125,
                           0,
                           142.4129180908203,
                           0,
                           145.45651245117188,
                           0,
                           147.50018310546875,
                           0,
                           143.54379272460938,
                           0,
                           142.58741760253906,
                           0,
                           145.63104248046875,
                           0,
                           147.67469787597656,
                           0,
                           143.71836853027344,
                           0,
                           142.761962890625,
                           0,
                           145.80560302734375,
                           0,
                           147.84922790527344,
                           0,
                           143.89285278320312,
                           0,
                           142.93650817871094,
                           0,
                           145.98011779785156,
                           0,
                           148.0237579345703,
                           0,
                           144.06736755371094,
                           0,
                           143.11102294921875,
                           0,
                           146.15463256835938,
                           0,
                           148.19827270507812,
                           0,
                           144.24191284179688,
                           0,
                           143.28558349609375,
                           0,
                           146.32920837402344,
                           0,
                           148.37281799316406,
                           0,
                           144.4164276123047,
                           0,
                           143.46005249023438,
                           0,
                           146.50369262695312,
                           0,
                           148.54733276367188,
                           0,
                           144.59097290039062,
                           0,
                           143.63461303710938,
                           0,
                           146.67822265625,
                           0,
                           148.7218475341797,
                           0,
                           164.4600372314453,
                           0,
                           163.51295471191406,
                           0,
                           166.5657958984375,
                           0,
                           168.61868286132812,
                           0,
                           164.67147827148438,
                           0,
                           163.72433471679688,
                           0,
                           166.7772216796875,
                           0,
                           168.8300323486328,
                           0,
                           164.8828582763672,
                           0,
                           163.93569946289062,
                           0,
                           166.9885711669922,
                           0,
                           169.04141235351562,
                           0,
                           165.09426879882812,
                           0,
                           164.14710998535156,
                           0,
                           167.199951171875,
                           0,
                           169.25283813476562,
                           0,
                           165.3056640625,
                           0,
                           164.35853576660156,
                           0,
                           167.41136169433594,
                           0,
                           169.46417236328125,
                           0,
                           165.51702880859375,
                           0,
                           164.56993103027344,
                           0,
                           167.62271118164062,
                           0,
                           169.6755828857422,
                           0,
                           165.7284393310547,
                           0,
                           164.78128051757812,
                           0,
                           167.83413696289062,
                           0,
                           169.88697814941406,
                           0,
                           165.93983459472656,
                           0,
                           164.99270629882812,
                           0,
                           168.04551696777344,
                           0,
                           170.098388671875,
                           0,
                           185.55088806152344,
                           0,
                           184.6129608154297,
                           0,
                           187.675048828125,
                           0,
                           189.7371063232422,
                           0,
                           185.79916381835938,
                           0,
                           184.86123657226562,
                           0,
                           187.92327880859375,
                           0,
                           189.98538208007812,
                           0,
                           186.0474090576172,
                           0,
                           185.10946655273438,
                           0,
                           188.17156982421875,
                           0,
                           190.23358154296875,
                           0,
                           186.2957000732422,
                           0,
                           185.35772705078125,
                           0,
                           188.4198455810547,
                           0,
                           190.48182678222656,
                           0,
                           186.5438995361328,
                           0,
                           185.60601806640625,
                           0,
                           188.66802978515625,
                           0,
                           190.73011779785156,
                           0,
                           186.7921905517578,
                           0,
                           185.8542938232422,
                           0,
                           188.9163360595703,
                           0,
                           190.97837829589844,
                           0,
                           187.04046630859375,
                           0,
                           186.10252380371094,
                           0,
                           189.16461181640625,
                           0,
                           191.2266387939453,
                           0,
                           187.28866577148438,
                           0,
                           186.35073852539062,
                           0,
                           189.41281127929688,
                           0,
                           191.47488403320312,
                           0,
                           123.1520767211914,
                           0,
                           122.19806671142578,
                           0,
                           125.2440414428711,
                           0,
                           127.2900390625,
                           0,
                           123.33600616455078,
                           0,
                           122.38198852539062,
                           0,
                           125.42801666259766,
                           0,
                           127.47396850585938,
                           0,
                           123.51993560791016,
                           0,
                           122.56593322753906,
                           0,
                           125.61190795898438,
                           0,
                           127.65791320800781,
                           0,
                           123.70388793945312,
                           0,
                           122.74989318847656,
                           0,
                           125.79586029052734,
                           0,
                           127.84185791015625,
                           0,
                           123.8878402709961,
                           0,
                           122.93380737304688,
                           0,
                           125.97978210449219,
                           0,
                           128.02578735351562,
                           0,
                           124.07174682617188,
                           0,
                           123.11774444580078,
                           0,
                           126.16372680664062,
                           0,
                           128.20973205566406,
                           0,
                           124.25569152832031,
                           0,
                           123.30166625976562,
                           0,
                           126.34765625,
                           0,
                           128.39364624023438,
                           0,
                           124.43962097167969,
                           0,
                           123.48563385009766,
                           0,
                           126.5316162109375,
                           0,
                           128.57757568359375,
                           0,
                           114.89634704589844,
                           0,
                           113.9622802734375,
                           0,
                           117.0282211303711,
                           0,
                           119.09419250488281,
                           0,
                           115.16014099121094,
                           0,
                           114.22611236572266,
                           0,
                           117.29205322265625,
                           0,
                           119.3580093383789,
                           0,
                           115.4239501953125,
                           0,
                           114.48991394042969,
                           0,
                           117.55585479736328,
                           0,
                           119.62179565429688,
                           0,
                           115.68775939941406,
                           0,
                           114.75369262695312,
                           0,
                           117.81966400146484,
                           0,
                           119.8856201171875,
                           0,
                           115.95157623291016,
                           0,
                           115.01752471923828,
                           0,
                           118.08346557617188,
                           0,
                           120.14942169189453,
                           0,
                           116.21538543701172,
                           0,
                           115.28131866455078,
                           0,
                           118.3472900390625,
                           0,
                           120.4132308959961,
                           0,
                           116.47921752929688,
                           0,
                           115.54513549804688,
                           0,
                           118.61109161376953,
                           0,
                           120.67703247070312,
                           0,
                           116.74298095703125,
                           0,
                           115.8089599609375,
                           0,
                           118.87488555908203,
                           0,
                           120.94085693359375,
                           0,
                           124.23828125,
                           0,
                           123.31038665771484,
                           0,
                           126.38246154785156,
                           0,
                           128.45458984375,
                           0,
                           124.52668762207031,
                           0,
                           123.59877014160156,
                           0,
                           126.67086029052734,
                           0,
                           128.74295043945312,
                           0,
                           124.8150634765625,
                           0,
                           123.88714599609375,
                           0,
                           126.95924377441406,
                           0,
                           129.03134155273438,
                           0,
                           125.10343170166016,
                           0,
                           124.17549896240234,
                           0,
                           127.24764251708984,
                           0,
                           129.31973266601562,
                           0,
                           125.39181518554688,
                           0,
                           124.46392822265625,
                           0,
                           127.53602600097656,
                           0,
                           129.60812377929688,
                           0,
                           125.68020629882812,
                           0,
                           124.7523193359375,
                           0,
                           127.82440948486328,
                           0,
                           129.89651489257812,
                           0,
                           125.96862030029297,
                           0,
                           125.04068756103516,
                           0,
                           128.11279296875,
                           0,
                           130.18487548828125,
                           0,
                           126.2569808959961,
                           0,
                           125.3290786743164,
                           0,
                           128.40118408203125,
                           0,
                           130.4732666015625,
                           0,
                           133.5802459716797,
                           0,
                           132.65847778320312,
                           0,
                           135.73667907714844,
                           0,
                           137.81495666503906,
                           0,
                           133.89320373535156,
                           0,
                           132.971435546875,
                           0,
                           136.04966735839844,
                           0,
                           138.12791442871094,
                           0,
                           134.20614624023438,
                           0,
                           133.28439331054688,
                           0,
                           136.36264038085938,
                           0,
                           138.4408721923828,
                           0,
                           134.5191192626953,
                           0,
                           133.59735107421875,
                           0,
                           136.6756134033203,
                           0,
                           138.7538299560547,
                           0,
                           134.8320770263672,
                           0,
                           133.9103240966797,
                           0,
                           136.98855590820312,
                           0,
                           139.06678771972656,
                           0,
                           135.14505004882812,
                           0,
                           134.22328186035156,
                           0,
                           137.30152893066406,
                           0,
                           139.3797607421875,
                           0,
                           135.45802307128906,
                           0,
                           134.53623962402344,
                           0,
                           137.6144561767578,
                           0,
                           139.69271850585938,
                           0,
                           135.7709503173828,
                           0,
                           134.8491973876953,
                           0,
                           137.9274444580078,
                           0,
                           140.00567626953125,
                           0,
                           80.48149871826172,
                           0,
                           79.53673553466797,
                           0,
                           82.59196472167969,
                           0,
                           84.64720153808594,
                           0,
                           80.70243072509766,
                           0,
                           79.7576675415039,
                           0,
                           82.81289672851562,
                           0,
                           84.86812591552734,
                           0,
                           80.92335510253906,
                           0,
                           79.97858428955078,
                           0,
                           83.03382873535156,
                           0,
                           85.08904266357422,
                           0,
                           81.14429473876953,
                           0,
                           80.19952392578125,
                           0,
                           83.25474548339844,
                           0,
                           85.30999755859375,
                           0,
                           81.36522674560547,
                           0,
                           80.42044830322266,
                           0,
                           83.4756851196289,
                           0,
                           85.53091430664062,
                           0,
                           81.58614349365234,
                           0,
                           80.64137268066406,
                           0,
                           83.69661712646484,
                           0,
                           85.75183868408203,
                           0,
                           81.80707550048828,
                           0,
                           80.8623046875,
                           0,
                           83.91754913330078,
                           0,
                           85.97276306152344,
                           0,
                           82.02799987792969,
                           0,
                           81.08323669433594,
                           0,
                           84.13845825195312,
                           0,
                           86.19368743896484
                         ]));
     });

  it('prelu bias stride 2 x=[1,8,8,16] f=[3,3,16,1] s=[2,2] d=8 p=same',
     async () => {
       const inputDepth = 16;
       const xSize = 8;
       const inputShape: [number, number, number, number] =
           [1, xSize, xSize, inputDepth];
       const outputDepth = 8;
       const fSize = 3;
       const pad = 'same';
       const stride: [number, number] = [2, 2];

       const inputs = generateCaseInputs(
           1 * xSize * xSize * inputDepth,
           fSize * fSize * inputDepth * outputDepth);
       const x = tf.tensor4d(inputs.input, inputShape);
       const w =
           tf.tensor4d(inputs.filter, [fSize, fSize, inputDepth, outputDepth]);
       const bias = tf.tensor1d([1, 4, 2, 3, 9, 6, 5, 8]);
       const preluActivationWeights = tf.tensor1d([1, 2, 3, 4, 5, 6, 7, 8]);

       const result = tf.fused.conv2d({
         x,
         filter: w,
         strides: stride,
         pad,
         dataFormat: 'NHWC',
         dilations: [1, 1],
         activation: 'prelu',
         preluActivationWeights,
         bias
       });
       expect(result.shape).toEqual([1, 4, 4, 8]);
       expectArraysClose(
           await result.data(), new Float32Array([
             25.75398063659668,   -41.61178970336914,  26.857805252075195,
             -87.63885498046875,  33.961631774902344,  -114.0812759399414,
             30.065458297729492,  -136.93893432617188, 23.118206024169922,
             -36.33102035522461,  24.212820053100586,  -77.04048156738281,
             31.307422637939453,  -98.12835693359375,  27.402034759521484,
             -115.5947265625,     20.482431411743164,  -31.050262451171875,
             21.567821502685547,  -66.44209289550781,  28.653217315673828,
             -82.17544555664062,  24.73861312866211,   -94.25041198730469,
             11.078080177307129,  -12.208478927612305, 12.130399703979492,
             -28.626232147216797, 19.182720184326172,  -25.253299713134766,
             15.235037803649902,  -18.08960723876953,  4.6677775382995605,
             0.31717729568481445, 5.697869777679443,   -2.8516759872436523,
             12.727968215942383,  2.2569849491119385,  8.758066177368164,
             4.226885795593262,   2.0319995880126953,  2.9575586318969727,
             3.052880048751831,   1.9366796016693115,  10.073760032653809,
             4.915799617767334,   6.094639778137207,   6.89492130279541,
             -0.6037763357162476, 5.5979437828063965,  0.4078875780105591,
             4.586280822753906,   7.419551849365234,   7.5746169090271,
             3.43121600151062,    9.562952041625977,   -1.4065279960632324,
             6.404943943023682,   -1.2100803852081299, 5.401776313781738,
             6.5998077392578125,  8.398608207702637,   2.602976083755493,
             10.395440101623535,  -16.418434143066406, 21.440250396728516,
             -46.38618850708008,  20.483882904052734,  -42.52848815917969,
             23.527509689331055,  -87.84530639648438,  25.571144104003906,
             -19.054208755493164, 24.080629348754883,  -54.32115936279297,
             23.133480072021484,  -55.79951477050781,  26.186328887939453,
             -106.48924255371094, 28.239177703857422,  -21.689987182617188,
             26.721012115478516,  -62.25614929199219,  25.783079147338867,
             -69.070556640625,    28.84514808654785,   -125.13325500488281,
             30.907209396362305,  -13.891133308410645, 18.914127349853516,
             -38.81135940551758,  17.960111618041992,  -29.915504455566406,
             21.006093978881836,  -70.20361328125,     23.052082061767578,
             -12.857919692993164, 17.89089584350586,   -35.771610260009766,
             16.95684814453125,   -24.949115753173828, 20.022798538208008,
             -63.39042282104492,  22.088754653930664,  -14.02528190612793,
             19.06132698059082,   -39.2921257019043,   18.133424758911133,
             -30.847349166870117, 21.205520629882812,  -71.69097137451172,
             23.27761459350586,   -15.192638397216797, 20.23175811767578,
             -42.8126335144043,   19.309999465942383,  -36.74560546875,
             22.388240814208984,  -79.99152374267578,  24.46647834777832,
             -8.556736946105957,  13.584352493286133,  -22.835901260375977,
             12.6395845413208,    -3.336000442504883,  15.694815635681152,
             -33.0570182800293,   17.750045776367188
           ]));
     });

  it('leakyrelu bias stride 2 x=[1,8,8,16] f=[3,3,16,1] s=[2,2] d=8 p=same',
     async () => {
       const inputDepth = 16;
       const xSize = 8;
       const inputShape: [number, number, number, number] =
           [1, xSize, xSize, inputDepth];
       const outputDepth = 8;
       const fSize = 3;
       const pad = 'same';
       const stride: [number, number] = [2, 2];

       const inputs = generateCaseInputs(
           1 * xSize * xSize * inputDepth,
           fSize * fSize * inputDepth * outputDepth);
       const x = tf.tensor4d(inputs.input, inputShape);
       const w =
           tf.tensor4d(inputs.filter, [fSize, fSize, inputDepth, outputDepth]);
       const bias = tf.tensor1d([1, 4, 2, 3, 9, 6, 5, 8]);
       const leakyreluAlpha = 0.3;

       const result = tf.fused.conv2d({
         x,
         filter: w,
         strides: stride,
         pad,
         dataFormat: 'NHWC',
         dilations: [1, 1],
         activation: 'leakyrelu',
         leakyreluAlpha,
         bias
       });
       expect(result.shape).toEqual([1, 4, 4, 8]);
       expectArraysClose(
           await result.data(), new Float32Array([
             25.75398063659668,    -6.241768836975098,   26.857805252075195,
             -6.5729146003723145,  33.961631774902344,   -5.704063892364502,
             30.065458297729492,   -5.135210037231445,   23.118206024169922,
             -5.449653148651123,   24.212820053100586,   -5.778036117553711,
             31.307422637939453,   -4.906418323516846,   27.402034759521484,
             -4.334802627563477,   20.482431411743164,   -4.657539367675781,
             21.567821502685547,   -4.983157157897949,   28.653217315673828,
             -4.108772277832031,   24.73861312866211,    -3.534390687942505,
             11.078080177307129,   -1.8312718868255615,  12.130399703979492,
             -2.1469674110412598,  19.182720184326172,   -1.262665033340454,
             15.235037803649902,   -0.6783602833747864,  4.6677775382995605,
             0.31717729568481445,  5.697869777679443,    -0.21387571096420288,
             12.727968215942383,   2.2569849491119385,   8.758066177368164,
             4.226885795593262,    2.0319995880126953,   2.9575586318969727,
             3.052880048751831,    1.9366796016693115,   10.073760032653809,
             4.915799617767334,    6.094639778137207,    6.89492130279541,
             -0.18113291263580322, 5.5979437828063965,   0.4078875780105591,
             4.586280822753906,    7.419551849365234,    7.5746169090271,
             3.43121600151062,     9.562952041625977,    -0.42195841670036316,
             6.404943943023682,    -0.12100804597139359, 5.401776313781738,
             6.5998077392578125,   8.398608207702637,    2.602976083755493,
             10.395440101623535,   -4.925530433654785,   21.440250396728516,
             -4.6386189460754395,  20.483882904052734,   -2.5517091751098633,
             23.527509689331055,   -3.764799118041992,   25.571144104003906,
             -5.7162628173828125,  24.080629348754883,   -5.432116508483887,
             23.133480072021484,   -3.347970962524414,   26.186328887939453,
             -4.5638251304626465,  28.239177703857422,   -6.5069966316223145,
             26.721012115478516,   -6.225615501403809,   25.783079147338867,
             -4.144233703613281,   28.84514808654785,    -5.36285400390625,
             30.907209396362305,   -4.167340278625488,   18.914127349853516,
             -3.881135940551758,   17.960111618041992,   -1.794930338859558,
             21.006093978881836,   -3.0087265968322754,  23.052082061767578,
             -3.8573760986328125,  17.89089584350586,    -3.5771610736846924,
             16.95684814453125,    -1.4969470500946045,  20.022798538208008,
             -2.7167325019836426,  22.088754653930664,   -4.207584857940674,
             19.06132698059082,    -3.9292125701904297,  18.133424758911133,
             -1.8508410453796387,  21.205520629882812,   -3.0724704265594482,
             23.27761459350586,    -4.557791709899902,   20.23175811767578,
             -4.28126335144043,    19.309999465942383,   -2.2047364711761475,
             22.388240814208984,   -3.428208351135254,   24.46647834777832,
             -2.567021131515503,   13.584352493286133,   -2.283590316772461,
             12.6395845413208,     -0.20016004145145416, 15.694815635681152,
             -1.41672945022583,    17.750045776367188
           ]));
     });

  it('basic with bias', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      bias: tf.tensor1d([5, 6])
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected =
        [0, 8, -6, 11, -12, 14, -18, 17, -24, 20, -30, 23, -36, 26, -42, 29];

    expectArraysClose(await result.data(), expected);
  });

  it('basic with explicit padding', async () => {
    const inputDepth = 1;
    const outputDepth = 1;
    const pad =
        [[0, 0], [1, 2], [0, 1], [0, 0]] as tf.backend_util.ExplicitPadding;
    const stride = 1;
    const dataFormat = 'NHWC';
    const dilation = 1;

    const x = tf.tensor3d([1, 2, 3, 4, 5, 6, 7, 8], [4, 2, inputDepth]);
    const w =
        tf.tensor4d([3, 1, 5, 0, 2, 7, 8, 9], [4, 2, inputDepth, outputDepth]);

    const result = tf.fused.conv2d(
        {x, filter: w, strides: stride, pad, dataFormat, dilations: dilation});

    const resultData = await result.data();
    expect(result.shape).toEqual([4, 2, 1]);
    expectArraysClose(resultData, [133, 66, 200, 102, 108, 58, 56, 58]);
  });

  it('basic with elu', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'elu'
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected =
        [-0.99326, 2, -1, 5, -1, 8, -1, 11, -1, 14, -1, 17, -1, 20, -1, 23];

    expectArraysClose(await result.data(), expected);
  });

  it('basic with prelu', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const alpha = tf.tensor3d([0.25, 0.75], [1, 1, 2]);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'prelu',
      preluActivationWeights: alpha
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected = [
      -1.25, 2, -2.75, 5, -4.25, 8, -5.75, 11, -7.25, 14, -8.75, 17, -10.25, 20,
      -11.75, 23
    ];

    expectArraysClose(await result.data(), expected);
  });

  it('basic with leakyrelu', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const alpha = 0.3;
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'leakyrelu',
      leakyreluAlpha: alpha
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected = [
      -1.5, 2, -3.3000001907348633, 5, -5.100000381469727, 8,
      -6.900000095367432, 11, -8.700000762939453, 14, -10.5, 17,
      -12.300000190734863, 20, -14.100000381469727, 23
    ];

    expectArraysClose(await result.data(), expected);
  });

  it('basic with broadcasted bias and relu', async () => {
    const inputDepth = 2;
    const inShape: [number, number, number, number] = [2, 2, 2, inputDepth];
    const outputDepth = 2;
    const fSize = 1;
    const pad = 0;
    const stride = 1;

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], inShape);
    const w =
        tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides: stride,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      bias: tf.scalar(5),
      activation: 'relu'
    });
    expect(result.shape).toEqual([2, 2, 2, 2]);
    const expected = [0, 7, 0, 10, 0, 13, 0, 16, 0, 19, 0, 22, 0, 25, 0, 28];

    expectArraysClose(await result.data(), expected);
  });

  it('im2row', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [2, 2];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({x, filter: w, strides, pad});

    expectArraysClose(
        await result.data(),
        [10, 5, 10, 50, 25, 50, -10, -5, -10, -50, -25, -50]);
  });

  it('im2row with relu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [2, 2];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'relu'
    });

    expectArraysClose(
        await result.data(), [10, 5, 10, 50, 25, 50, 0, 0, 0, 0, 0, 0]);
  });

  it('im2row with prelu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [2, 2];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);
    const alpha = tf.tensor3d([0.5], [1, 1, inputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'prelu',
      preluActivationWeights: alpha
    });

    expectArraysClose(
        await result.data(),
        [10, 5, 10, 50, 25, 50, -5, -2.5, -5, -25, -12.5, -25]);
  });

  it('im2row with leakyrelu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [2, 2];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);
    const alpha = 0.3;

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'leakyrelu',
      leakyreluAlpha: alpha
    });

    expectArraysClose(await result.data(), [
      10, 5, 10, 50, 25, 50, -3, -1.5, -3, -15.000000953674316,
      -7.500000476837158, -15.000000953674316
    ]);
  });

  it('pointwise with prelu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [1, 1];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);
    const alpha = tf.tensor3d([0.5], [1, 1, inputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'prelu',
      preluActivationWeights: alpha
    });

    expectArraysClose(await result.data(), [
      10,  5,    10,  30,  15,   30,  50,  25,    50,  70,  35,    70,
      20,  10,   20,  40,  20,   40,  60,  30,    60,  80,  40,    80,
      -5,  -2.5, -5,  -15, -7.5, -15, -25, -12.5, -25, -35, -17.5, -35,
      -10, -5,   -10, -20, -10,  -20, -30, -15,   -30, -40, -20,   -40
    ]);
  });

  it('pointwise with leakyrelu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [1, 1];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);
    const alpha = 0.3;

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      activation: 'leakyrelu',
      leakyreluAlpha: alpha
    });

    expectArraysClose(await result.data(), [
      10,
      5,
      10,
      30,
      15,
      30,
      50,
      25,
      50,
      70,
      35,
      70,
      20,
      10,
      20,
      40,
      20,
      40,
      60,
      30,
      60,
      80,
      40,
      80,
      -3,
      -1.5,
      -3,
      -9,
      -4.5,
      -9,
      -15.000000953674316,
      -7.500000476837158,
      -15.000000953674316,
      -21,
      -10.5,
      -21,
      -6,
      -3,
      -6,
      -12,
      -6,
      -12,
      -18,
      -9,
      -18,
      -24,
      -12,
      -24
    ]);
  });

  it('im2row with broadcasted bias and relu', async () => {
    const inputDepth = 1;
    const inputShape: [number, number, number] = [4, 4, inputDepth];
    const outputDepth = 3;
    const fSize = 1;
    const pad = 'same';
    const strides: [number, number] = [2, 2];

    const x = tf.tensor3d(
        [
          10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80
        ],
        inputShape);
    const w = tf.tensor4d([1, 0.5, 1], [fSize, fSize, inputDepth, outputDepth]);

    const result = tf.fused.conv2d({
      x,
      filter: w,
      strides,
      pad,
      dataFormat: 'NHWC',
      dilations: [1, 1],
      bias: tf.scalar(5),
      activation: 'relu'
    });

    expectArraysClose(
        await result.data(), [15, 10, 15, 55, 30, 55, 0, 0, 0, 0, 0, 0]);
  });

  it('backProp input x=[2,3,3,1] f=[2,2,1,1] s=1 p=0', async () => {
    const inputDepth = 1;
    const outputDepth = 1;
    const inputShape: [number, number, number, number] = [2, 3, 3, inputDepth];
    const filterSize = 2;
    const strides = 1;
    const pad = 0;

    const filterShape: [number, number, number, number] =
        [filterSize, filterSize, inputDepth, outputDepth];
    const filter = tf.tensor4d([-1, 1, -2, 0.5], filterShape);

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], inputShape);
    const dy = tf.tensor4d([3, 1, 2, 0, 3, 1, 2, 0], [2, 2, 2, 1]);

    const grads = tf.grads(
        (x: tf.Tensor4D) => tf.fused.conv2d({x, filter, strides, pad}));
    const [dx] = grads([x], dy);

    expect(dx.shape).toEqual(x.shape);
    expectArraysClose(
        await dx.data(),
        [-3, 2, 1, -8, 1.5, 0.5, -4, 1, 0, -3, 2, 1, -8, 1.5, 0.5, -4, 1, 0]);
  });

  it('gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0', async () => {
    const inputDepth = 1;
    const outputDepth = 1;
    const inputShape: [number, number, number, number] = [2, 3, 3, inputDepth];
    const filterSize = 2;
    const strides = 1;
    const pad = 0;

    const filterShape: [number, number, number, number] =
        [filterSize, filterSize, inputDepth, outputDepth];
    const filter = tf.tensor4d([-1, 1, -2, 0.5], filterShape);

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], inputShape);
    const dy = tf.tensor4d([3, 1, 2, 0, 3, 1, 2, 0], [2, 2, 2, 1]);

    const grads = tf.grads(
        (x: tf.Tensor4D, filter: tf.Tensor4D) =>
            tf.fused.conv2d({x, filter, strides, pad}));
    const [dx, dfilter] = grads([x, filter], dy);

    expect(dx.shape).toEqual(x.shape);
    expectArraysClose(
        await dx.data(),
        [-3, 2, 1, -8, 1.5, 0.5, -4, 1, 0, -3, 2, 1, -8, 1.5, 0.5, -4, 1, 0]);

    expect(dfilter.shape).toEqual(filterShape);
    expectArraysClose(await dfilter.data(), [26, 38, 62, 74]);
  });

  it('gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias', async () => {
    const inputDepth = 1;
    const outputDepth = 1;
    const inputShape: [number, number, number, number] = [2, 3, 3, inputDepth];
    const filterSize = 2;
    const strides = 1;
    const pad = 0;

    const filterShape: [number, number, number, number] =
        [filterSize, filterSize, inputDepth, outputDepth];
    const filter = tf.tensor4d([-1, 1, -2, 0.5], filterShape);
    const bias = tf.ones([2, 2, 2, 1]);

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], inputShape);
    const dy = tf.tensor4d([3, 1, 2, 0, 3, 1, 2, 0], [2, 2, 2, 1]);

    const fusedGrads =
        tf.grads((x: tf.Tensor4D, w: tf.Tensor4D, b) => tf.fused.conv2d({
          x,
          filter: w,
          strides,
          pad,
          dataFormat: 'NHWC',
          dilations: [1, 1],
          bias: b
        }));
    const [dxFused, dfilterFused, dbiasFused] =
        fusedGrads([x, filter, bias], dy);

    const grads = tf.grads((x: tf.Tensor4D, filter: tf.Tensor4D, bias) => {
      const conv = tf.conv2d(x, filter, strides, pad);
      const sum = tf.add(conv, bias);
      return sum;
    });
    const [dx, dfilter, dbias] = grads([x, filter, bias], dy);

    expectArraysClose(await dxFused.array(), await dx.array());
    expectArraysClose(await dfilterFused.array(), await dfilter.array());
    expectArraysClose(await dbiasFused.array(), await dbias.array());
  });

  it('gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias and relu',
     async () => {
       const inputDepth = 1;
       const outputDepth = 1;
       const inputShape: [number, number, number, number] =
           [2, 3, 3, inputDepth];
       const filterSize = 2;
       const strides = 1;
       const pad = 0;

       const filterShape: [number, number, number, number] =
           [filterSize, filterSize, inputDepth, outputDepth];
       const filter = tf.tensor4d([-1, 1, -2, 0.5], filterShape);
       const bias = tf.ones([2, 2, 2, 1]);

       const x = tf.tensor4d(
           [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], inputShape);
       const dy = tf.tensor4d([3, 1, 2, 0, 3, 1, 2, 0], [2, 2, 2, 1]);

       const fusedGrads =
           tf.grads((x: tf.Tensor4D, w: tf.Tensor4D, b) => tf.fused.conv2d({
             x,
             filter: w,
             strides,
             pad,
             dataFormat: 'NHWC',
             dilations: [1, 1],
             bias: b,
             activation: 'relu'
           }));
       const [dxFused, dfilterFused, dbiasFused] =
           fusedGrads([x, filter, bias], dy);

       const grads = tf.grads((x: tf.Tensor4D, filter: tf.Tensor4D, bias) => {
         const conv = tf.conv2d(x, filter, strides, pad);
         const sum = tf.add(conv, bias);
         return tf.relu(sum);
       });
       const [dx, dfilter, dbias] = grads([x, filter, bias], dy);

       expectArraysClose(await dxFused.array(), await dx.array());
       expectArraysClose(await dfilterFused.array(), await dfilter.array());
       expectArraysClose(await dbiasFused.array(), await dbias.array());
     });

  it('gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias and elu', async () => {
    const inputDepth = 1;
    const outputDepth = 1;
    const inputShape: [number, number, number, number] = [2, 3, 3, inputDepth];
    const filterSize = 2;
    const strides = 1;
    const pad = 0;

    const filterShape: [number, number, number, number] =
        [filterSize, filterSize, inputDepth, outputDepth];
    const filter = tf.tensor4d([-1, 1, -2, 0.5], filterShape);
    const bias = tf.ones([2, 2, 2, 1]);

    const x = tf.tensor4d(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], inputShape);
    const dy = tf.tensor4d([3, 1, 2, 0, 3, 1, 2, 0], [2, 2, 2, 1]);

    const fusedGrads =
        tf.grads((x: tf.Tensor4D, w: tf.Tensor4D, b) => tf.fused.conv2d({
          x,
          filter: w,
          strides,
          pad,
          dataFormat: 'NHWC',
          dilations: [1, 1],
          bias: b,
          activation: 'elu'
        }));
    const [dxFused, dfilterFused, dbiasFused] =
        fusedGrads([x, filter, bias], dy);

    const grads = tf.grads((x: tf.Tensor4D, filter: tf.Tensor4D, bias) => {
      const conv = tf.conv2d(x, filter, strides, pad);
      const sum = tf.add(conv, bias);
      return tf.elu(sum);
    });
    const [dx, dfilter, dbias] = grads([x, filter, bias], dy);

    expectArraysClose(await dxFused.array(), await dx.array());
    expectArraysClose(await dfilterFused.array(), await dfilter.array());
    expectArraysClose(await dbiasFused.array(), await dbias.array());
  });
});
