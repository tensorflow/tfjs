# Bazel will create symlinks from the workspace directory to output artifacts.
# Build results will be placed in a directory called "dist/bin"
# Other directories will be created like "dist/testlogs"
# Be aware that this will still create a bazel-out symlink in
# your project directory, which you must exclude from version control and your
# editor's search path.
build --symlink_prefix=dist/

# These compile flags are active no matter which build mode we are in
# (dbg vs opt). For flags specific to build mode, see cc_toolchain_config.bzl.
build --cxxopt="-std=c++11"
build --cxxopt="-fno-rtti"
build --cxxopt="-fno-exceptions"
build --cxxopt="-fomit-frame-pointer"

# Remote cache config. Users can add credentials in their .bazelrc.user files.
build:remote --remote_cache=https://storage.googleapis.com/bazel-remote-cache-tfjs

# Config for Google Cloud continuous integration that uses default credentials.
build:ci --config=remote
build:ci --google_default_credentials

# This flag is needed to prevent the bazel cache from being invalidated when
# running bazel via `yarn bazel`.
# See https://github.com/angular/angular/issues/27514.
build --incompatible_strict_action_env
run --incompatible_strict_action_env

# Don't use a sandboxed build since it hurts performance.
# When sandboxed, the wasm backend takes hours to build on a 32 core machine.
build --spawn_strategy=worker,local

# Load any settings specific to the current user.
# .bazelrc.user should appear in .gitignore so that settings are not shared with
# team members. This needs to be last statement in this config, as the user
# configuration should be able to overwrite flags from this file.
# See https://docs.bazel.build/versions/master/best-practices.html#bazelrc
# (Note that we use .bazelrc.user so the file appears next to .bazelrc in
# directory listing, rather than user.bazelrc as suggested in the Bazel docs).
try-import %workspace%/.bazelrc.user
