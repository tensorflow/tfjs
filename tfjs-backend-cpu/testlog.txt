array_util binarySearch -897123.9 should be found at index 0.
array_util binarySearch 54254 should be found at index 15.
array_util binarySearch -3 should be found at index 5.
array_util binarySearch 0 should be found at index 6.
array_util binarySearch -900000 should have an insertion point of 0.
array_util binarySearch 54255 should have an insertion point of 16.
array_util binarySearch 1.1 should have an insertion point of 10.
array_util binarySearch with custom comparator 54254 should be found at index 0.
array_util binarySearch with custom comparator -897123.9 should be found at index 15.
array_util binarySearch with custom comparator -3 should be found at index 10.
array_util binarySearch with custom comparator 0 should be found at index 7.
array_util binarySearch with custom comparator 54254.1 should have an insertion point of 0.
array_util binarySearch with custom comparator -897124 should have an insertion point of 16.
array_util binarySearch with custom comparator with single element array 1 should be found at index 0.
array_util binarySearch with custom comparator with single element array 2 should have an insertion point of 0.
array_util binarySearch with custom comparator with single element array 0 should have an insertion point of 1.
array_util binarySearch test left-most duplicated element should find the index of the first 0.
array_util binarySearch test left-most duplicated element should find the index of the first 1.
array_util binaryInsert inserts correctly.
epsilon cpu {} Epsilon is a function of float precision.
epsilon cpu {} abs(epsilon) > 0.
complex_util mergeRealAndImagArrays.
complex_util splitRealAndImagArrays.
complex_util complexWithEvenIndex.
complex_util complexWithOddIndex.
complex_util exponents cpu {} exponents inverse=false.
complex_util exponents cpu {} exponents inverse=true.
complex_util assignment cpu {} assign complex value in TypedArray.
WEBGL_FORCE_F16_TEXTURES can be activated via forceHalfFloat utility.
WEBGL_FORCE_F16_TEXTURES turns off WEBGL_RENDER_FLOAT32_ENABLED.
HAS_WEBGL false when version is 0.
HAS_WEBGL true when version is 1.
HAS_WEBGL true when version is 2.
WEBGL_PACK true when HAS_WEBGL is true.
WEBGL_PACK false when HAS_WEBGL is false.
WEBGL_PACK_NORMALIZATION true when WEBGL_PACK is true.
WEBGL_PACK_NORMALIZATION false when WEBGL_PACK is false.
WEBGL_PACK_CLIP true when WEBGL_PACK is true.
WEBGL_PACK_CLIP false when WEBGL_PACK is false.
WEBGL_PACK_BINARY_OPERATIONS true when WEBGL_PACK is true.
WEBGL_PACK_BINARY_OPERATIONS false when WEBGL_PACK is false.
WEBGL_PACK_ARRAY_OPERATIONS true when WEBGL_PACK is true.
WEBGL_PACK_ARRAY_OPERATIONS false when WEBGL_PACK is false.
WEBGL_PACK_IMAGE_OPERATIONS true when WEBGL_PACK is true.
WEBGL_PACK_IMAGE_OPERATIONS false when WEBGL_PACK is false.
WEBGL_PACK_REDUCE true when WEBGL_PACK is true.
WEBGL_PACK_REDUCE false when WEBGL_PACK is false.
WEBGL_LAZILY_UNPACK true when WEBGL_PACK is true.
WEBGL_LAZILY_UNPACK false when WEBGL_PACK is false.
WEBGL_CONV_IM2COL true when WEBGL_PACK is true.
WEBGL_CONV_IM2COL false when WEBGL_PACK is false.
WEBGL_MAX_TEXTURE_SIZE is a function of gl.getParameter(MAX_TEXTURE_SIZE).
WEBGL_MAX_TEXTURES_IN_SHADER is a function of gl.getParameter(MAX_TEXTURE_IMAGE_UNITS).
WEBGL_MAX_TEXTURES_IN_SHADER is capped at 16.
WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE disjoint query timer disabled.
WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE disjoint query timer enabled, mobile.
WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE disjoint query timer enabled, not mobile.
WEBGL_SIZE_UPLOAD_UNIFORM is 0 when there is no float32 bit support.
WEBGL_SIZE_UPLOAD_UNIFORM is > 0 when there is float32 bit support.
gpgpu_context linearSearchLastTrue [false].
gpgpu_context linearSearchLastTrue [true].
gpgpu_context linearSearchLastTrue [false, false].
gpgpu_context linearSearchLastTrue [true, false].
gpgpu_context linearSearchLastTrue [true, true].
gpgpu_context linearSearchLastTrue [false, false, false].
gpgpu_context linearSearchLastTrue [true, false, false].
gpgpu_context linearSearchLastTrue [true, true, false].
gpgpu_context linearSearchLastTrue [true, true, true].
gpgpu_context linearSearchLastTrue [false, false, false, false].
gpgpu_context linearSearchLastTrue [true, false, false, false].
gpgpu_context linearSearchLastTrue [true, true, false, false].
gpgpu_context linearSearchLastTrue [true, true, true, false].
gpgpu_context linearSearchLastTrue [true, true, true, true].
tex_util getUnpackedMatrixTextureShapeWidthHeight [1x1] => [1x1].
tex_util getUnpackedMatrixTextureShapeWidthHeight [MxN] => [NxM].
tex_util getPackedMatrixTextureShapeWidthHeight [1x1] => [1x1].
tex_util getPackedMatrixTextureShapeWidthHeight [1x2] => [1x1].
tex_util getPackedMatrixTextureShapeWidthHeight [2x1] => [1x1].
tex_util getPackedMatrixTextureShapeWidthHeight [2x2] => [1x1].
tex_util getPackedMatrixTextureShapeWidthHeight [3x3] => [2x2].
tex_util getPackedMatrixTextureShapeWidthHeight [4x3] => [2x2].
tex_util getPackedMatrixTextureShapeWidthHeight [3x4] => [2x2].
tex_util getPackedMatrixTextureShapeWidthHeight [4x4] => [2x2].
tex_util getPackedMatrixTextureShapeWidthHeight [1024x1024] => [512x512].
tex_util getPackedMatrixTextureShapeWidthHeight [MxN] => [ceil(N/2)xceil(M/2)].
nextFrame cpu {} basic usage.
nextFrame cpu {} does not block timers.
tf.buffer cpu {} float32.
tf.buffer cpu {} get() out of range throws.
tf.buffer cpu {} int32.
tf.buffer cpu {} bool.
tf.buffer cpu {} string.
tf.buffer cpu {} throws when passed non-integer shape.
tf.buffer cpu {} throws when passed negative shape.
debug on cpu {} debug mode does not error when no nans.
debug on cpu {} debug mode errors when nans in tensor construction, float32.
debug on cpu {} debug mode errors when nans in tensor construction, int32.
debug on cpu {} debug mode errors when Infinity in tensor construction.
debug on cpu {} debug mode errors when nans in tensor created from TypedArray.
debug on cpu {} debug mode errors when infinities in op output.
debug on cpu {} debug mode errors when nans in op output.
debug on cpu {} debug mode errors when nans in oneHot op (tensorlike), int32.
debug on cpu {} debug mode errors when nan in convertToTensor, int32.
debug on cpu {} debug mode errors when nan in convertToTensor array input, int32.
debug on cpu {} A x B.
debug off cpu {} no errors where there are nans, and debug mode is disabled.
Backend registration removeBackend disposes the backend and removes the factory.
Backend registration findBackend initializes the backend.
Backend registration custom backend registration.
Backend registration high priority backend registration fails, falls back.
Backend registration low priority and high priority backends, setBackend low priority.
Backend registration default custom background null.
Backend registration allow custom backend.
Backend registration sync backend with await ready works.
Backend registration sync backend without await ready works.
Backend registration async backend with await ready works.
Backend registration async backend without await ready does not work.
Backend registration tf.square() fails if user does not await ready on async backend.
Backend registration tf.square() works when user awaits ready on async backend.
Backend registration Registering async2 (higher priority) fails, async1 becomes active.
Backend registration Registering sync as higher priority and async as lower priority.
Backend registration async as higher priority and sync as lower priority with await ready.
Backend registration async as higher priority and sync as lower priority w/o await ready.
Backend registration Registering and setting a backend that fails to register.
memory cpu {} Sum(float).
memory cpu {} Sum(bool).
memory cpu {} Sum(int32).
memory cpu {} string tensor.
memory cpu {} unreliable is true for string tensors.
profile cpu {} squaring.
profile cpu {} squaring without disposing.
disposeVariables cpu {} reuse same name variable.
Switching cpu backends cpu {} Move data from cpu1 to cpu2 backend.
Switching cpu backends cpu {} can execute op with data from mixed backends.
Detects memory leaks in kernels cpu {} Detects memory leak in a kernel.
Detects memory leaks in kernels cpu {} No mem leak in a kernel with multiple outputs.
Memory allocation outside a test scope constructing a tensor works.
initializes flags from the url no overrides one registered flag.
initializes flags from the url one unregistered flag.
initializes flags from the url one registered flag true.
initializes flags from the url one registered flag false.
initializes flags from the url two registered flags.
flag registration and evaluation one flag registered.
flag registration and evaluation multiple flags registered.
flag registration and evaluation setting overrides value.
flag registration and evaluation set hook is called.
environment.getQueryParams basic.
DEBUG disabled by default.
DEBUG warns when enabled.
IS_BROWSER isBrowser: true.
IS_BROWSER isBrowser: false.
PROD disabled by default.
TENSORLIKE_CHECK_SHAPE_CONSISTENCY disabled when debug is disabled.
TENSORLIKE_CHECK_SHAPE_CONSISTENCY enabled when debug is enabled.
DEPRECATION_WARNINGS_ENABLED enabled by default.
IS_TEST disabled by default.
deprecation warnings deprecationWarn warns.
deprecation warnings disableDeprecationWarnings called, deprecationWarn doesnt warn.
Flag flipping methods tf.enableProdMode.
Flag flipping methods tf.enableDebugMode.
time cpu cpu {} simple upload.
tidy cpu {} returns Tensor.
tidy cpu {} multiple disposes does not affect num arrays.
tidy cpu {} allows primitive types.
tidy cpu {} allows complex types.
tidy cpu {} returns Tensor[].
tidy cpu {} basic usage without return.
tidy cpu {} nested usage.
tidy cpu {} nested usage returns tensor created from outside scope.
tidy cpu {} nested usage with keep works.
tidy cpu {} single argument.
tidy cpu {} single argument, but not a function throws error.
tidy cpu {} 2 arguments, first is string.
tidy cpu {} 2 arguments, but first is not string throws error.
tidy cpu {} 2 arguments, but second is not a function throws error.
tidy cpu {} works with arbitrary depth of result.
gradients cpu {} matmul + relu.
gradients cpu {} grad(f).
gradients cpu {} calling grad(f) twice works.
gradients cpu {} grad(f): throwing an error during forward pass.
gradients cpu {} grad(f): throwing an error during backwards pass.
gradients cpu {} grads(f).
gradients cpu {} calling grads(f) twice works.
gradients cpu {} works with reshape.
gradients cpu {} reshape outside tf.grads() throws error.
gradients cpu {} does not error if irrelevant (pruned) ops are missing grads.
gradients cpu {} errors if relevant ops are missing grads.
gradients cpu {} works with asType.
gradients cpu {} asType outside of tf.grads() throws error.
gradients cpu {} saves tensors from the forward pass as expected.
gradients cpu {} custom ops do not leak.
valueAndGradients cpu {} matmul + relu.
valueAndGradients cpu {} matmul + relu + inner tidy.
higher-order gradients cpu {} grad(grad(f)).
higher-order gradients cpu {} grad(grad(x^2)).
higher-order gradients cpu {} grads(grads(f)).
customGradient cpu {} basic.
customGradient cpu {} second order derivative through customGradient.
customGradient cpu {} calling gradient of custom op twice works.
http-load fetch cpu {} 1 group, 2 weights, 1 path.
http-load fetch cpu {} throw exception if no fetch polyfill.
concatenateTypedArrays Single float arrays.
concatenateTypedArrays Float arrays.
concatenateTypedArrays Single int32 arrays.
concatenateTypedArrays Int32 arrays.
concatenateTypedArrays Single uint8 arrays.
concatenateTypedArrays Uint8 arrays.
concatenateTypedArrays Mixed Uint8, Int32 and Float32 arrays.
concatenateTypedArrays Concatenate Float32Arrays from SubArrays.
concatenateTypedArrays Concatenate Int32Array from SubArrays.
concatenateTypedArrays Concatenate Uint8Array from SubArrays.
concatenateTypedArrays Concatenate mixed TypedArrays from SubArrays.
concatenateTypedArrays null and undefined inputs.
concatenateTypedArrays empty input array.
concatenateTypedArrays Unsupported dtype.
encodeWeights cpu {} Float32 tensors as NamedTensorMap.
encodeWeights cpu {} Float32 tensors as NamedTensor array.
encodeWeights cpu {} Empty NamedTensor array.
encodeWeights cpu {} Int32 tensors.
encodeWeights cpu {} Bool tensors.
encodeWeights cpu {} String tensors.
encodeWeights cpu {} Mixed dtype tensors.
decodeWeights cpu {} Mixed dtype tensors.
decodeWeights cpu {} Unsupported dtype raises Error.
decodeWeights cpu {} support quantization uint8 weights.
decodeWeights cpu {} support quantization uint16 weights.
stringByteLength ASCII only.
stringByteLength Mixed narrow and wide chars.
concatenateArrayBuffers Concatenate 3 non-empty ArrayBuffers.
concatenateArrayBuffers Concatenate non-empty and empty ArrayBuffers.
concatenateArrayBuffers A single ArrayBuffer.
concatenateArrayBuffers Zero ArrayBuffers.
basename Paths without slashes.
basename Paths with slashes.
util.monitorPromisesProgress Default progress from 0 to 1.
util.monitorPromisesProgress Progress with pre-defined range.
util.monitorPromisesProgress throws error when progress fraction is out of range.
util.monitorPromisesProgress throws error when startFraction more than endFraction.
util.monitorPromisesProgress throws error when promises is null.
util.monitorPromisesProgress throws error when promises is empty array.
jasmine_util.envSatisfiesConstraints ENV satisfies empty constraints.
jasmine_util.envSatisfiesConstraints ENV satisfies matching flag constraints no predicate.
jasmine_util.envSatisfiesConstraints ENV satisfies matching flag and predicate is true.
jasmine_util.envSatisfiesConstraints ENV doesnt satisfy flags and predicate is true.
jasmine_util.envSatisfiesConstraints ENV satisfies flags and predicate is false.
jasmine_util.envSatisfiesConstraints ENV doesnt satiisfy flags and predicate is false.
jasmine_util.parseKarmaFlags parse empty args.
jasmine_util.parseKarmaFlags --testEnv test-env --flags {"IS_NODE": true}.
jasmine_util.parseKarmaFlags "--testEnv unknown" throws error.
jasmine_util.parseKarmaFlags "--flags {}" throws error since --testEnv is missing.
jasmine_util.parseKarmaFlags "--testEnv cpu --flags" throws error since features value is missing.
jasmine_util.parseKarmaFlags "--backend cpu --flags notJson" throws error.
kernel_registry cpu {} register a kernel and call it.
kernel_registry cpu {} errors when running non-existent kernel.
kernel_registry cpu {} errors when registering the same kernel twice.
kernel_registry cpu {} register same kernel on two different backends.
kernel_registry cpu {} register kernel with setup and dispose functions.
gradient registry cpu {} register a kernel with gradient and call it.
gradient registry cpu {} register a kernel with gradient that specifies outputsToSave and call it.
gradient registry cpu {} register a kernel with array inputs and saveAllInputs true.
gradient registry cpu {} register a kernel with map inputs and saveAllInputs true should throw error.
gradient registry cpu {} errors when running non-existent gradient.
gradient registry cpu {} warning when registering the same gradient twice.
addN cpu {} a single tensor.
addN cpu {} two tensors, int32.
addN cpu {} three tensors.
addN cpu {} accepts a tensor-like object.
addN cpu {} list of numbers gets treated as a list of scalars.
addN cpu {} errors if list is empty.
addN cpu {} errors if argument is not an array.
addN cpu {} errors if arguments not of same dtype.
addN cpu {} errors if arguments not of same shape.
add cpu {} c + A.
add cpu {} c + A propagates NaNs.
add cpu {} A + B broadcasting same rank Tensors different shape.
add cpu {} A + B broadcast 2D + 1D.
add cpu {} A + B.
add cpu {} TensorLike.
add cpu {} TensorLike chained.
add cpu {} A + B propagates NaNs.
add cpu {} A + B throws when passed tensors with different shape.
add cpu {} 2D+scalar broadcast.
add cpu {} scalar+1D broadcast.
add cpu {} 2D+2D broadcast each with 1 dim.
add cpu {} 2D+2D broadcast inner dim of b.
add cpu {} 3D+scalar.
add cpu {} 6D+scalar.
add cpu {} 6D+2D.
add cpu {} add tensors with 0 in shape.
add cpu {} gradient: scalar + 1D broadcast.
add cpu {} gradient with clones.
add cpu {} gradient: 2D + 2D broadcast.
add cpu {} complex number addition.
add cpu {} complex number reshape and then addition.
add cpu {} complex number broadcasting addition.
add cpu {} throws when passed a as a non-tensor.
add cpu {} throws when passed b as a non-tensor.
add cpu {} upcasts when dtypes dont match.
add cpu {} accepts a tensor-like object.
div cpu {} same shape.
div cpu {} TensorLike.
div cpu {} TensorLike chained.
div cpu {} division by zero results in infinity.
div cpu {} integer division implements floor divide.
div cpu {} integer division broadcasts.
div cpu {} propagates NaNs.
div cpu {} broadcasting same rank Tensors different shape.
div cpu {} broadcast scalar.
div cpu {} broadcast 2D + 1D.
div cpu {} upcasts when dtypes dont match.
div cpu {} throws when passed tensors of different shapes.
div cpu {} scalar divided by array.
div cpu {} scalar divided by array propagates NaNs.
div cpu {} array divided by scalar.
div cpu {} array divided by scalar propagates NaNs.
div cpu {} gradient: Scalar.
div cpu {} gradient with clones.
div cpu {} gradient: Tensor1D.
div cpu {} gradient: Tensor1D with int32.
div cpu {} gradient: 1d<int32> with 1d<bool> .
div cpu {} gradient: Tensor2D.
div cpu {} gradient: scalar / Tensor1D.
div cpu {} gradient: Tensor2D / scalar.
div cpu {} gradient: Tensor2D / Tensor2D w/ broadcast.
div cpu {} throws when passed a as a non-tensor.
div cpu {} throws when passed b as a non-tensor.
div cpu {} accepts a tensor-like object.
mul cpu {} strict same-shaped tensors.
mul cpu {} strict propagates NaNs.
mul cpu {} strict throws when passed tensors of different shapes.
mul cpu {} strict throws when dtypes do not match.
mul cpu {} strict int32 * int32.
mul cpu {} same-shaped tensors.
mul cpu {} TensorLike.
mul cpu {} TensorLike chained.
mul cpu {} broadcasting tensors.
mul cpu {} broadcasting same rank Tensors different shape.
mul cpu {} broadcast 2D + 1D.
mul cpu {} broadcast 5D + 2D.
mul cpu {} broadcast 6D + 2D.
mul cpu {} gradient: Scalar.
mul cpu {} gradient with clones.
mul cpu {} gradient: Tensor1D.
mul cpu {} gradient: Tensor1D with dtype int32.
mul cpu {} gradient: Tensor2D.
mul cpu {} gradient: scalar * Tensor1D.
mul cpu {} gradient: Tensor2D * scalar.
mul cpu {} gradient: Tensor2D * Tensor2D w/ broadcast.
mul cpu {} complex number multiplication.
mul cpu {} complex number broadcasting multiplication.
mul cpu {} throws when passed a as a non-tensor.
mul cpu {} throws when passed b as a non-tensor.
mul cpu {} upcasts when dtypes dont match.
mul cpu {} accepts a tensor-like object.
pow cpu {} same-shaped tensors.
pow cpu {} TensorLike.
pow cpu {} TensorLike chained.
pow cpu {} int32^int32 returns int32.
pow cpu {} different-shaped tensors.
pow cpu {} propagates NaNs.
pow cpu {} exponent of 0 returns 1.
pow cpu {} handles non int32 exponent param.
pow cpu {} broadcasting same rank Tensors different shape.
pow cpu {} broadcast 2D + 1D.
pow cpu {} powStrict same-shaped tensors.
pow cpu {} powStrict throws when passed tensors of different shapes.
pow cpu {} powStrict handles non int32 exponent param.
pow cpu {} gradients: Scalar ^ Scalar.
pow cpu {} gradient with clones.
pow cpu {} gradients: x ^ 2 where x = 0.
pow cpu {} gradients: Scalar ^ Scalar fractional exponent.
pow cpu {} gradients: Tensor ^ Tensor.
pow cpu {} gradient wrt exponent with negative base.
pow cpu {} gradient: scalar / Tensor1D.
pow cpu {} gradient: Tensor2D / scalar.
pow cpu {} gradient: Tensor2D / Tensor2D w/ broadcast.
pow cpu {} throws when passed base as a non-tensor.
pow cpu {} throws when passed exp as a non-tensor.
pow cpu {} accepts a tensor-like object.
pow cpu {} negative base and whole exponent not NaN.
pow cpu {} negative base and fract exponent NaN.
zeros cpu {} 1D default dtype.
zeros cpu {} 1D float32 dtype.
zeros cpu {} 1D int32 dtype.
zeros cpu {} 1D bool dtype.
zeros cpu {} 2D default dtype.
zeros cpu {} 2D float32 dtype.
zeros cpu {} 2D int32 dtype.
zeros cpu {} 2D bool dtype.
zeros cpu {} 3D default dtype.
zeros cpu {} 3D float32 dtype.
zeros cpu {} 3D int32 dtype.
zeros cpu {} 3D bool dtype.
zeros cpu {} 4D default dtype.
zeros cpu {} 4D float32 dtype.
zeros cpu {} 4D int32 dtype.
zeros cpu {} 4D bool dtype.
ones cpu {} 1D default dtype.
ones cpu {} 1D float32 dtype.
ones cpu {} 1D int32 dtype.
ones cpu {} 1D bool dtype.
ones cpu {} 2D default dtype.
ones cpu {} 2D float32 dtype.
ones cpu {} 2D int32 dtype.
ones cpu {} 2D bool dtype.
ones cpu {} 3D default dtype.
ones cpu {} 3D float32 dtype.
ones cpu {} 3D int32 dtype.
ones cpu {} 3D bool dtype.
ones cpu {} 4D default dtype.
ones cpu {} 4D float32 dtype.
ones cpu {} 4D int32 dtype.
ones cpu {} 4D bool dtype.
zerosLike cpu {} 1D default dtype.
zerosLike cpu {} chainable 1D default dtype.
zerosLike cpu {} 1D float32 dtype.
zerosLike cpu {} 1D int32 dtype.
zerosLike cpu {} 1D bool dtype.
zerosLike cpu {} 2D default dtype.
zerosLike cpu {} 2D float32 dtype.
zerosLike cpu {} 2D int32 dtype.
zerosLike cpu {} 2D bool dtype.
zerosLike cpu {} 3D default dtype.
zerosLike cpu {} 3D float32 dtype.
zerosLike cpu {} 3D int32 dtype.
zerosLike cpu {} 3D bool dtype.
zerosLike cpu {} 4D default dtype.
zerosLike cpu {} 4D float32 dtype.
zerosLike cpu {} 4D int32 dtype.
zerosLike cpu {} 4D bool dtype.
zerosLike cpu {} 4D default dtype.
zerosLike cpu {} 5D float32 dtype.
zerosLike cpu {} 5D int32 dtype.
zerosLike cpu {} 5D bool dtype.
zerosLike cpu {} 5D default dtype.
zerosLike cpu {} 6D float32 dtype.
zerosLike cpu {} 6D int32 dtype.
zerosLike cpu {} 6D bool dtype.
zerosLike cpu {} 6D default dtype.
zerosLike cpu {} zerosLike gradient.
zerosLike cpu {} throws when passed a non-tensor.
zerosLike cpu {} accepts a tensor-like object.
onesLike cpu {} 1D default dtype.
onesLike cpu {} chainable 1D default dtype.
onesLike cpu {} 1D float32 dtype.
onesLike cpu {} 1D int32 dtype.
onesLike cpu {} 1D bool dtype.
onesLike cpu {} 1D complex dtype.
onesLike cpu {} 2D default dtype.
onesLike cpu {} 2D float32 dtype.
onesLike cpu {} 2D int32 dtype.
onesLike cpu {} 2D bool dtype.
onesLike cpu {} 2D complex dtype.
onesLike cpu {} 3D default dtype.
onesLike cpu {} 3D float32 dtype.
onesLike cpu {} 3D int32 dtype.
onesLike cpu {} 3D bool dtype.
onesLike cpu {} 3D complex dtype.
onesLike cpu {} 4D default dtype.
onesLike cpu {} 4D float32 dtype.
onesLike cpu {} 4D int32 dtype.
onesLike cpu {} 4D bool dtype.
onesLike cpu {} 4D default dtype.
onesLike cpu {} 4D complex dtype.
onesLike cpu {} 5D float32 dtype.
onesLike cpu {} 5D int32 dtype.
onesLike cpu {} 5D bool dtype.
onesLike cpu {} 5D default dtype.
onesLike cpu {} 5D complex dtype.
onesLike cpu {} 6D int32 dtype.
onesLike cpu {} 6D bool dtype.
onesLike cpu {} 6D default dtype.
onesLike cpu {} 6D float32 dtype.
onesLike cpu {} 6D complex dtype.
onesLike cpu {} throws when passed a non-tensor.
onesLike cpu {} onesLike gradient.
onesLike cpu {} accepts a tensor-like object.
fromPixels, mock canvas cpu {} accepts a canvas-like element.
fromPixels, mock canvas cpu {} accepts a canvas-like element, numChannels=4.
fromPixels, mock canvas cpu {} errors when passed a non-canvas object.
toPixels no canvas cpu {} draws a rank-2 float32 tensor.
toPixels no canvas cpu {} draws a rank-2 int32 tensor.
toPixels no canvas cpu {} draws a rank-3 float32 tensor, 1 channel.
toPixels no canvas cpu {} draws a rank-3 int32 tensor, 1 channel.
toPixels no canvas cpu {} draws a rank-3 float32 tensor, 3 channel.
toPixels no canvas cpu {} draws a rank-3 int32 tensor, 3 channel.
toPixels no canvas cpu {} draws a rank-3 float32 tensor, 4 channel.
toPixels no canvas cpu {} draws a rank-3 int32 tensor, 4 channel.
toPixels no canvas cpu {} throws for scalars.
toPixels no canvas cpu {} throws for rank-1 tensors.
toPixels no canvas cpu {} throws for rank-4 tensors.
toPixels no canvas cpu {} throws for bool dtype.
toPixels no canvas cpu {} throws for rank-3 depth = 2.
toPixels no canvas cpu {} throws for rank-3 depth = 5.
toPixels no canvas cpu {} throws for float32 tensor with values not in [0 - 1].
toPixels no canvas cpu {} throws for int32 tensor with values not in [0 - 255].
toPixels no canvas cpu {} throws when passed a non-tensor.
toPixels no canvas cpu {} accepts a tensor-like object.
clone cpu {} 1D default dtype.
clone cpu {} 1D float32 dtype.
clone cpu {} 1D int32 dtype.
clone cpu {} 1D bool dtype.
clone cpu {} 1D complex64 dtype.
clone cpu {} 1D string dtype.
clone cpu {} 2D default dtype.
clone cpu {} 2D float32 dtype.
clone cpu {} 2D int32 dtype.
clone cpu {} 2D bool dtype.
clone cpu {} 2D complex64 dtype.
clone cpu {} 2D string dtype.
clone cpu {} 3D default dtype.
clone cpu {} 3D float32 dtype.
clone cpu {} 3D int32 dtype.
clone cpu {} 3D bool dtype.
clone cpu {} 3D complex64 dtype.
clone cpu {} 3D string dtype.
clone cpu {} 4D default dtype.
clone cpu {} 4D float32 dtype.
clone cpu {} 4D int32 dtype.
clone cpu {} 4D bool dtype.
clone cpu {} 4D complex64 dtype.
clone cpu {} 4D string dtype.
clone cpu {} gradient: 1D.
clone cpu {} gradient with clones.
clone cpu {} gradient: 1D string throws error with string dy.
clone cpu {} gradient: 1D string throws error with bool dy.
clone cpu {} gradient: 1D string throws error with int32 dy.
clone cpu {} gradient: 1D string works with float32 dy.
clone cpu {} gradient: 2D int32.
clone cpu {} gradient: 4D bool.
clone cpu {} throws when passed a non-tensor.
gather cpu {} 1D (gather), scalar indices.
gather cpu {} 1D (gather), 1D indices.
gather cpu {} 1D (gather), 2D indices.
gather cpu {} 2D (gather), scalar indices.
gather cpu {} 2D (gather), 1D indices.
gather cpu {} 2D (gather), 2D indices.
gather cpu {} 3D (gather), 1D indices.
gather cpu {} 3D (gather), 2D indices.
gather cpu {} bool (gather), 1D indices.
gather cpu {} bool (gather), 2D indices.
gather cpu {} int32 (gather), 1D indices.
gather cpu {} int32 (gather), 2D indices.
gather cpu {} propagates NaNs.
gather cpu {} chaining, axis=1.
gather cpu {} indices not int32 throws error.
gather cpu {} throws when passed x as a non-tensor.
gather cpu {} throws when passed indices as a non-tensor.
gather cpu {} accepts a tensor-like object.
gather cpu {} gradient 1D (gather), 1D indices.
gather cpu {} gradient with clones.
gather cpu {} gradient 1D (gather), 2D indices.
gather cpu {} gradient 2D (gather) axis=0 shape=[2, 2] 1D indices.
gather cpu {} gradient 2D (gather) axis=0 shape=[2, 2] 2D indices.
gather cpu {} gradient 2D (gather) axis=0 shape=[4, 1] 1D indices.
gather cpu {} gradient 2D (gather) axis=0 shape=[4, 1] 2D indices.
gather cpu {} gradient 2D (gather) axis=1 shape=[2, 2] 1D indices.
gather cpu {} gradient 2D (gather) axis=1 shape=[2, 2] 2D indices.
gather cpu {} gradient 2D (gather) axis=1 shape=[4, 1] 1D indices.
gather cpu {} gradient 2D (gather) axis=1 shape=[4, 1] 2D indices.
gather cpu {} gradient 3D (gather) axis=0 shape=[2, 3, 2] 1D indices.
gather cpu {} gradient 3D (gather) axis=0 shape=[2, 3, 2] 2D indices.
gather cpu {} gradient 3D (gather) axis=0 shape=[1, 4, 4].
gather cpu {} gradient 3D (gather) axis=0 shape=[1, 4, 4] 1D indices.
gather cpu {} gradient 3D (gather) axis=1 shape=[2, 3, 2] 2D indices.
gather cpu {} gradient 3D (gather) axis=1 shape=[1, 4, 4] 1D indices.
gather cpu {} gradient 3D (gather) axis=1 shape=[1, 4, 4] 2D indices.
gather cpu {} gradient 3D (gather) axis=2 shape=[2, 3, 2] 1D indices.
gather cpu {} gradient 3D (gather) axis=2 shape=[2, 3, 2] 2D indices.
gather cpu {} gradient 3D (gather) axis=2 shape=[4, 1, 4] 1D indices.
gather cpu {} gradient 3D (gather) axis=2 shape=[4, 1, 4] 2D indices.
linspace cpu {} start stop.
linspace cpu {} negative start stop.
linspace cpu {} start negative stop.
linspace cpu {} negative start negative stop.
linspace cpu {} should throw with no samples.
range cpu {} start stop.
range cpu {} start stop negative.
range cpu {} start stop step.
range cpu {} start stop large step.
range cpu {} start stop negative step.
range cpu {} start stop incompatible step.
range cpu {} zero step.
range cpu {} should have default dtype.
range cpu {} should have float32 dtype.
range cpu {} should have int32 dtype.
fill cpu {} 1D fill.
fill cpu {} 1D fill string.
fill cpu {} 2D fill.
fill cpu {} 2D fill string.
fill cpu {} 3D fill.
fill cpu {} 4D fill.
fill cpu {} 5D fill.
stack cpu {} scalars 3, 5 and 7.
stack cpu {} scalars 3, 5 and 7 along axis=1 throws error.
stack cpu {} non matching shapes throws error.
stack cpu {} non matching dtypes throws error.
stack cpu {} 2d but axis=3 throws error.
stack cpu {} [1,2], [3,4] and [5,6], axis=0.
stack cpu {} [1,2], [3,4] and [5,6], axis=1.
stack cpu {} [[1,2],[3,4]] and [[5, 6], [7, 8]], axis=0.
stack cpu {} [[1,2],[3,4]] and [[5, 6], [7, 8]], axis=2.
stack cpu {} single tensor.
stack cpu {} throws when passed a non-tensor.
stack cpu {} accepts a tensor-like object.
stack cpu {} chain api.
unstack cpu {} unstack by default.
unstack cpu {} chain api.
unstack cpu {} unstack with negative integer axis.
unstack cpu {} unstack into 3 tensors.
unstack cpu {} unstack by axis=1.
unstack cpu {} unstack rank 3 tensor.
unstack cpu {} unstack rank 3 tensor with axis=1.
unstack cpu {} unstack rank 3 tensor with axis=2.
unstack cpu {} unstack rank 4 tensor.
unstack cpu {} unstack rank 4 tensor with axis=1.
unstack cpu {} unstack rank 4 tensor with axis=2.
unstack cpu {} unstack rank 4 tensor with axis=3.
unstack cpu {} throws when passed a non-tensor.
unstack cpu {} throws when passed an invalid axis.
unstack cpu {} accepts a tensor-like object.
unstack cpu {} grad of unstack axis=0.
unstack cpu {} gradient with clones.
unstack cpu {} grad of unstack axis=1.
split cpu {} split by number.
split cpu {} split by sizes.
split cpu {} chainable split by sizes.
split cpu {} sizes to not sum to axis size throws error.
split cpu {} number of splits does not evenly divide axis.
split cpu {} can split a zero-sized tensor, axis=0.
split cpu {} can split a zero-sized tensor, axis=1.
split cpu {} throws when passed a non-tensor.
split cpu {} accepts a tensor-like object.
split cpu {} gradient of 1st output.
split cpu {} gradient with clones.
split cpu {} gradient of 2nd output.
expandDims cpu {} scalar, default axis is 0.
expandDims cpu {} scalar, axis is out of bounds throws error.
expandDims cpu {} 1d, axis=-3.
expandDims cpu {} 1d, axis=-2.
expandDims cpu {} 1d, axis=-1.
expandDims cpu {} 1d, axis=0.
expandDims cpu {} 1d, axis=1.
expandDims cpu {} 2d, axis=-4.
expandDims cpu {} 2d, axis=-3.
expandDims cpu {} 2d, axis=-2.
expandDims cpu {} 2d, axis=-1.
expandDims cpu {} 2d, axis=0.
expandDims cpu {} 2d, axis=1.
expandDims cpu {} 2d, axis=2.
expandDims cpu {} 4d, axis=0.
expandDims cpu {} 1d string tensor.
expandDims cpu {} 2d string tensor, axis=1.
expandDims cpu {} throws when passed a non-tensor.
expandDims cpu {} accepts a tensor-like object.
expandDims cpu {} works with 0 in shape.
cumsum cpu {} 1D standard.
cumsum cpu {} 1D reverse.
cumsum cpu {} 1D exclusive.
cumsum cpu {} 1D exclusive reverse.
cumsum cpu {} gradient: 1D.
cumsum cpu {} gradient with clones.
cumsum cpu {} 2D standard.
cumsum cpu {} 2D reverse exclusive.
cumsum cpu {} 2D axis=0.
cumsum cpu {} 3D standard.
cumsum cpu {} throws when passed a non-tensor.
cumsum cpu {} accepts a tensor-like object.
cumsum cpu {} throws error for string tensor.
batchToSpaceND cpu {} tensor4d, input shape=[4, 1, 1, 1], blockShape=[2, 2].
batchToSpaceND cpu {} tensor4d, input shape=[4, 1, 1, 3], blockShape=[2, 2].
batchToSpaceND cpu {} tensor4d, input shape=[4, 2, 2, 1], blockShape=[2, 2].
batchToSpaceND cpu {} tensor4d, input shape=[8, 1, 3, 1], blockShape=[2, 2].
batchToSpaceND cpu {} tensor2d, blockShape [1].
batchToSpaceND cpu {} tensor3d,  blockSHape [1].
batchToSpaceND cpu {} tensor3d, blockShape [2].
batchToSpaceND cpu {} throws when blockShape equal to input rank.
batchToSpaceND cpu {} throws when crops row dimension not equal to blockshape.
batchToSpaceND cpu {} throws when input tensor batch not divisible by prod(blockShape).
batchToSpaceND cpu {} accepts a tensor-like object.
batchToSpaceND cpu {} gradients,  input shape=[4, 2, 2], block shape=[2].
batchToSpaceND cpu {} gradients, input shape=[4, 2, 2, 1], block shape=[2, 2].
batchToSpaceND cpu {} gradient with clones, input=[4, 2, 2, 1], block shape=[2, 2].
spaceToBatchND cpu {} tensor4d, input shape=[1, 2, 2, 1], blockShape=[2, 2].
spaceToBatchND cpu {} tensor4d, input shape=[1, 2, 2, 3], blockShape=[2, 2].
spaceToBatchND cpu {} tensor4d, input shape=[1, 4, 4, 1], blockShape=[2, 2].
spaceToBatchND cpu {} tensor4d, input shape=[2, 6, 6, 1], blockShape=[2, 2].
spaceToBatchND cpu {} tensor4d, input shape=[2, 2, 4, 1], blockShape=[2, 2].
spaceToBatchND cpu {} tensor2d, blockShape [2].
spaceToBatchND cpu {} throws when blockShape equal to input rank.
spaceToBatchND cpu {} throws when paddings row dimension not equal to blockshape.
spaceToBatchND cpu {} throws when input tensor spatial dimension not divisible by blockshapes.
spaceToBatchND cpu {} accepts a tensor-like object.
batchToSpaceND X spaceToBatchND cpu {} tensor4d, input shape=[4, 1, 1, 1], blockShape=[2, 2].
batchToSpaceND X spaceToBatchND cpu {} tensor4d, input shape=[2, 6, 6, 1], blockShape=[2, 2].
batchToSpaceND X spaceToBatchND cpu {} gradients,  input shape=[4, 2, 2], block shape=[2].
batchToSpaceND X spaceToBatchND cpu {} gradient with clones input=[4, 2, 2], block shape=[2].
batchToSpaceND X spaceToBatchND cpu {} gradients, input shape=[2, 2, 4, 1], block shape=[2, 2].
depthToSpace cpu {} tensor4d, input shape=[1, 1, 1, 4], blockSize=2, format=NHWC.
depthToSpace cpu {} tensor4d, input shape=[1, 1, 1, 12], blockSize=2, format=NHWC.
depthToSpace cpu {} tensor4d, input shape=[1, 2, 2, 4], blockSize=2, format=NHWC.
depthToSpace cpu {} throws when depth not divisible by blockSize * blockSize.
setdiff1dAsync cpu {} 1d int32 tensor.
setdiff1dAsync cpu {} 1d float32 tensor.
setdiff1dAsync cpu {} empty output.
setdiff1dAsync cpu {} tensor like.
setdiff1dAsync cpu {} should throw if x is not 1d.
setdiff1dAsync cpu {} should throw if y is not 1d.
setdiff1dAsync cpu {} should throw if x and y dtype mismatch.
axis_util combineLocations rank 4, reduce last 2 dims.
axis_util combineLocations rank 4, reduce first two dims.
axis_util combineLocations rank 4, reduce 1st and 3rd dims.
axis_util combineLocations rank 4, reduce 1st and 4th dims.
axis_util combineLocations rank 3, reduce all dims.
axis_util combineLocations rank 2, reduce last dim.
axis_util combineLocations rank 2, reduce first dim.
axis_util computeOutAndReduceShapes rank 4, reduce all dims.
axis_util computeOutAndReduceShapes rank 4, reduce last 2 dims.
axis_util computeOutAndReduceShapes rank 4, reduce first 2 dims.
axis_util computeOutAndReduceShapes rank 4, reduce last 3 dims.
axis_util computeOutAndReduceShapes rank 4, reduce 1st and 3rd dims.
axis_util computeOutAndReduceShapes rank 3, reduce all dims.
axis_util axesAreInnerMostDims rank 4, reduce last dim.
axis_util axesAreInnerMostDims rank 4, reduce last 2 dims.
axis_util axesAreInnerMostDims rank 4, reduce last 3 dims.
axis_util axesAreInnerMostDims rank 4, reduce all dims.
axis_util axesAreInnerMostDims rank 4, reduce all but 2nd.
axis_util axesAreInnerMostDims rank 4, reduce all but 3rd.
axis_util axesAreInnerMostDims rank 4, reduce all but last.
axis_util expandShapeToKeepDim 2d -> 1d axis=0.
axis_util expandShapeToKeepDim 2d -> 1d axis=1.
axis_util expandShapeToKeepDim 3d -> 1d axis=1,2.
axis_util expandShapeToKeepDim 3d -> 2d axis=1.
axis_util getPermAxes all axes, no perm is needed.
axis_util getPermAxes no axes, no perm is needed.
axis_util getPermAxes inner most 2 axes, no perm is needed.
axis_util getPermAxes outer most axis, perm is needed.
axis_util getPermAxes 2 outer most axes, perm is needed.
axis_util getUndoAxesPermutation cpu {} 4d axes.
axis_util getUndoAxesPermutation cpu {} 3d axes, no perm.
axis_util getUndoAxesPermutation cpu {} 3d axes, complete flip.
axis_util getUndoAxesPermutation cpu {} 4d array with values.
batchNorm4D cpu {} simple batchnorm4D, no offset or scale, 2x1x1x2.
batchNorm4D cpu {} simple batchnorm4D, no offset, 2x1x1x2.
batchNorm4D cpu {} simple batchnorm4D, no scale, 2x1x1x2.
batchNorm4D cpu {} simple batchnorm4D, 2x1x1x2.
batchNorm4D cpu {} accepts a tensor-like object.
batchNorm4D cpu {} simple batchnorm4D gradients, 2x1x1x2.
batchNorm4D cpu {} batchnorm4D gradients, same shapes in x, mean and variance.
batchNorm3D cpu {} simple batchnorm3D, no offset or scale, 2x1x2.
batchNorm3D cpu {} simple batchnorm3D, no offset, 2x1x2.
batchNorm3D cpu {} simple batchnorm3D, no scale, 2x1x2.
batchNorm3D cpu {} simple batchnorm3D, 2x1x2.
batchNorm3D cpu {} accepts a tensor-like object.
batchNorm3D cpu {} batchnorm3D, x,mean,var,offset,scale are all 3D.
batchNorm3D cpu {} simple batchnorm3D gradients, 2x1x2.
batchNorm3D cpu {} batchnorm3D gradients, same shapes in x, mean and variance.
batchNorm3D cpu {} batchnorm matches tensorflow, 2x3x3.
batchNorm2D cpu {} simple batchnorm2D, no offset or scale, 2x2.
batchNorm2D cpu {} simple batchnorm2D, no offset, 2x2.
batchNorm2D cpu {} simple batchnorm2D, no scale, 2x2.
batchNorm2D cpu {} simple batchnorm2D, 2x2.
batchNorm2D cpu {} simple batchnorm2D gradients, 2x2.
batchNorm2D cpu {} gradient with clones batchnorm2D.
batchNorm2D cpu {} batchnorm2D gradients, same shapes in x, mean and variance.
batchNorm2D cpu {} gradient with clones.
batchNorm2D cpu {} batchnorm2D matches tensorflow, 3x3.
batchNorm2D cpu {} throws when passed x as a non-tensor.
batchNorm2D cpu {} throws when passed mean as a non-tensor.
batchNorm2D cpu {} throws when passed variance as a non-tensor.
batchNorm2D cpu {} throws when passed scale as a non-tensor.
batchNorm2D cpu {} throws when passed offset as a non-tensor.
batchNorm2D cpu {} accepts a tensor-like object.
batchNorm2D cpu {} throws error when x is a string tensor.
batchNorm2D cpu {} throws error when mean is a string tensor.
batchNorm2D cpu {} throws error when variance is a string tensor.
batchNorm2D cpu {} throws error when scale is a string tensor.
batchNorm2D cpu {} throws error when offset is a string tensor.
deprecated batchNormalization cpu {} simple batchnorm2D, 2x2.
prelu cpu {} basic.
prelu cpu {} basic TensorLike.
prelu cpu {} basic TensorLike chained.
prelu cpu {} derivative.
prelu cpu {} gradient with clones.
prelu cpu {} derivative where alpha got broadcasted.
prelu cpu {} throws when passed x as a non-tensor.
prelu cpu {} throws when passed alpha as a non-tensor.
prelu cpu {} throws for string tensor.
maximum cpu {} float32 and float32.
maximum cpu {} TensorLike.
maximum cpu {} TensorLike chained.
maximum cpu {} int32 and int32.
maximum cpu {} bool and bool.
maximum cpu {} upcasts when dtypes dont match.
maximum cpu {} propagates NaN.
maximum cpu {} broadcasts Tensor1D and scalar.
maximum cpu {} broadcasts scalar and Tensor1D.
maximum cpu {} broadcasts Tensor1D and Tensor2D.
maximum cpu {} broadcasts 2x1 Tensor2D and 2x2 Tensor2D.
maximum cpu {} gradients: Scalar.
maximum cpu {} gradient with clones.
maximum cpu {} gradients: Tensor1D.
maximum cpu {} gradients: Tensor2D.
maximum cpu {} throws when passed a as a non-tensor.
maximum cpu {} throws when passed b as a non-tensor.
maximum cpu {} accepts a tensor-like object.
maximum cpu {} throws for string tensor.
squaredDifference cpu {} float32 and float32.
squaredDifference cpu {} TensorLike.
squaredDifference cpu {} TensorLike chained.
squaredDifference cpu {} int32 and int32.
squaredDifference cpu {} upcasts when dtypes dont match.
squaredDifference cpu {} propagates NaN.
squaredDifference cpu {} broadcasts Tensor1D and scalar.
squaredDifference cpu {} broadcasts scalar and Tensor1D.
squaredDifference cpu {} broadcasts Tensor1D and Tensor2D.
squaredDifference cpu {} broadcasts 2x1 Tensor2D and 2x2 Tensor2D.
squaredDifference cpu {} gradients: Scalar.
squaredDifference cpu {} gradient with clones.
squaredDifference cpu {} gradients: Tensor1D.
squaredDifference cpu {} gradients: Tensor2D.
squaredDifference cpu {} throws when passed a as a non-tensor.
squaredDifference cpu {} throws when passed b as a non-tensor.
squaredDifference cpu {} accepts a tensor-like object.
squaredDifference cpu {} throws for string tensor.
minimum cpu {} float32 and float32.
minimum cpu {} TensorLike.
minimum cpu {} TensorLike chained.
minimum cpu {} int32 and int32.
minimum cpu {} bool and bool.
minimum cpu {} upcasts when dtypes dont match.
minimum cpu {} propagates NaN.
minimum cpu {} broadcasts Tensor1D and scalar.
minimum cpu {} broadcasts scalar and Tensor1D.
minimum cpu {} broadcasts Tensor1D and Tensor2D.
minimum cpu {} broadcasts 2x1 Tensor2D and 2x2 Tensor2D.
minimum cpu {} gradients: Scalar.
minimum cpu {} gradient with clones.
minimum cpu {} gradients: Tensor1D.
minimum cpu {} gradients: Tensor2D.
minimum cpu {} throws when passed a as a non-tensor.
minimum cpu {} throws when passed b as a non-tensor.
minimum cpu {} accepts a tensor-like object.
minimum cpu {} throws for string tensor.
mod cpu {} float32 and float32.
mod cpu {} TensorLike.
mod cpu {} TensorLike chained.
mod cpu {} int32 and int32.
mod cpu {} upcasts when dtypes dont match.
mod cpu {} propagates NaN.
mod cpu {} broadcasts Tensor1D and scalar.
mod cpu {} broadcasts scalar and Tensor1D.
mod cpu {} broadcasts Tensor1D and Tensor2D.
mod cpu {} broadcasts 2x1 Tensor2D and 2x2 Tensor2D.
mod cpu {} gradients: Scalar.
mod cpu {} gradient with clones.
mod cpu {} gradients: Tensor1D.
mod cpu {} gradients: Tensor2D.
mod cpu {} gradients: broadcasts scalar and Tensor1D.
mod cpu {} broadcasts Tensor1D and Tensor2D.
mod cpu {} throws when passed a as a non-tensor.
mod cpu {} throws when passed b as a non-tensor.
mod cpu {} accepts a tensor-like object.
mod cpu {} throws for string tensor.
atan2 cpu {} same shape.
atan2 cpu {} uses chaining.
atan2 cpu {} propagates NaNs.
atan2 cpu {} broadcasting same rank Tensors different shape.
atan2 cpu {} throws when passed tensors of different shapes.
atan2 cpu {} upcasts when dtypes dont match.
atan2 cpu {} atan2 of scalar and array propagates NaNs.
atan2 cpu {} atan2 of scalar and array.
atan2 cpu {} gradient: Scalar.
atan2 cpu {} gradient with clones.
atan2 cpu {} gradient: Tensor1D.
atan2 cpu {} gradient: Tensor2D.
atan2 cpu {} gradient: scalar / Tensor1D.
atan2 cpu {} gradient: Tensor2D / scalar.
atan2 cpu {} gradient: Tensor2D / Tensor2D w/ broadcast.
atan2 cpu {} throws when passed a as a non-tensor.
atan2 cpu {} throws when passed b as a non-tensor.
atan2 cpu {} accepts a tensor-like object.
atan2 cpu {} throws for string tensor.
div cpu {} divNoNan divide 0.
div cpu {} divNoNan divide 0 and non-0.
div cpu {} divNoNan divide 0 broadcast.
booleanMaskAsync cpu {} 1d array, 1d mask, default axis.
booleanMaskAsync cpu {} 2d array, 1d mask, default axis.
booleanMaskAsync cpu {} 2d array, 2d mask, default axis.
booleanMaskAsync cpu {} 2d array, 1d mask, axis=1.
booleanMaskAsync cpu {} accepts tensor-like object as array or mask.
booleanMaskAsync cpu {} ensure no memory leak.
booleanMaskAsync cpu {} should throw if mask is scalar.
booleanMaskAsync cpu {} should throw if array and mask shape miss match.
broadcastTo cpu {} [] -> [3,2].
broadcastTo cpu {} [2] -> [3,2].
broadcastTo cpu {} [3,1] -> [3,2].
broadcast_util.getBroadcastShape two scalars.
broadcast_util.getBroadcastShape scalar and 1d.
broadcast_util.getBroadcastShape scalar and 2d.
broadcast_util.getBroadcastShape 1d and 2d.
broadcast_util.getBroadcastShape 2d and 3d.
broadcast_util.getBroadcastShape 3d and 3d.
broadcast_util.getBroadcastShape incompatible inner shape.
broadcast_util.getBroadcastShape incompatible middle shape.
broadcast_util.getBroadcastShape compatible with broadcasting support.
broadcast_util.getBroadcastShape 3d and 3d, each gets broadcasted.
broadcast_util.getBroadcastShape [0] and [1] = [0].
broadcast_util.getBroadcastShape [0] and [0] = [0].
broadcast_util.getBroadcastShape [0, 1] and [1, 3] = [0, 3].
broadcast_util.getBroadcastShape [5, 0, 3] and [5, 1, 1] = [5, 0, 3].
broadcast_util.getBroadcastShape [1] and [0, 0, 4] = [0, 0, 4].
broadcast_util.getBroadcastDims [] => [].
broadcast_util.getBroadcastDims [] => [5, 4].
broadcast_util.getBroadcastDims [1] => [5].
broadcast_util.getBroadcastDims [5, 1] => [5, 3].
broadcast_util.getBroadcastDims [1, 3] => [5, 3].
broadcast_util.getBroadcastDims [1, 1] => [5, 3].
broadcast_util.getBroadcastDims [4, 1, 3] => [4, 5, 3].
broadcast_util.getReductionAxes [] => [].
broadcast_util.getReductionAxes [] => [5, 4].
broadcast_util.getReductionAxes [1] => [5].
broadcast_util.getReductionAxes [5, 1] => [5, 3].
broadcast_util.getReductionAxes [1, 3] => [5, 3].
broadcast_util.getReductionAxes [1, 1] => [5, 3].
broadcast_util.getReductionAxes [4, 1, 3] => [4, 5, 3].
clone cpu {} returns a tensor with the same shape and value.
clone cpu {} accepts a tensor-like object.
equal cpu {} Tensor1D - int32.
equal cpu {} Tensor1D - float32.
equal cpu {} upcasts when dtypes dont match.
equal cpu {} TensorLike.
equal cpu {} TensorLike chained.
equal cpu {} mismatched Tensor1D shapes - int32.
equal cpu {} mismatched Tensor1D shapes - float32.
equal cpu {} NaNs in Tensor1D - float32.
equal cpu {} scalar and 1D broadcast.
equal cpu {} Tensor2D - int32.
equal cpu {} Tensor2D - float32.
equal cpu {} broadcasting Tensor2D shapes - int32.
equal cpu {} broadcasting Tensor2D shapes - float32.
equal cpu {} NaNs in Tensor2D - float32.
equal cpu {} 2D and 2D broadcast each with 1 dim.
equal cpu {} 2D and scalar broadcast.
equal cpu {} Tensor3D - int32.
equal cpu {} Tensor3D - float32.
equal cpu {} broadcasting Tensor3D shapes - int32.
equal cpu {} broadcasting Tensor3D shapes - float32.
equal cpu {} NaNs in Tensor3D - float32.
equal cpu {} 3D and scalar.
equal cpu {} Tensor4D - int32.
equal cpu {} Tensor4D - float32.
equal cpu {} broadcasting Tensor4D shapes - int32.
equal cpu {} broadcasting Tensor4D shapes - float32.
equal cpu {} NaNs in Tensor4D - float32.
equal cpu {} throws when passed a as a non-tensor.
equal cpu {} throws when passed b as a non-tensor.
equal cpu {} accepts a tensor-like object.
equalStrict cpu {} Tensor1D - int32.
equalStrict cpu {} Tensor1D - float32.
equalStrict cpu {} mismatched Tensor1D shapes - int32.
equalStrict cpu {} mismatched Tensor1D shapes - float32.
equalStrict cpu {} NaNs in Tensor1D - float32.
equalStrict cpu {} Tensor2D - int32.
equalStrict cpu {} Tensor2D - float32.
equalStrict cpu {} mismatch Tensor2D shapes - int32.
equalStrict cpu {} mismatch Tensor2D shapes - float32.
equalStrict cpu {} NaNs in Tensor2D - float32.
equalStrict cpu {} Tensor3D - int32.
equalStrict cpu {} Tensor3D - float32.
equalStrict cpu {} mismatch Tensor3D shapes - int32.
equalStrict cpu {} mismatch Tensor3D shapes - float32.
equalStrict cpu {} NaNs in Tensor3D - float32.
equalStrict cpu {} Tensor4D - int32.
equalStrict cpu {} Tensor4D - float32.
equalStrict cpu {} mismatch Tensor4D shapes - int32.
equalStrict cpu {} mismatch Tensor4D shapes - float32.
equalStrict cpu {} NaNs in Tensor4D - float32.
equalStrict cpu {} accepts a tensor-like object.
notEqual cpu {} Tensor1D - int32.
notEqual cpu {} Tensor1D - float32.
notEqual cpu {} upcasts when dtypes dont match.
notEqual cpu {} TensorLike.
notEqual cpu {} TensorLike Chained.
notEqual cpu {} mismatched Tensor1D shapes - int32.
notEqual cpu {} mismatched Tensor1D shapes - float32.
notEqual cpu {} NaNs in Tensor1D - float32.
notEqual cpu {} works with NaNs.
notEqual cpu {} scalar and 1D broadcast.
notEqual cpu {} Tensor2D - int32.
notEqual cpu {} Tensor2D - float32.
notEqual cpu {} broadcasting Tensor2D shapes - int32.
notEqual cpu {} broadcasting Tensor2D shapes - float32.
notEqual cpu {} NaNs in Tensor2D - float32.
notEqual cpu {} 2D and scalar broadcast.
notEqual cpu {} 2D and 2D broadcast each with 1 dim.
notEqual cpu {} Tensor3D - int32.
notEqual cpu {} Tensor3D - float32.
notEqual cpu {} broadcasting Tensor3D shapes - int32.
notEqual cpu {} broadcasting Tensor3D shapes - float32.
notEqual cpu {} NaNs in Tensor3D - float32.
notEqual cpu {} 3D and scalar.
notEqual cpu {} Tensor4D - int32.
notEqual cpu {} Tensor4D - float32.
notEqual cpu {} broadcasting Tensor4D shapes - int32.
notEqual cpu {} broadcasting Tensor4D shapes - float32.
notEqual cpu {} NaNs in Tensor4D - float32.
notEqual cpu {} throws when passed a as a non-tensor.
notEqual cpu {} throws when passed b as a non-tensor.
notEqual cpu {} accepts a tensor-like object.
notEqualStrict cpu {} Tensor1D - int32.
notEqualStrict cpu {} Tensor1D - float32.
notEqualStrict cpu {} mismatched Tensor1D shapes - int32.
notEqualStrict cpu {} mismatched Tensor1D shapes - float32.
notEqualStrict cpu {} NaNs in Tensor1D - float32.
notEqualStrict cpu {} strict version throws when x and y are different shape.
notEqualStrict cpu {} Tensor2D - int32.
notEqualStrict cpu {} Tensor2D - float32.
notEqualStrict cpu {} mismatch Tensor2D shapes - int32.
notEqualStrict cpu {} mismatch Tensor2D shapes - float32.
notEqualStrict cpu {} NaNs in Tensor2D - float32.
notEqualStrict cpu {} Tensor3D - int32.
notEqualStrict cpu {} Tensor3D - float32.
notEqualStrict cpu {} mismatch Tensor3D shapes - int32.
notEqualStrict cpu {} mismatch Tensor3D shapes - float32.
notEqualStrict cpu {} NaNs in Tensor3D - float32.
notEqualStrict cpu {} Tensor4D - int32.
notEqualStrict cpu {} Tensor4D - float32.
notEqualStrict cpu {} mismatch Tensor4D shapes - int32.
notEqualStrict cpu {} mismatch Tensor4D shapes - float32.
notEqualStrict cpu {} NaNs in Tensor4D - float32.
notEqualStrict cpu {} accepts a tensor-like object.
less cpu {} Tensor1D - int32.
less cpu {} Tensor1D - float32.
less cpu {} TensorLike.
less cpu {} TensorLike Chained.
less cpu {} upcasts when dtypes dont match.
less cpu {} mismatched Tensor1D shapes - int32.
less cpu {} mismatched Tensor1D shapes - float32.
less cpu {} NaNs in Tensor1D - float32.
less cpu {} Tensor2D - int32.
less cpu {} Tensor2D - float32.
less cpu {} broadcasting Tensor2D shapes - int32.
less cpu {} broadcasting Tensor2D shapes - float32.
less cpu {} NaNs in Tensor2D - float32.
less cpu {} Tensor3D - int32.
less cpu {} Tensor3D - float32.
less cpu {} broadcasting Tensor3D shapes - int32.
less cpu {} broadcasting Tensor3D float32.
less cpu {} NaNs in Tensor3D - float32.
less cpu {} Tensor4D - int32.
less cpu {} Tensor4D - float32.
less cpu {} broadcasting Tensor4D shapes - int32.
less cpu {} broadcasting Tensor4D shapes - float32.
less cpu {} NaNs in Tensor4D - float32.
less cpu {} throws when passed a as a non-tensor.
less cpu {} throws when passed b as a non-tensor.
less cpu {} accepts a tensor-like object.
lessStrict cpu {} Tensor1D - strict version throws when a and b are different shape.
lessStrict cpu {} Tensor2D - strict version throws when a and b are different shape.
lessStrict cpu {} Tensor3D - strict version throws when a and b are different shape.
lessStrict cpu {} Tensor4D - strict version throws when a and b are different shape.
lessStrict cpu {} accepts a tensor-like object.
lessEqual cpu {} Tensor1D - int32.
lessEqual cpu {} Tensor1D - float32.
lessEqual cpu {} upcasts when dtypes dont match.
lessEqual cpu {} TensorLike.
lessEqual cpu {} TensorLike Chained.
lessEqual cpu {} mismatched Tensor1D shapes - int32.
lessEqual cpu {} mismatched Tensor1D shapes - float32.
lessEqual cpu {} NaNs in Tensor1D - float32.
lessEqual cpu {} Tensor2D - int32.
lessEqual cpu {} Tensor2D - float32.
lessEqual cpu {} broadcasting Tensor2D shapes - int32.
lessEqual cpu {} broadcasting Tensor2D shapes - float32.
lessEqual cpu {} NaNs in Tensor2D - float32.
lessEqual cpu {} Tensor3D - int32.
lessEqual cpu {} Tensor3D - float32.
lessEqual cpu {} broadcasting Tensor3D shapes - int32.
lessEqual cpu {} broadcasting Tensor3D float32.
lessEqual cpu {} NaNs in Tensor3D - float32.
lessEqual cpu {} Tensor4D - int32.
lessEqual cpu {} Tensor4D - float32.
lessEqual cpu {} broadcasting Tensor4D shapes - int32.
lessEqual cpu {} broadcasting Tensor4D shapes - float32.
lessEqual cpu {} NaNs in Tensor4D - float32.
lessEqual cpu {} throws when passed a as a non-tensor.
lessEqual cpu {} throws when passed b as a non-tensor.
lessEqual cpu {} accepts a tensor-like object.
lessEqualStrict cpu {} Tensor1D - strict version throws when a and b are different shape.
lessEqualStrict cpu {} Tensor2D - strict version throws when a and b are different shape.
lessEqualStrict cpu {} Tensor3D - strict version throws when a and b are different shape.
lessEqualStrict cpu {} Tensor4D - strict version throws when a and b are different shape.
lessEqualStrict cpu {} accepts a tensor-like object.
greater cpu {} Tensor1D - int32.
greater cpu {} Tensor1D - float32.
greater cpu {} upcasts when dtypes dont match.
greater cpu {} TensorLike.
greater cpu {} TensorLike Chained.
greater cpu {} mismatched Tensor1D shapes - int32.
greater cpu {} mismatched Tensor1D shapes - float32.
greater cpu {} NaNs in Tensor1D - float32.
greater cpu {} Tensor2D - int32.
greater cpu {} Tensor2D - float32.
greater cpu {} broadcasting Tensor2D shapes - int32.
greater cpu {} broadcasting Tensor2D shapes - float32.
greater cpu {} NaNs in Tensor2D - float32.
greater cpu {} Tensor3D - int32.
greater cpu {} Tensor3D - float32.
greater cpu {} broadcasting Tensor3D shapes - int32.
greater cpu {} broadcasting Tensor3D shapes - float32.
greater cpu {} NaNs in Tensor3D - float32.
greater cpu {} Tensor4D - int32.
greater cpu {} Tensor4D - float32.
greater cpu {} broadcasting Tensor4D shapes - int32.
greater cpu {} broadcasting Tensor4D shapes - float32.
greater cpu {} NaNs in Tensor4D - float32.
greater cpu {} throws when passed a as a non-tensor.
greater cpu {} throws when passed b as a non-tensor.
greater cpu {} accepts a tensor-like object.
greater cpu {} works with 0 sized tensors.
greaterStrict cpu {} Tensor1D - strict version throws when a and b are different shape.
greaterStrict cpu {} Tensor2D - strict version throws when a and b are different shape.
greaterStrict cpu {} Tensor3D - strict version throws when a and b are different shape.
greaterStrict cpu {} Tensor4D - strict version throws when a and b are different shape.
greaterStrict cpu {} accepts a tensor-like object.
greaterEqual cpu {} Tensor1D - int32.
greaterEqual cpu {} Tensor1D - float32.
greaterEqual cpu {} upcasts when dtypes dont match.
greaterEqual cpu {} mismatched Tensor1D shapes - int32.
greaterEqual cpu {} mismatched Tensor1D shapes - float32.
greaterEqual cpu {} NaNs in Tensor1D - float32.
greaterEqual cpu {} Tensor2D - int32.
greaterEqual cpu {} Tensor2D - float32.
greaterEqual cpu {} broadcasting Tensor2D shapes - int32.
greaterEqual cpu {} broadcasting Tensor2D shapes - float32.
greaterEqual cpu {} NaNs in Tensor2D - float32.
greaterEqual cpu {} Tensor3D - int32.
greaterEqual cpu {} Tensor3D - float32.
greaterEqual cpu {} broadcasting Tensor3D shapes - int32.
greaterEqual cpu {} broadcasting Tensor3D shapes - float32.
greaterEqual cpu {} NaNs in Tensor3D - float32.
greaterEqual cpu {} Tensor4D - int32.
greaterEqual cpu {} Tensor4D - float32.
greaterEqual cpu {} broadcasting Tensor4D shapes - int32.
greaterEqual cpu {} broadcasting Tensor4D shapes - float32.
greaterEqual cpu {} NaNs in Tensor4D - float32.
greaterEqual cpu {} throws when passed a as a non-tensor.
greaterEqual cpu {} throws when passed b as a non-tensor.
greaterEqual cpu {} accepts a tensor-like object.
greaterEqual cpu {} has gradient.
greaterEqual cpu {} gradient with clones.
greaterEqualStrict cpu {} Tensor1D - strict version throws when a and b are different shape.
greaterEqualStrict cpu {} Tensor2D - strict version throws when a and b are different shape.
greaterEqualStrict cpu {} Tensor3D - strict version throws when a and b are different shape.
greaterEqualStrict cpu {} Tensor4D - strict version throws when a and b are different shape.
greaterEqualStrict cpu {} accepts a tensor-like object.
complex64 cpu {} tf.complex.
complex64 cpu {} tf.real.
complex64 cpu {} tf.imag.
complex64 cpu {} throws when shapes dont match.
concat1d cpu {} 3 + 5.
concat1d cpu {} TensorLike 3 + 5.
concat1d cpu {} TensorLike Chained 3 + 5.
concat1d cpu {} 3 + [5,7].
concat1d cpu {} [3,5] + 7.
concat1d cpu {} 3 + 5 + 7 + 9.
concat1d cpu {} single tensor.
concat1d cpu {} accepts a tensor-like object.
concat1d cpu {} concat complex input.
concat2d cpu {} [[3]] + [[5]], axis=0.
concat2d cpu {} TensorLike [[3]] + [[5]], axis=0.
concat2d cpu {} TensorLike Chained [[3]] + [[5]], axis=0.
concat2d cpu {} [[3]] + [[5]], axis=1.
concat2d cpu {} [[1, 2], [3, 4]] + [[5, 6]], axis=0.
concat2d cpu {} [[1, 2],[3, 4]] + [[5, 6]] + [[7, 8]], axis=0.
concat2d cpu {} [[1, 2], [3, 4]] + [[5, 6]], axis=1 throws error.
concat2d cpu {} [[1, 2], [3, 4]] + [[5, 6], [7, 8]], axis=1.
concat2d cpu {} [[1, 2],[3, 4]] + [[5, 6],[7, 8]] + [[9, 10],[11, 12]], axis=1.
concat2d cpu {} accepts a tensor-like object.
concat2d cpu {} concat zero-sized tensors.
concat2d cpu {} concat complex input axis=0.
concat2d cpu {} concat complex input axis=1.
concat3d cpu {} shapes correct concat axis=0.
concat3d cpu {} concat axis=0.
concat3d cpu {} TensorLike concat axis=0.
concat3d cpu {} TensorLike Chained concat axis=0.
concat3d cpu {} shapes correct concat axis=1.
concat3d cpu {} concat axis=1.
concat3d cpu {} shapes correct concat axis=2.
concat3d cpu {} concat a large number of tensors, axis=0.
concat3d cpu {} concat a large number of tensors, axis=1.
concat3d cpu {} concat axis=2.
concat3d cpu {} concat throws when invalid non-axis shapes, axis=0.
concat3d cpu {} concat throws when invalid non-axis shapes, axis=1.
concat3d cpu {} concat throws when invalid non-axis shapes, axis=2.
concat3d cpu {} gradient concat axis=0.
concat3d cpu {} gradient with clones.
concat3d cpu {} gradient concat axis=1.
concat3d cpu {} gradient concat axis=2.
concat3d cpu {} gradient concat axis=-1.
concat3d cpu {} accepts a tensor-like object.
concat3d cpu {} concat tensors with 0 in their shape.
concat3d cpu {} concat complex input axis=0.
concat3d cpu {} concat complex input axis=1.
concat3d cpu {} concat complex input axis=1.
concat throws for non-tensors cpu {} throws when passed a non-tensor.
concat throws for non-tensors cpu {} accepts a tensor-like object.
concat_util.assertConcatShapesMatch rank=3D Non-3D tensor x1.
concat_util.assertConcatShapesMatch rank=3D Non-3D tensor x2.
concat_util.assertConcatShapesMatch rank=3D axis out of bound.
concat_util.assertConcatShapesMatch rank=3D non-axis shape mismatch.
concat_util.assertConcatShapesMatch rank=3D shapes line up.
concat_util.assertConcatShapesMatch rank=3D 3 shapes, all line up.
concat_util.assertConcatShapesMatch rank=3D 3 shapes, 3rd shape does not line up.
concat_util.computeConcatOutputShape compute output shape, axis=0.
confusionMatrix cpu {} 3x3 all cases present in both labels and predictions.
confusionMatrix cpu {} float32 arguments are accepted.
confusionMatrix cpu {} 4x4 all cases present in labels, but not predictions.
confusionMatrix cpu {} 4x4 all cases present in predictions, but not labels.
confusionMatrix cpu {} Plain arrays as inputs.
confusionMatrix cpu {} Int32Arrays as inputs.
confusionMatrix cpu {} 5x5 predictions and labels both missing some cases.
confusionMatrix cpu {} Invalid numClasses leads to Error.
confusionMatrix cpu {} Incorrect tensor rank leads to Error.
confusionMatrix cpu {} Mismatch in lengths leads to Error.
conv_util computeConv2DInfo 1x1 conv over 1x1 array with same pad.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with same pad.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with same pad.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with valid pad.
conv_util computeConv2DInfo 3x3 conv over 5x5 array with same pad with stride 2.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with valid pad with stride 2.
conv_util computeConv2DInfo 2x1 conv over 3x3 array with valid pad with stride 1.
conv_util computeConv2DInfo 2x1 conv over 3x3 array with valid pad with strides h=2, w=1.
conv_util computeConv2DInfo 1x2 conv over 3x3 array with valid pad with stride 1.
conv_util computeConv2DInfo 1x2 conv over 3x3 array with valid pad with stride 1, batch=5.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with same pad with dilations 2.
conv_util computeConv2DInfo 2x1 conv over 3x3 array with same pad with dilations 2.
conv_util computeConv2DInfo 3x4 conv over 8x8 array with same pad with dilations h=4 w=3.
conv_util computeConv2DInfo 2x1 conv over 3x3 array with valid pad with dilations 2.
conv_util computeConv2DInfo 2x2 conv over 3x3 array with valid pad with dilations 2.
conv_util computeConv2DInfo 2x2 conv over 4x4 array with valid pad with dilations 2.
conv_util computeConv3DInfo 1x1x1 conv over 1x1x1 array with same pad.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with same pad.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with same pad.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with valid pad.
conv_util computeConv3DInfo 3x3x3 conv over 5x5x5 array with same pad with stride 2.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with valid pad with stride 2.
conv_util computeConv3DInfo 2x1x1 conv over 3x3x3 array with valid pad with stride 1.
conv_util computeConv3DInfo 2x1x1 conv over 3x3x3 array with valid pad with strides d=2, h=1, w=1.
conv_util computeConv3DInfo 1x2x2 conv over 3x3x3 array with valid pad with stride 1.
conv_util computeConv3DInfo 1x2x2 conv over 3x3x3 array with valid pad with stride 1, batch=5.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with same pad with dilations 2.
conv_util computeConv3DInfo 2x1x1 conv over 3x3x3 array with same pad with dilations 2.
conv_util computeConv3DInfo 3x4x4 conv over 8x8 array with same pad with dilations d=4 h=3 w=3.
conv_util computeConv3DInfo 2x1x1 conv over 3x3x3 array with valid pad with dilations 2.
conv_util computeConv3DInfo 2x2x2 conv over 3x3x3 array with valid pad with dilations 2.
conv_util computeConv3DInfo 2x2x2 conv over 4x4x4 array with valid pad with dilations 2.
conv_util computeConv2DInfo with depthwise=true 1x1 filter over 1x1 array with same pad.
conv_util computeConv2DInfo with depthwise=true 2x2 filter over 3x3 array with same pad, chMul=3, depth=2.
conv_util computeConv2DInfo with depthwise=true 2x2 filter over 3x3 array with valid pad, chMul=3, depth=2.
conv_util computeConv3DInfo with depthwise=true 1x1x1 filter over 1x1x1 array with same pad.
conv_util computeConv3DInfo with depthwise=true 2x2x2 filter over 3x3x3 array with same pad, chMul=3, depth=2.
conv_util computeConv3DInfo with depthwise=true 2x2x2 filter over 3x3x3 array with valid pad, chMul=3, depth=2.
conv_util computeConv2DInfo channelsFirst 2x2 conv over 3x3 array with same pad.
conv_util computeConv2DInfo channelsFirst 2x2 conv over 3x3 array with valid pad.
conv_util computeConv3DInfo channelsFirst 2x2x2 conv over 3x3x3 array with same pad.
conv_util computeConv3DInfo channelsFirst 2x2x2 conv over 3x3x3 array with valid pad.
conv_util computeConv2DInfo roundingMode should fail computing the output dimension of Conv Layer.
conv_util computeConv2DInfo roundingMode Floor the output dimension of Conv Layer.
conv_util computeConv2DInfo roundingMode Round the output dimension of Conv Layer.
conv_util computeConv2DInfo roundingMode Ceil the output dimension of Conv Layer.
conv_util computePoolInfo roundingMode should fail computing the output dimension of Pool Layer.
conv_util computePoolInfo roundingMode Floor the output dimension of Pool Layer.
conv_util computePoolInfo roundingMode Round the output dimension of Pool Layer.
conv_util computePoolInfo roundingMode Ceil the output dimension of Pool Layer.
conv_util computePool3dInfo 1x1x1 pool over 1x1x1 array with valid pad.
conv_util computePool3dInfo 1x1x1 pool over 3x3x3 array with valid pad.
conv_util computePool3dInfo 2x2x2 pool over 3x3x3 array with same pad.
conv_util computePool3dInfo 2x2x2 pool over 3x3x3 array with valid pad.
conv_util computePool3dInfo 2x2x2 pool over 4x4x4 array with valid pad, stride 2.
conv_util computePool3dInfo 2x2x2 pool over 3x3x3 array with valid pad, dilation 2.
conv_util computePool3dInfo 2x2x2 pool over 3x3x3 array with pad 1, roundingMode floor.
conv_util computePool3dInfo throws unknown dataFormat.
conv_util convertConv2DDataFormat convert NHWC to channelsLast.
conv_util convertConv2DDataFormat convert NCHW to channelsFirst.
conv_util convertConv2DDataFormat throws unknown dataFormat.
conv1d cpu {} conv1d input=2x2x1,d2=1,f=1,s=1,d=1,p=same.
conv1d cpu {} conv1d input=4x1,d2=1,f=2x1x1,s=1,d=1,p=valid.
conv1d cpu {} conv1d input=4x1,d2=1,f=2x1x1,s=1,d=2,p=valid.
conv1d cpu {} conv1d input=14x1,d2=1,f=3x1x1,s=1,d=3,p=valid.
conv1d cpu {} TensorLike.
conv1d cpu {} TensorLike Chained.
conv1d cpu {} throws when x is not rank 3.
conv1d cpu {} throws when weights is not rank 3.
conv1d cpu {} throws when x depth does not match weight depth.
conv1d cpu {} throws when both stride and dilation are greater than 1.
conv1d cpu {} throws when passed x as a non-tensor.
conv1d cpu {} throws when passed filter as a non-tensor.
conv1d cpu {} accepts a tensor-like object.
conv1d cpu {} gradient with clones, input=2x2x1,d2=1,f=1,s=1,d=1,p=same.
conv1d cpu {} conv1d gradients input=14x1,d2=1,f=3x1x1,s=1,p=valid.
depthwiseConv2D cpu {} input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=1.
depthwiseConv2D cpu {} input=1x5x5x1,f=3,s=1,d=1,p=valid,chMul=1.
depthwiseConv2D cpu {} input=1x3x3x1,f=2,s=1,d=2,p=valid,chMul=1.
depthwiseConv2D cpu {} input=1x5x5x1,f=3,s=1,d=2,p=valid,chMul=1.
depthwiseConv2D cpu {} input=1x3x3x2,f=2,s=1,d=1,p=same,chMul=1.
depthwiseConv2D cpu {} input=1x5x5x1,f=3,s=1,d=1,p=same,chMul=1.
depthwiseConv2D cpu {} input=1x3x3x2,f=2,s=1,d=2,p=same,chMul=1.
depthwiseConv2D cpu {} input=1x5x5x1,f=3,s=1,d=2,p=same,chMul=1.
depthwiseConv2D cpu {} input=1x3x3x2,f=2,s=1,p=same,chMul=2.
depthwiseConv2D cpu {} input=2x3x3x2,f=2,s=1,p=same,chMul=2.
depthwiseConv2D cpu {} input=2x3x3x2,f=2,s=1,d=2,p=same,chMul=2.
depthwiseConv2D cpu {} Tensor3D is allowed.
depthwiseConv2D cpu {} Pass null for dilations, which defaults to [1, 1].
depthwiseConv2D cpu {} TensorLike.
depthwiseConv2D cpu {} TensorLike Chained.
depthwiseConv2D cpu {} throws when passed x as a non-tensor.
depthwiseConv2D cpu {} throws when passed filter as a non-tensor.
depthwiseConv2D cpu {} accepts a tensor-like object.
depthwiseConv2d gradients cpu {} wrt input.
depthwiseConv2d gradients cpu {} wrt input, squared output.
depthwiseConv2d gradients cpu {} wrt filter.
depthwiseConv2d gradients cpu {} gradient with clones.
depthwiseConv2d gradients cpu {} wrt filter, squared output.
depthwiseConv2d gradients cpu {} throws error on dilations > 1.
depthwiseConv2d gradients cpu {} wrt input, stride=2, pad=valid.
depthwiseConv2d gradients cpu {} wrt filter, stride=2, pad=valid.
depthwiseConv2d gradients cpu {} gradient with clones.
separableConv2d cpu {} input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=1,outDepth=2.
separableConv2d cpu {} input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=1,outDepth=2 in tensor.
separableConv2d cpu {} input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=2,outDepth=2.
separableConv2d cpu {} input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=1,outDepth=2,3D input.
separableConv2d cpu {} input=1x4x4x1,f=2,s=2,d=1,p=valid,chMul=1,outDepth=2.
separableConv2d cpu {} input=2x4x4x1,f=2,s=2,d=1,p=valid,chMul=1,outDepth=2.
separableConv2d cpu {} input=1x4x4x2,f=2,s=2,d=1,p=valid,chMul=1,outDepth=2.
separableConv2d cpu {} input=1x4x4x1,f=2,s=1,d=2,p=valid,chMul=1,outDepth=2.
separableConv2d cpu {} input=1x4x4x1,f=2,s=1,d=1,p=same,chMul=1,outDepth=2.
separableConv2d cpu {} TensorLike.
separableConv2d cpu {} TensorLike Chained.
separableConv2d cpu {} Incorrect input rank raises error.
separableConv2d cpu {} Incorrect depthwise filter rank raises error.
separableConv2d cpu {} Incorrect depthwise filter rank raises error.
separableConv2d cpu {} Incorrect point filter 1st dimension raises error.
separableConv2d cpu {} Incorrect point filter 2nd dimension raises error.
separableConv2d cpu {} Incorrect pointwise filter 3rd dimension raises error.
separableConv2d cpu {} throws when passed x as a non-tensor.
separableConv2d cpu {} throws when passed depthwiseFilter as a non-tensor.
separableConv2d cpu {} throws when passed pointwiseFilter as a non-tensor.
separableConv2d cpu {} accepts a tensor-like object.
conv2d cpu {} x=[1,4,4,1] f=[1,1,1,3] s=2 d=1 p=same.
conv2d cpu {} x=[2,2,2,2] f=[1,1,2,2] s=1 d=1 p=0.
conv2d cpu {} x=[2,2,1] f=[1,1,1,2] s=1 d=1 p=0.
conv2d cpu {} x=[3,3,2] f=[2,2,2,1] s=1 d=1 p=valid.
conv2d cpu {} x=[2,2,2,1] f=[1,1,1,1] s=1 d=1 p=0.
conv2d cpu {} x=[2,1,2,2] f=[1,1,1,1] s=1 d=1 p=0 NCHW.
conv2d cpu {} x=[4,2,1] f=[4,2,1,1] s=1 d=1 p=same.
conv2d cpu {} x=[2,2,1] f=[2,2,1,1] s=1 d=1 p=same.
conv2d cpu {} x=[1,2,2] f=[2,2,1,1] s=1 d=1 p=same NCHW.
conv2d cpu {} x=[2,2,2] f=[2,2,2,1] s=1 d=1 p=same NCHW.
conv2d cpu {} x=[2,1,2,2] f=[2,2,1,1] s=1 d=1 p=same NCHW.
conv2d cpu {} x=[2,2,1] f=[2,2,1,1] s=1 d=1 p=0.
conv2d cpu {} x=[4,4,1] f=[2,2,1,1] s=1 d=2 p=0.
conv2d cpu {} x=[1,3,6,1] f=[2,2,1,1] s=[1,2] d=1 p=valid.
conv2d cpu {} throws when x is not rank 3.
conv2d cpu {} throws when weights is not rank 4.
conv2d cpu {} throws when x depth does not match weight depth.
conv2d cpu {} throws when x depth does not match weight depth NCHW.
conv2d cpu {} throws when dimRoundingMode is set and pad is not a number.
conv2d cpu {} throws when both stride and dilation are greater than 1.
conv2d cpu {} gradient with clones input=[3,3,1] f=[2,2,1,1] s=1 p=0.
conv2d cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0.
conv2d cpu {} gradient x=[1,1,3,3] f=[2,2,1,1] s=1 p=0 NCHW.
conv2d cpu {} gradient x=[2,1,3,3] f=[2,2,1,1] s=1 p=0 NCHW.
conv2d cpu {} throws when passed x as a non-tensor.
conv2d cpu {} throws when passed filter as a non-tensor.
conv2d cpu {} accepts a tensor-like object.
conv2dTranspose cpu {} input=2x2x1,d2=1,f=2,s=1,p=0.
conv2dTranspose cpu {} input=2x2x1,d2=1,f=2,s=1,p=0, batch=2.
conv2dTranspose cpu {} gradient with clones input=[1,3,3,1] f=[2,2,2,1] s=1 padding=valid.
conv2dTranspose cpu {} gradient input=[1,2,2,1] f=[2,2,2,1] s=[2,2] padding=valid.
conv2dTranspose cpu {} gradient input=[1,3,3,1] f=[2,2,2,1] s=[1,1] padding=same.
conv2dTranspose cpu {} gradient input=[1,2,2,2] f=[2,2,2,1] s=[2,2] padding=same.
conv2dTranspose cpu {} throws when x is not rank 3.
conv2dTranspose cpu {} throws when weights is not rank 4.
conv2dTranspose cpu {} throws when x depth does not match weights original output depth.
conv2dTranspose cpu {} throws when passed x as a non-tensor.
conv2dTranspose cpu {} throws when passed filter as a non-tensor.
conv2dTranspose cpu {} accepts a tensor-like object.
conv3d cpu {} x=[1, 2, 3, 1, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid.
conv3d cpu {} x=[1, 2, 1, 3, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid.
conv3d cpu {} x=[1, 1, 2, 3, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid.
conv3d cpu {} x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=1 d=1 p=valid.
conv3d cpu {} x=[1, 5, 8, 7, 1] f=[1, 2, 3, 1, 1] s=[2, 3, 1] d=1 p=same.
conv3d cpu {} x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=2 d=1 p=valid.
conv3d cpu {} x=[1, 6, 7, 8, 2] f=[3, 2, 1, 2, 3] s=3 d=1 p=valid.
conv3d cpu {} x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=2 d=1 p=same.
conv3d cpu {} x=[1, 3, 3, 3, 1] f=[1, 1, 1, 1, 1] s=2 d=1 p=same.
conv3d cpu {} x=[1, 3, 3, 3, 1] f=[1, 1, 1, 1, 1] s=2 d=1 p=valid.
conv3d cpu {} x=[1, 7, 7, 7, 1] f=[2, 2, 2, 1, 1] s=3 d=1 p=same.
conv3d cpu {} x=[1, 7, 7, 7, 1] f=[2, 2, 2, 1, 1] s=3 d=1 p=valid.
conv3d cpu {} x=[1, 2, 1, 2, 1] f=[2, 1, 2, 1, 2] s=1 d=1 p=valid.
conv3d cpu {} gradient with clones, x=[1,3,6,1,1] filter=[2,2,1,1,1] s=1 d=1 p=valid.
conv3d cpu {} throws when passed x as a non-tensor.
conv3d cpu {} throws when passed filter as a non-tensor.
conv3d cpu {} accepts a tensor-like object.
conv3d cpu {} throws when data format not NDHWC.
conv3dTranspose cpu {} input=2x2x2x1,d2=1,f=2,s=1,p=valid.
conv3dTranspose cpu {} input=2x2x2x1,d2=1,f=2,s=1,p=valid, batch=2.
diag cpu {} 1d.
diag cpu {} 2d.
diag cpu {} 3d.
diag cpu {} 4d.
diag cpu {} int32.
diag cpu {} bool.
dropout cpu {} x 1d array, rate 0.
dropout cpu {} x 1d array, rate 0.75.
dropout cpu {} x 2d array, rate 0.
dropout cpu {} x 2d array, rate 0.75.
dropout cpu {} x 1d array, rate 0.75, with noise shape length = 1.
dropout cpu {} x 2d array, rate 0.75, with noise shape length = 2.
dropout cpu {} broadcast noise shape.
dropout cpu {} x 1d array, rate 0.75, with seed.
dropout cpu {} x TensorLike object.
dropout cpu {} throws when x.dtype != float32.
dropout cpu {} throws when rate is not in the range [0, 1).
getNoiseShape cpu {} x.shape == noiseShape.
getNoiseShape cpu {} x.shape and noiseShape have same length, different value.
getNoiseShape cpu {} noiseShape has null value.
getNoiseShape cpu {} x.shape and noiseShape has different length.
getNoiseShape cpu {} noiseShape is null.
eye cpu {} 1x1.
eye cpu {} 2x2.
eye cpu {} 3x3.
eye cpu {} 3x4.
eye cpu {} 4x3.
eye cpu {} with 1D batchShape.
eye cpu {} with 2D batchShape.
eye cpu {} with 3D batchShape.
eye cpu {} 3x3, int32.
eye cpu {} 3x3, bool.
fused matmul cpu {} fused A x B.
fused matmul cpu {} fused A x B with relu.
fused matmul cpu {} fused A x B with elu.
fused matmul cpu {} fused A x B with relu6.
fused matmul cpu {} fused A x B with prelu.
fused matmul cpu {} fused A x B with relu transpose.
fused matmul cpu {} fused A x B with 2d bias and relu.
fused matmul cpu {} fused A x B with relu and broadcasted bias.
fused matmul cpu {} fused A x B with elu and broadcasted bias.
fused matmul cpu {} fused A x B with relu and broadcasted bias different rank.
fused matmul cpu {} fused A x B with 2d bias only.
fused matmul cpu {} fused A x B with relu gradient.
fused matmul cpu {} gradient with clones A x B with relu.
fused matmul cpu {} fused A x B with relu bias gradient.
fused matmul cpu {} fused A x B with relu bias gradient transpose.
fused matmul cpu {} fused A x B with relu and broadcasted bias gradient.
fused depthwiseConv2D cpu {} basic.
fused depthwiseConv2D cpu {} basic with relu.
fused depthwiseConv2D cpu {} basic with broadcasted bias and relu.
fused depthwiseConv2D cpu {} prelu.
fused depthwiseConv2D cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0.
fused depthwiseConv2D cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias.
fused depthwiseConv2D cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias and activation.
fused conv2d cpu {} basic.
fused conv2d cpu {} basic with relu.
fused conv2d cpu {} basic with bias.
fused conv2d cpu {} basic with elu.
fused conv2d cpu {} basic with prelu.
fused conv2d cpu {} basic with broadcasted bias and relu.
fused conv2d cpu {} im2row.
fused conv2d cpu {} im2row with relu.
fused conv2d cpu {} im2row with prelu.
fused conv2d cpu {} pointwise with prelu.
fused conv2d cpu {} im2row with broadcasted bias and relu.
fused conv2d cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0.
fused conv2d cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias.
fused conv2d cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias and relu.
fused conv2d cpu {} gradient x=[2,3,3,1] f=[2,2,1,1] s=1 p=0 with bias and elu.
fused conv2d cpu {} fused matmul with relu6 and gradients.
gatherND cpu {} should work for simple slice.
gatherND cpu {} should work for indexing 2d.
gatherND cpu {} should work for indexing 3d.
gatherND cpu {} should work for batch slice.
gatherND cpu {} should work for batch indexing 2d.
gatherND cpu {} should work for batch indexing 3d.
gatherND cpu {} should work for TensorLike inputs.
gatherND cpu {} should throw error when indices are not int32.
gatherND cpu {} should throw error when indices are scalar.
gatherND cpu {} should throw error when x is scalar.
gatherND cpu {} should throw error when indices inner dim > x shape length.
nonMaxSuppression cpu {} NonMaxSuppression Basic select from three clusters.
nonMaxSuppression cpu {} NonMaxSuppression Basic select from three clusters flipped coordinates.
nonMaxSuppression cpu {} NonMaxSuppression Basic select at most two boxes from three clusters.
nonMaxSuppression cpu {} NonMaxSuppression Basic select at most thirty boxes from three clusters.
nonMaxSuppression cpu {} NonMaxSuppression Basic select single box.
nonMaxSuppression cpu {} NonMaxSuppression Basic select from ten identical boxes.
nonMaxSuppression cpu {} NonMaxSuppression Basic inconsistent box and score shapes.
nonMaxSuppression cpu {} NonMaxSuppression Basic invalid iou threshold.
nonMaxSuppression cpu {} NonMaxSuppression Basic empty input.
nonMaxSuppression cpu {} NonMaxSuppression Basic accepts a tensor-like object.
nonMaxSuppression cpu {} NonMaxSuppressionWithScore select from three clusters with SoftNMS.
nonMaxSuppressionAsync cpu {} NonMaxSuppressionAsync basic select from three clusters.
nonMaxSuppressionAsync cpu {} NonMaxSuppressionAsync basic accepts a tensor-like object.
nonMaxSuppressionAsync cpu {} NonMaxSuppressionWithScoreAsync select from three clusters with SoftNMS.
cropAndResize cpu {} 1x1-bilinear.
cropAndResize cpu {} 5x5-bilinear, no change in shape.
cropAndResize cpu {} 5x5-bilinear, just a crop, no resize.
cropAndResize cpu {} 1x1-nearest.
cropAndResize cpu {} 1x1Flipped-bilinear.
cropAndResize cpu {} 1x1Flipped-nearest.
cropAndResize cpu {} 3x3-bilinear.
cropAndResize cpu {} 3x3-nearest.
cropAndResize cpu {} 3x3Flipped-bilinear.
cropAndResize cpu {} 3x3Flipped-nearest.
cropAndResize cpu {} 3x3to2x2-bilinear.
cropAndResize cpu {} 3x3to2x2-nearest.
cropAndResize cpu {} 3x3to2x2Flipped-bilinear.
cropAndResize cpu {} 3x3to2x2Flipped-nearest.
cropAndResize cpu {} 3x3-BoxisRectangular.
cropAndResize cpu {} 3x3-BoxisRectangular-nearest.
cropAndResize cpu {} 2x2to3x3-Extrapolated.
cropAndResize cpu {} 2x2to3x3-Extrapolated-Float.
cropAndResize cpu {} 2x2to3x3-NoCrop.
cropAndResize cpu {} MultipleBoxes-DifferentBoxes.
cropAndResize cpu {} MultipleBoxes-DifferentBoxes-Nearest.
cropAndResize cpu {} int32 image returns float output.
inTopKAsync cpu {} predictions 2d array, targets 1d array, with default k.
inTopKAsync cpu {} predictions 2d array, targets 1d array, with k=2.
inTopKAsync cpu {} predictions 3d array, targets 2d array, with default k.
inTopKAsync cpu {} predictions 3d array, targets 2d array, with k=2.
inTopKAsync cpu {} lower-index element count first, with default k.
inTopKAsync cpu {} accept tensor-like object, with default k.
inTopKAsync cpu {} doesnt leak tensors with tensor-like objects.
inTopKAsync cpu {} throws when predictions_rank <2.
inTopKAsync cpu {} throws when prediction.rank != targets.rank + 1.
inTopKAsync cpu {} throws when k > size of last dimension of predictions.
bandPart cpu {} keeps tensor unchanged.
bandPart cpu {} upper triangular matrix.
bandPart cpu {} lower triangular matrix.
bandPart cpu {} diagonal elements.
bandPart cpu {} lower triangular elements.
bandPart cpu {} upper triangular elements.
bandPart cpu {} 4X4 matrix - tensorflow python examples.
bandPart cpu {} 3 dimensional matrix.
bandPart cpu {} 2X3X3 tensor.
bandPart cpu {} fails for scalar.
bandPart cpu {} fails for 1D tensor.
bandPart cpu {} fails if numLower or numUpper too large.
bandPart cpu {} works for 3x4 example.
gramSchmidt-tiny cpu {} 2x2, Array of Tensor1D.
gramSchmidt-tiny cpu {} 3x3, Array of Tensor1D.
gramSchmidt-tiny cpu {} 3x3, Matrix.
gramSchmidt-tiny cpu {} 2x3, Matrix.
gramSchmidt-tiny cpu {} 3x2 Matrix throws Error.
gramSchmidt-tiny cpu {} Mismatching dimensions input throws Error.
gramSchmidt-tiny cpu {} Empty input throws Error.
qr cpu {} 1x1.
qr cpu {} 2x2.
qr cpu {} 2x2x2.
qr cpu {} 2x1x2x2.
qr cpu {} 3x3.
qr cpu {} 3x3, zero on diagonal.
qr cpu {} 3x2, fullMatrices = default false.
qr cpu {} 3x2, fullMatrices = true.
qr cpu {} 2x3, fullMatrices = default false.
qr cpu {} 2x3, fullMatrices = true.
qr cpu {} Does not leak memory.
qr cpu {} Insuffient input tensor rank leads to error.
logicalNot cpu {} Tensor1D..
logicalNot cpu {} Tests chaining in Tensor1D.
logicalNot cpu {} Tensor2D.
logicalNot cpu {} Tensor3D.
logicalNot cpu {} Tensor4D.
logicalNot cpu {} Tensor6D.
logicalNot cpu {} throws when passed a non-tensor.
logicalNot cpu {} accepts a tensor-like object.
logicalAnd cpu {} Tensor1D..
logicalAnd cpu {} mismatched Tensor1D shapes.
logicalAnd cpu {} Tensor2D.
logicalAnd cpu {} broadcasting Tensor2D shapes.
logicalAnd cpu {} Tensor3D.
logicalAnd cpu {} broadcasting Tensor3D shapes.
logicalAnd cpu {} Tensor4D.
logicalAnd cpu {} broadcasting Tensor4D shapes.
logicalAnd cpu {} TensorLike.
logicalAnd cpu {} TensorLike Chained.
logicalAnd cpu {} throws when passed a as a non-tensor.
logicalAnd cpu {} throws when passed b as a non-tensor.
logicalAnd cpu {} accepts a tensor-like object.
logicalOr cpu {} Tensor1D..
logicalOr cpu {} mismatched Tensor1D shapes.
logicalOr cpu {} Tensor2D.
logicalOr cpu {} broadcasting Tensor2D shapes.
logicalOr cpu {} Tensor3D.
logicalOr cpu {} broadcasting Tensor3D shapes.
logicalOr cpu {} Tensor4D.
logicalOr cpu {} broadcasting Tensor4D shapes.
logicalOr cpu {} TensorLike.
logicalOr cpu {} TensorLike Chained.
logicalOr cpu {} throws when passed a as a non-tensor.
logicalOr cpu {} throws when passed b as a non-tensor.
logicalOr cpu {} accepts a tensor-like object.
logicalXor cpu {} Tensor1D..
logicalXor cpu {} mismatched Tensor1D shapes.
logicalXor cpu {} Tensor2D.
logicalXor cpu {} broadcasting Tensor2D shapes.
logicalXor cpu {} Tensor3D.
logicalXor cpu {} broadcasting Tensor3D shapes.
logicalXor cpu {} Tensor4D.
logicalXor cpu {} broadcasting Tensor4D shapes.
logicalXor cpu {} TensorLike.
logicalXor cpu {} TensorLike Chained.
logicalXor cpu {} throws when passed a as a non-tensor.
logicalXor cpu {} throws when passed b as a non-tensor.
logicalXor cpu {} accepts a tensor-like object.
where cpu {} Scalars..
where cpu {} Invalid condition type.
where cpu {} Tensor1D.
where cpu {} Tensor1D different a/b shapes.
where cpu {} Tensor1D different condition/a shapes.
where cpu {} Tensor2D.
where cpu {} Tensor2D different a/b shapes.
where cpu {} Tensor2D different condition/a shapes.
where cpu {} Tensor2D different `a` dimension w/ condition rank=1.
where cpu {} Tensor3D.
where cpu {} Tensor3D with scalar condition.
where cpu {} 1D condition with higher rank a and b.
where cpu {} Tensor3D different a/b shapes.
where cpu {} Tensor3D different condition/a shapes.
where cpu {} Tensor3D different `a` dimension w/ condition rank=1.
where cpu {} Tensor4D.
where cpu {} Tensor4D different a/b shapes.
where cpu {} Tensor4D different condition/a shapes.
where cpu {} Tensor4D different `a` dimension w/ condition rank=1.
where cpu {} TensorLike.
where cpu {} TensorLike Chained.
where cpu {} throws when passed condition as a non-tensor.
where cpu {} throws when passed a as a non-tensor.
where cpu {} throws when passed b as a non-tensor.
where cpu {} accepts a tensor-like object.
where cpu {} 1D gradient.
where cpu {} gradient with clones.
where cpu {} 2D gradient.
where cpu {} 3D gradient.
where cpu {} 4D gradient.
whereAsync cpu {} 1d tensor.
whereAsync cpu {} 2d tensor.
whereAsync cpu {} 3d tensor.
whereAsync cpu {} accepts a tensor-like object.
whereAsync cpu {} throws error if condition is not of type bool.
whereAsync cpu {} returns tensor with 0 in shape when no values are true.
computeWeightedLoss cpu {} 1D - no weights.
computeWeightedLoss cpu {} 1D - no weights - Reduction.NONE.
computeWeightedLoss cpu {} 1D - no weights - Reduction.MEAN.
computeWeightedLoss cpu {} 1D - no weights - Reduction.SUM.
computeWeightedLoss cpu {} 1D - weights.
computeWeightedLoss cpu {} 2D - weights - broadcast.
computeWeightedLoss cpu {} 1D - weights - Reduction.NONE.
computeWeightedLoss cpu {} 1D - weights - Reduction.MEAN.
computeWeightedLoss cpu {} 1D - weights - Reduction.SUM.
computeWeightedLoss cpu {} 2D - no weights.
computeWeightedLoss cpu {} 2D - weights.
computeWeightedLoss cpu {} 2D - no weights - Reduction.MEAN.
computeWeightedLoss cpu {} 2D - weights - Reduction.MEAN.
computeWeightedLoss cpu {} 2D - weights - broadcast - MEAN.
computeWeightedLoss cpu {} 2D - no weights - Reduction.SUM.
computeWeightedLoss cpu {} 2D - weights - Reduction.SUM.
computeWeightedLoss cpu {} 2D - no weights - Reduction.NONE.
computeWeightedLoss cpu {} 2D - weights - Reduction.NONE.
computeWeightedLoss cpu {} throws when passed losses as a non-tensor.
computeWeightedLoss cpu {} throws when passed weights as a non-tensor.
computeWeightedLoss cpu {} accepts a tensor-like object.
absoluteDifference cpu {} 1D.
absoluteDifference cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
absoluteDifference cpu {} 1D - weighted - Reduction.NONE.
absoluteDifference cpu {} 1D - Reduction.MEAN.
absoluteDifference cpu {} 1D - weighted - Reduction.MEAN.
absoluteDifference cpu {} 2D.
absoluteDifference cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
absoluteDifference cpu {} 2D - weighted - Reduction.NONE.
absoluteDifference cpu {} 2D - Reduction.MEAN.
absoluteDifference cpu {} 2D - weighted - Reduction.MEAN.
absoluteDifference cpu {} throws when passed label as a non-tensor.
absoluteDifference cpu {} throws when passed label as a non-tensor.
absoluteDifference cpu {} throws when passed weights as a non-tensor.
absoluteDifference cpu {} accepts a tensor-like object.
meanSquaredError cpu {} 1D.
meanSquaredError cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
meanSquaredError cpu {} 1D - weighted - Reduction.NONE.
meanSquaredError cpu {} 1D - Reduction.MEAN.
meanSquaredError cpu {} 1D - weighted - Reduction.MEAN.
meanSquaredError cpu {} 2D.
meanSquaredError cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
meanSquaredError cpu {} 2D - weighted - Reduction.NONE.
meanSquaredError cpu {} 2D - Reduction.MEAN.
meanSquaredError cpu {} 2D - weighted - Reduction.MEAN.
meanSquaredError cpu {} throws when passed label as a non-tensor.
meanSquaredError cpu {} throws when passed label as a non-tensor.
meanSquaredError cpu {} throws when passed weights as a non-tensor.
meanSquaredError cpu {} accepts a tensor-like object.
cosineDistance cpu {} 1D.
cosineDistance cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
cosineDistance cpu {} 1D - weighted - Reduction.NONE.
cosineDistance cpu {} 1D - Reduction.MEAN.
cosineDistance cpu {} 1D - weighted - Reduction.MEAN.
cosineDistance cpu {} 2D.
cosineDistance cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
cosineDistance cpu {} 2D - weighted - Reduction.NONE.
cosineDistance cpu {} 2D - Reduction.MEAN.
cosineDistance cpu {} 2D - weighted - Reduction.MEAN.
cosineDistance cpu {} throws when passed label as a non-tensor.
cosineDistance cpu {} throws when passed label as a non-tensor.
cosineDistance cpu {} throws when passed weights as a non-tensor.
cosineDistance cpu {} accepts a tensor-like object.
hingeLoss cpu {} 1D.
hingeLoss cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
hingeLoss cpu {} 1D - weighted - Reduction.NONE.
hingeLoss cpu {} 1D - Reduction.MEAN.
hingeLoss cpu {} 1D - weighted - Reduction.MEAN.
hingeLoss cpu {} 2D.
hingeLoss cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
hingeLoss cpu {} 2D - weighted - Reduction.NONE.
hingeLoss cpu {} 2D - Reduction.MEAN.
hingeLoss cpu {} 2D - weighted - Reduction.MEAN.
hingeLoss cpu {} throws when passed label as a non-tensor.
hingeLoss cpu {} throws when passed label as a non-tensor.
hingeLoss cpu {} throws when passed weights as a non-tensor.
hingeLoss cpu {} accepts a tensor-like object.
logLoss cpu {} 1D.
logLoss cpu {} 1D - Check for negative values.
logLoss cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
logLoss cpu {} 1D - weighted - Reduction.NONE.
logLoss cpu {} 1D - Reduction.MEAN.
logLoss cpu {} 1D - weighted - Reduction.MEAN.
logLoss cpu {} 2D.
logLoss cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
logLoss cpu {} 2D - weighted - Reduction.NONE.
logLoss cpu {} 2D - Reduction.MEAN.
logLoss cpu {} 2D - weighted - Reduction.MEAN.
logLoss cpu {} throws when passed label as a non-tensor.
logLoss cpu {} throws when passed label as a non-tensor.
logLoss cpu {} throws when passed weights as a non-tensor.
logLoss cpu {} accepts a tensor-like object.
huberLoss cpu {} 1D.
huberLoss cpu {} 1D - delta.
huberLoss cpu {} 1D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
huberLoss cpu {} 1D - weighted - Reduction.NONE.
huberLoss cpu {} 1D - Reduction.MEAN.
huberLoss cpu {} 1D - weighted - Reduction.MEAN.
huberLoss cpu {} 2D.
huberLoss cpu {} 2D - weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
huberLoss cpu {} 2D - weighted - Reduction.NONE.
huberLoss cpu {} 2D - Reduction.MEAN.
huberLoss cpu {} 2D - weighted - Reduction.MEAN.
huberLoss cpu {} throws when passed label as a non-tensor.
huberLoss cpu {} throws when passed label as a non-tensor.
huberLoss cpu {} throws when passed weights as a non-tensor.
huberLoss cpu {} accepts a tensor-like object.
sigmoidCrossEntropy cpu {} All wrong.
sigmoidCrossEntropy cpu {} All right.
sigmoidCrossEntropy cpu {} Weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
sigmoidCrossEntropy cpu {} Weighted - Reduction.NONE.
sigmoidCrossEntropy cpu {} Reduction.MEAN.
sigmoidCrossEntropy cpu {} Weighted - Reduction.MEAN.
sigmoidCrossEntropy cpu {} Label Smoothing - Weighted - Reduction.MEAN.
sigmoidCrossEntropy cpu {} throws when multiClassLabels and logits are of different shapes.
sigmoidCrossEntropy cpu {} throws when passed multiClassLabels as a non-tensor.
sigmoidCrossEntropy cpu {} throws when passed logits as a non-tensor.
sigmoidCrossEntropy cpu {} throws when passed weights as a non-tensor.
softmaxCrossEntropy cpu {} All wrong.
softmaxCrossEntropy cpu {} All right.
softmaxCrossEntropy cpu {} Weighted - Reduction.SUM_BY_NONZERO_WEIGHTS.
softmaxCrossEntropy cpu {} Weighted - Reduction.NONE.
softmaxCrossEntropy cpu {} Reduction.MEAN.
softmaxCrossEntropy cpu {} Weighted - Reduction.MEAN.
softmaxCrossEntropy cpu {} Label Smoothing - Weighted - Reduction.MEAN.
softmaxCrossEntropy cpu {} throws when multiClassLabels and logits are of different shapes.
softmaxCrossEntropy cpu {} throws when passed multiClassLabels as a non-tensor.
softmaxCrossEntropy cpu {} throws when passed logits as a non-tensor.
softmaxCrossEntropy cpu {} throws when passed weights as a non-tensor.
softmaxCrossEntropy cpu {} accepts a tensor-like object.
localResponseNormalization with Tensor3D cpu {} throws error with invalid input.
localResponseNormalization with Tensor3D cpu {} throws error with invalid radius.
localResponseNormalization with Tensor3D cpu {} computes simple normalization across channels.
localResponseNormalization with Tensor3D cpu {} uses beta = 1.0 to test GPU optimization.
localResponseNormalization with Tensor3D cpu {} uses beta = 0.75 to test GPU optimization.
localResponseNormalization with Tensor3D cpu {} computes complex normalization across channels.
localResponseNormalization with Tensor3D cpu {} yields same result as tensorflow.
localResponseNormalization with Tensor3D cpu {} accepts a tensor-like object.
localResponseNormalization with Tensor4D cpu {} throws error with invalid input.
localResponseNormalization with Tensor4D cpu {} throws error with invalid radius.
localResponseNormalization with Tensor4D cpu {} computes simple normalization across channels.
localResponseNormalization with Tensor4D cpu {} yields same result as tensorflow.
localResponseNormalization with Tensor4D cpu {} yields same result as tensorflow with inner most dims of odd shape.
localResponseNormalization with Tensor4D cpu {} throws when passed a non-tensor.
localResponseNormalization with Tensor4D cpu {} gradient with 3D input.
localResponseNormalization with Tensor4D cpu {} gradient with clones.
localResponseNormalization with Tensor4D cpu {} gradient with 4D input.
lstm cpu {} MultiRNNCell with 2 BasicLSTMCells.
lstm cpu {} basicLSTMCell with batch=2.
lstm cpu {} basicLSTMCell accepts a tensor-like object.
multiRNN throws when passed non-tensor cpu {} input: data.
multiRNN throws when passed non-tensor cpu {} input: c.
multiRNN throws when passed non-tensor cpu {} input: h.
basicLSTMCell throws with non-tensor cpu {} input: forgetBias.
basicLSTMCell throws with non-tensor cpu {} input: lstmKernel.
basicLSTMCell throws with non-tensor cpu {} input: lstmBias.
basicLSTMCell throws with non-tensor cpu {} input: data.
basicLSTMCell throws with non-tensor cpu {} input: c.
basicLSTMCell throws with non-tensor cpu {} input: h.
matmul cpu {} A x B.
matmul cpu {} [8,4]x[4,8].
matmul cpu {} matmul followed by mul.
matmul cpu {} upcasts when dtypes dont match.
matmul cpu {} A x B^t.
matmul cpu {} A^t x B.
matmul cpu {} A^t x B^t.
matmul cpu {} A x B^t shapes do not match.
matmul cpu {} A^t x B shapes do not match.
matmul cpu {} A^t x B^t shapes do not match.
matmul cpu {} matmul throws when inner dimensions dont match.
matmul cpu {} matmul throws when passed non matrices.
matmul cpu {} matmul throws when passed a vector.
matmul cpu {} Vector times matrix.
matmul cpu {} Vector times matrix with implicit reshape.
matmul cpu {} Matrix times vector.
matmul cpu {} batched matmul with the matrices being vectors.
matmul cpu {} batched matmul called twice so memory of output is reused.
matmul cpu {} batched matmul with the matrices being vectors transposedA.
matmul cpu {} batched matmul with the matrices being vectors transposedB.
matmul cpu {} batched matmul with matrix x vector.
matmul cpu {} batched matmul with matrix x vector transposedA.
matmul cpu {} batched matmul with matrix x vector transposedB.
matmul cpu {} batched matmul with vector x matrix.
matmul cpu {} batched matmul with vector x matrix transposedA.
matmul cpu {} batched matmul with vector x matrix transposedB.
matmul cpu {} Matrix * vector propagates NaNs.
matmul cpu {} matrix times vector throws when not passed a matrix.
matmul cpu {} Dot product.
matmul cpu {} Dot product propagates NaNs.
matmul cpu {} Dot product throws when vectors are different size.
matmul cpu {} Outer product.
matmul cpu {} outer product accepts a tensor-like object.
matmul cpu {} gradients: A * B.
matmul cpu {} gradient with clones.
matmul cpu {} gradients: a * bT.
matmul cpu {} gradients: aT * b.
matmul cpu {} gradients: aT * bT.
matmul cpu {} throws when passed a as a non-tensor.
matmul cpu {} throws when passed b as a non-tensor.
matmul cpu {} accepts a tensor-like object.
matmul cpu {} accepts a tensor-like object chained.
matmul cpu {} a * b where a has zero in its shape.
matmul cpu {} (a * b) * c where a has zero in its shape, so a*b does also.
matmul cpu {} throws error for string tensor.
matmulBatch cpu {} A x B.
matmulBatch cpu {} A x B in 4D.
matmulBatch cpu {} A x B^t.
matmulBatch cpu {} A^t x B.
matmulBatch cpu {} A^t x B in 4D.
matmulBatch cpu {} A^t x B^t.
matmulBatch cpu {} batch dimensions do not match.
matmulBatch cpu {} gradients: A x B.
matmulBatch cpu {} 4d gradients: A x B.
matmulBatch cpu {} gradients: A x B^t.
matmulBatch cpu {} 4d gradients: A x B^t.
matmulBatch cpu {} gradients: A^t x B.
matmulBatch cpu {} gradients: A^t x B^t.
dot cpu {} vector-vector.
dot cpu {} vector-matrix.
dot cpu {} matrix-vector.
dot cpu {} matrix-matrix.
dot cpu {} matmul A x B asymmetric.
dot cpu {} throws error on incompatible dimensions.
dot cpu {} throws error when inputs are not rank 1 or 2.
dot cpu {} accepts a tensor-like object.
dot cpu {} throws error for string tensors.
movingAverage cpu {} zeroDebias=true, decay and step are numbers.
movingAverage cpu {} zeroDebias=true, decay and step are scalars.
movingAverage cpu {} zeroDebias=false, decay and step are numbers.
movingAverage cpu {} zeroDebias=false, decay is scalar.
movingAverage cpu {} zeroDebias=true, no step throws error.
movingAverage cpu {} shape mismatch in v and x throws error.
movingAverage cpu {} throws when passed v as a non-tensor.
movingAverage cpu {} throws when passed v as a non-tensor.
movingAverage cpu {} accepts a tensor-like object.
multinomial cpu {} Flip a fair coin and check bounds.
multinomial cpu {} Flip a two-sided coin with 100% of heads.
multinomial cpu {} Flip a two-sided coin with 100% of tails.
multinomial cpu {} Flip a single-sided coin throws error.
multinomial cpu {} Flip a ten-sided coin and check bounds.
multinomial cpu {} Flip 3 three-sided coins, each coin is 100% biases.
multinomial cpu {} passing Tensor3D throws error.
multinomial cpu {} throws when passed a non-tensor.
multinomial cpu {} accepts a tensor-like object for logits (biased coin).
oneHot cpu {} Depth 1 throws error.
oneHot cpu {} Depth 2, diagonal.
oneHot cpu {} Scalar input as Tensor.
oneHot cpu {} Scalar input as number.
oneHot cpu {} oneHot with chaining compiles.
oneHot cpu {} Depth 2, transposed diagonal.
oneHot cpu {} Depth 3, 4 events.
oneHot cpu {} Out of range events do not trigger onValue.
oneHot cpu {} Depth 2 onValue=3, offValue=-2.
oneHot cpu {} indices not int32 throws error.
oneHot cpu {} check output dtype.
oneHot cpu {} oneHot accepts a tensor-like object.
oneHot cpu {} has gradient.
oneHot cpu {} gradient with clones.
oneHot cpu {} gradient when indices is 3d.
oneHot cpu {} oneHot with indices as 2d.
oneHot cpu {} Supports chaining.
operation cpu {} executes and preserves function name.
operation cpu {} executes, preserves function name, strips underscore.
operation cpu {} throws when passing an object with multiple keys.
pad 1d cpu {} Should pad 1D arrays.
pad 1d cpu {} Should not pad 1D arrays with 0s.
pad 1d cpu {} Should handle padding with custom value.
pad 1d cpu {} Should handle NaNs with 1D arrays.
pad 1d cpu {} Should handle invalid paddings.
pad 1d cpu {} grad.
pad 1d cpu {} gradient with clones.
pad 1d cpu {} accepts a tensor-like object.
pad 2d cpu {} Should pad 2D arrays.
pad 2d cpu {} Should not pad 2D arrays with 0s.
pad 2d cpu {} Should handle padding with custom value.
pad 2d cpu {} Should handle NaNs with 2D arrays.
pad 2d cpu {} Should handle invalid paddings.
pad 2d cpu {} grad.
pad 2d cpu {} accepts a tensor-like object.
pad 3d cpu {} works with 3d tensor, float32.
pad 4d cpu {} Should pad 4D arrays.
pad 4d cpu {} does not leak memory.
pad 4d cpu {} accepts a tensor-like object.
pad cpu {} Pad tensor2d.
pad cpu {} throws when passed a non-tensor.
pad cpu {} accepts a tensor-like object.
maxPool cpu {} x=[1,1,1] f=[1,1] s=1 [0] => [0].
maxPool cpu {} x=[3,3,1] f=[2,2] s=1, p=0.
maxPool cpu {} x=[3,3,1] f=[2,2] s=1 p=same.
maxPool cpu {} x=[2,3,3,1] f=[2,2] s=1.
maxPool cpu {} [x=[3,3,1] f=[2,2] s=1 ignores NaNs.
maxPool cpu {} x=[3,3,2] f=[2,2] s=1.
maxPool cpu {} x=[4,4,1] f=[2,2] s=2.
maxPool cpu {} x=[2,2,1] f=[2,2] s=1 p=same.
maxPool cpu {} x=[2,2,3] f=[1,1] s=2 p=1 dimRoundingMode=floor.
maxPool cpu {} throws when x is not rank 3.
maxPool cpu {} throws when dimRoundingMode is set and pad is not a number.
maxPool cpu {} throws when passed a non-tensor.
maxPool cpu {} accepts a tensor-like object.
maxPoolBackprop cpu {} gradients x=[3,3,1] f=[2,2] s=1 no dup max value, test #1.
maxPoolBackprop cpu {} gradient with clones x=[3,3,1] f=[2,2] s=1.
maxPoolBackprop cpu {} gradients x=[3,3,1] f=[2,2] s=1 no dup max value, test #2.
maxPoolBackprop cpu {} gradients x=[2,3,3,1] f=[2,2] s=1 no duplicate max value.
maxPoolBackprop cpu {} gradient x=[3,3,1] f=[2,2] s=1 dup max value, test 1.
maxPoolBackprop cpu {} gradient x=[3,3,1] f=[2,2] s=1 dup max value, test 2.
maxPoolBackprop cpu {} gradient x=[2,3,3,1] f=[2,2] s=1 dup max value in 2nd input.
maxPoolBackprop cpu {} gradient x=[4,4,1] f=[2,2] s=2 test #1.
maxPoolBackprop cpu {} gradient x=[4,4,1] f=[2,2] s=2 test #2.
maxPoolBackprop cpu {} gradient x=[5,5,1] f=[3,3] s=2 no duplicate max value.
maxPoolBackprop cpu {} gradient x=[5,5,1] f=[3,3] s=2 duplicate max value.
maxPoolBackprop cpu {} gradient x=[3,3,2] f=[2,2] s=1, no duplicate max value.
maxPoolBackprop cpu {} gradient x=[3,3,2] f=[2,2] s=1 duplicate max value.
maxPoolBackprop cpu {} gradient x=[4,4,2] f=[2,2] s=1.
maxPoolBackprop cpu {} gradient x=5x5x2, f=3, s=2 no duplicate max value.
avgPool cpu {} x=[1,1,1] f=[1,1] s=1 [0] => [0].
avgPool cpu {} x=[3,3,1] f=[2,2] s=1.
avgPool cpu {} input int32 throws error.
avgPool cpu {} x=[2,3,3,1] f=[2,2], s=1.
avgPool cpu {} x=[3,3,1] f=[2,2] s=1 propagates NaNs.
avgPool cpu {} x=[3,3,2] f=[2,2] s=1.
avgPool cpu {} x=[4,4,1] f=[2,2] s=2.
avgPool cpu {} x=[2,2,1] f=[2,2] s=1 p=same.
avgPool cpu {} x=[2,2,3] f=[1,1] s=2 p=1 dimRoundingMode=floor.
avgPool cpu {} gradient x=[1,1,1] f=[1,1] s=1 [0] => [0].
avgPool cpu {} gradient with clones.
avgPool cpu {} gradient x=[3,3,1] f=[2,2] s=1.
avgPool cpu {} gradient x=[2,3,3,1] f=[2,2], s=1.
avgPool cpu {} throws when dimRoundingMode is set and pad is not a number.
avgPool cpu {} throws when passed a non-tensor.
avgPool cpu {} accepts a tensor-like object.
pool cpu {} max x=[1,1,1] f=[1,1] s=1 d=1 [0] => [0].
pool cpu {} max x=[3,3,1] f=[2,2] s=1 d=1.
pool cpu {} max x=[4,4,1] f=[2,2] s=2 d=1.
pool cpu {} max x=[2,2,1] f=[2,2] s=1 d=1 p=same.
pool cpu {} avg x=[1,1,1] f=[1,1] s=1 d=1 [0] => [0].
pool cpu {} avg x=[3,3,1] f=[2,2] s=1 d=1.
pool cpu {} avg x=[4,4,1] f=[2,2] s=2 d=1.
pool cpu {} avg x=[2,2,1] f=[2,2] s=1 p=same.
pool cpu {} max x=[4,3,1] f=[2,2] s=1 d=2.
pool cpu {} max x=[2,4,4,1] f=[2,2] s=1 d=2.
pool cpu {} avg x=[4,4,1] f=[2,2] s=1 d=2.
pool cpu {} max throws when neither s=1 nor d=1.
pool cpu {} avg throws when neither s=1 nor d=1.
poolBackprop cpu {} max gradients x=[3,3,1] f=[2,2] s=1 d=1 no dup max value.
poolBackprop cpu {} max gradients x=[3,3,1] f=[2,2] s=1 d=2 no dup max value, test #1.
poolBackprop cpu {} max gradients x=[3,3,1] f=[2,2] s=1 d=2 no dup max value, test #2.
poolBackprop cpu {} max gradient x=[3,3,1] f=[2,2] s=1 d=2 dup max value.
poolBackprop cpu {} avg gradient x=[4,4,1] f=[2,2] s=1 d=2.
maxPool3d cpu {} 4D x=[2,2,2,1] f=[2,2,2] s=1 p=valid.
maxPool3d cpu {} x=[1,1,1,1,1] f=[1,1,1] s=1 [0] => [0].
maxPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=valid.
maxPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=same.
maxPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=valid.
maxPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=same.
maxPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=valid, ignores NaNs.
maxPool3d cpu {} x=[2,3,3,3,1] f=[2,2,2] s=1 p=valid.
maxPool3d cpu {} x=[1,3,3,3,2] f=[2,2,2] s=1 p=valid.
maxPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=1 roundingMode=floor.
maxPool3d cpu {} throws when x is not rank 5.
maxPool3d cpu {} throws when dimRoundingMode is set and pad is not a number.
maxPool3d cpu {} throws when passed a non-tensor.
maxPool3d cpu {} accepts a tensor-like object.
maxPool3dBackprop cpu {} gradient x=[2,2,2,1] f=[1,1,1] s=1.
maxPool3dBackprop cpu {} gradient x=[1,2,2,2,1] f=[1,1,1] s=1.
maxPool3dBackprop cpu {} gradient x=[1,2,2,2,1] f=[2,2,2] s=2.
maxPool3dBackprop cpu {} gradient with clone x=[1,2,2,2,1] f=[2,2,2] s=1.
maxPool3dBackprop cpu {} gradient x=[1,3,3,3,1] f=[2,2,2] s=1 no dup max value.
maxPool3dBackprop cpu {} gradient x=[1,3,3,3,1] f=[2,2,2] s=1 dup max value.
maxPool3dBackprop cpu {} gradient x=[1,4,4,4,1] f=[2,2,2] s=2.
maxPool3dBackprop cpu {} gradient x=[1,3,3,3,2] f=[2,2,2] s=1 no dup max value.
maxPool3dBackprop cpu {} gradient x=[1,3,3,3,2] f=[2,2,2] s=1 dup max value.
maxPool3dBackprop cpu {} gradient x=[2,3,3,3,1] f=[2,2,2] s=1 no dup max value.
maxPool3dBackprop cpu {} gradient x=[2,3,3,3,1] f=[2,2,2] s=1 dup max value.
avgPool3d cpu {} x=[2,2,2,1] f=[2,2,2] s=1 p=valid.
avgPool3d cpu {} x=[1,1,1,1,1] f=[1,1,1] s=1 [0] => [0].
avgPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=valid.
avgPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=same.
avgPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=valid.
avgPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=same.
avgPool3d cpu {} x=[1,3,3,3,1] f=[2,2,2] s=1 p=valid, propagates NaNs.
avgPool3d cpu {} x=[2,3,3,3,1] f=[2,2,2] s=1 p=valid.
avgPool3d cpu {} x=[1,3,3,3,2] f=[2,2,2] s=1 p=valid.
avgPool3d cpu {} x=[1,2,2,2,1] f=[2,2,2] s=1 p=1 roundingMode=floor.
avgPool3d cpu {} throws when x is not rank 5.
avgPool3d cpu {} throws when dimRoundingMode is set and pad is not a number.
avgPool3d cpu {} throws when passed a non-tensor.
avgPool3d cpu {} throws when input dtype is not float32.
avgPool3d cpu {} accepts a tensor-like object.
avgPool3dBackprop cpu {} gradient x=[2,2,2,1] f=[1,1,1] s=1.
avgPool3dBackprop cpu {} gradient x=[1,2,2,2,1] f=[1,1,1] s=1.
avgPool3dBackprop cpu {} gradient x=[1,2,2,2,1] f=[2,2,2] s=2.
avgPool3dBackprop cpu {} gradient with clone x=[1,2,2,2,1] f=[2,2,2] s=1.
avgPool3dBackprop cpu {} gradient x=[1,3,3,3,1] f=[2,2,2] s=1.
avgPool3dBackprop cpu {} gradient x=[1,4,4,4,1] f=[2,2,2] s=2.
avgPool3dBackprop cpu {} gradient x=[1,3,3,3,2] f=[2,2,2] s=1.
avgPool3dBackprop cpu {} gradient x=[2,3,3,3,1] f=[2,2,2] s=1.
maxPoolWithArgmax cpu {} x=[1,1,1] f=[1,1] s=1 d=1 [0] => [0].
maxPoolWithArgmax cpu {} x=[2,2,2,1] f=[2,2,2] s=1 p=valid.
maxPoolWithArgmax cpu {} x=[2,2,2,1] f=[2,2,2] s=1 p=valid includeBatchInIndex=true.
maxPoolWithArgmax cpu {} x=[1,3,3,1] f=[2,2] s=1, p=0.
maxPoolWithArgmax cpu {} x=[1,3,3,1] f=[2,2] s=1 p=same.
maxPoolWithArgmax cpu {} x=[2,3,3,1] f=[2,2] s=1.
maxPoolWithArgmax cpu {} x=[2,3,3,1] f=[2,2] s=1 includeBatchInIndex=true.
maxPoolWithArgmax cpu {} [x=[1,3,3,1] f=[2,2] s=1 ignores NaNs.
maxPoolWithArgmax cpu {} x=[1, 3,3,2] f=[2,2] s=1.
maxPoolWithArgmax cpu {} x=[1,4,4,1] f=[2,2] s=2.
maxPoolWithArgmax cpu {} x=[1,2,2,1] f=[2,2] s=1 p=same.
maxPoolWithArgmax cpu {} throws when x is not rank 4.
maxPoolWithArgmax cpu {} throws when passed a non-tensor.
maxPoolWithArgmax cpu {} accepts a tensor-like object.
rand cpu {} should return a random 1D float32 array.
rand cpu {} should return a random 1D int32 array.
rand cpu {} should return a random 1D bool array.
rand cpu {} should return a random 2D float32 array.
rand cpu {} should return a random 2D int32 array.
rand cpu {} should return a random 2D bool array.
rand cpu {} should return a random 3D float32 array.
rand cpu {} should return a random 3D int32 array.
rand cpu {} should return a random 3D bool array.
rand cpu {} should return a random 4D float32 array.
rand cpu {} should return a random 4D int32 array.
rand cpu {} should return a random 4D bool array.
MPRandGauss should default to float32 numbers.
MPRandGauss should handle a mean/stdv of float32 numbers.
MPRandGauss should handle int32 numbers.
MPRandGauss should handle a mean/stdv of int32 numbers.
MPRandGauss Should not have a more than 2x std-d from mean for truncated values.
RandGamma should default to float32 numbers.
RandGamma should handle an alpha/beta of float32 numbers.
RandGamma should handle int32 numbers.
RandGamma should handle an alpha/beta of int32 numbers.
UniformRandom float32, no seed.
UniformRandom int32, no seed.
UniformRandom seed is number.
UniformRandom seed === null.
UniformRandom seed === undefined.
randomGamma cpu {} should return a random 1D float32 array.
randomGamma cpu {} should return a random 1D int32 array.
randomGamma cpu {} should return a random 2D float32 array.
randomGamma cpu {} should return a random 2D int32 array.
randomGamma cpu {} should return a random 3D float32 array.
randomGamma cpu {} should return a random 3D int32 array.
randomGamma cpu {} should return a random 4D float32 array.
randomGamma cpu {} should return a random 4D int32 array.
randomGamma cpu {} should return a random 5D float32 array.
randomGamma cpu {} should return a random 5D int32 array.
randomNormal cpu {} should return a float32 1D of random normal values.
randomNormal cpu {} should return a int32 1D of random normal values.
randomNormal cpu {} should return a float32 2D of random normal values.
randomNormal cpu {} should return a int32 2D of random normal values.
randomNormal cpu {} should return a float32 3D of random normal values.
randomNormal cpu {} should return a int32 3D of random normal values.
randomNormal cpu {} should return a float32 4D of random normal values.
randomNormal cpu {} should return a int32 4D of random normal values.
randomNormal cpu {} should return a int32 5D of random normal values.
randomUniform cpu {} should return a random 1D float32 array.
randomUniform cpu {} should return a random 1D int32 array.
randomUniform cpu {} should return a random 1D bool array.
randomUniform cpu {} should return a random 2D float32 array.
randomUniform cpu {} should return a random 2D int32 array.
randomUniform cpu {} should return a random 2D bool array.
randomUniform cpu {} should return a random 3D float32 array.
randomUniform cpu {} should return a random 3D int32 array.
randomUniform cpu {} should return a random 3D bool array.
randomUniform cpu {} should return a random 4D float32 array.
randomUniform cpu {} should return a random 4D int32 array.
randomUniform cpu {} should return a random 4D bool array.
randomUniform cpu {} should return a random 5D float32 array.
randomUniform cpu {} should return a random 5D int32 array.
randomUniform cpu {} should return a random 5D bool array.
min cpu {} Tensor1D.
min cpu {} ignores NaNs.
min cpu {} 2D.
min cpu {} 2D axis=[0,1].
min cpu {} 2D, axis=0.
min cpu {} 2D, axis=0, keepDims.
min cpu {} 2D, axis=1 provided as a number.
min cpu {} 2D, axis = -1 provided as a number.
min cpu {} 2D, axis=[1].
min cpu {} throws when passed a non-tensor.
min cpu {} accepts a tensor-like object.
min cpu {} min gradient: Scalar.
min cpu {} gradient with clones.
min cpu {} min gradient: 1D, ties.
min cpu {} min gradient: 2D, axes=-1, keepDims=false.
min cpu {} min gradient: ties, 2D, axes=-1, keepDims=false.
min cpu {} min gradient: 2D, axes=0, keepDims=false.
min cpu {} min gradient: 2D, axes=-1, keepDims=true.
min cpu {} min gradient: 2D, axes=0, keepDims=true.
min cpu {} min gradient: 3D, axes=[1, 2], keepDims=false.
min cpu {} min gradient: ties, 3D, axes=[1, 2], keepDims=false.
min cpu {} min gradient: 3D, axes=2, keepDims=false.
min cpu {} min gradient: 3D, axes=2, keepDims=true.
min cpu {} min gradient: ties, 4D, axes=[1, 2, 3], keepDims=false.
min cpu {} min gradient: ties, 4D, axes=[2, 3], keepDims=true.
min cpu {} throws error for string tensor.
max cpu {} with one element dominating.
max cpu {} with all elements being the same.
max cpu {} ignores NaNs.
max cpu {} 2D.
max cpu {} 2D axis=[0,1].
max cpu {} 2D, axis=0.
max cpu {} 2D, axis=0, keepDims.
max cpu {} 2D, axis=1 provided as a number.
max cpu {} 2D, axis = -1 provided as a number.
max cpu {} 2D, axis=[1].
max cpu {} 6D, axis=[5].
max cpu {} throws when passed a non-tensor.
max cpu {} accepts a tensor-like object.
max cpu {} max gradient: Scalar.
max cpu {} gradient with clones.
max cpu {} max gradient: 1D, ties.
max cpu {} max gradient: 2D, axes=-1, keepDims=false.
max cpu {} max gradient: ties, 2D, axes=-1, keepDims=false.
max cpu {} max gradient: 2D, axes=0, keepDims=false.
max cpu {} max gradient: 2D, axes=-1, keepDims=true.
max cpu {} max gradient: 2D, axes=0, keepDims=true.
max cpu {} max gradient: 3D, axes=[1, 2], keepDims=false.
max cpu {} max gradient: ties, 3D, axes=[1, 2], keepDims=false.
max cpu {} max gradient: 3D, axes=2, keepDims=false.
max cpu {} max gradient: 3D, axes=2, keepDims=true.
max cpu {} max gradient: ties, 4D, axes=[1, 2, 3], keepDims=false.
max cpu {} max gradient: ties, 4D, axes=[2, 3], keepDims=true.
max cpu {} throws error for string tensor.
argmax cpu {} Tensor1D.
argmax cpu {} one value.
argmax cpu {} N > than parallelization threshold.
argmax cpu {} 3D, N > than parallelization threshold.
argmax cpu {} max index corresponds to start of a non-initial window.
argmax cpu {} 5D, max index corresponds to start of a non-initial window.
argmax cpu {} ignores NaNs.
argmax cpu {} 2D, no axis specified.
argmax cpu {} 4D, no axis specified.
argmax cpu {} 2D, axis=0.
argmax cpu {} 6D, axis=0.
argmax cpu {} 2D, axis=1.
argmax cpu {} 2D, axis = -1.
argmax cpu {} throws when passed a non-tensor.
argmax cpu {} accepts a tensor-like object.
argmax cpu {} accepts tensor with bool values.
argmax cpu {} has gradient.
argmax cpu {} gradient with clones.
argmax cpu {} throws error for string tensor.
argmin cpu {} Tensor1D.
argmin cpu {} one value.
argmin cpu {} N > than parallelization threshold.
argmin cpu {} 4D, N > than parallelization threshold.
argmin cpu {} min index corresponds to start of a non-initial window.
argmin cpu {} ignores NaNs.
argmin cpu {} 3D, ignores NaNs.
argmin cpu {} 2D, no axis specified.
argmin cpu {} 2D, axis=0.
argmin cpu {} 2D, axis=1.
argmin cpu {} 2D, axis = -1.
argmin cpu {} throws when passed a non-tensor.
argmin cpu {} accepts a tensor-like object.
argmin cpu {} accepts tensor with bool values.
argmin cpu {} has gradient.
argmin cpu {} gradient with clones.
argmin cpu {} throws error for string tensor.
logSumExp cpu {} 0.
logSumExp cpu {} basic.
logSumExp cpu {} propagates NaNs.
logSumExp cpu {} axes=0 in 2D array.
logSumExp cpu {} axes=0 in 2D array, keepDims.
logSumExp cpu {} axes=1 in 2D array.
logSumExp cpu {} axes = -1 in 2D array.
logSumExp cpu {} 2D, axes=1 provided as a single digit.
logSumExp cpu {} axes=0,1 in 2D array.
logSumExp cpu {} throws when passed a non-tensor.
logSumExp cpu {} accepts a tensor-like object.
logSumExp cpu {} throws error for string tensor.
sum cpu {} basic.
sum cpu {} propagates NaNs.
sum cpu {} sum over dtype int32.
sum cpu {} sum over dtype bool.
sum cpu {} sums all values in 2D array with keep dim.
sum cpu {} sums across axis=0 in 2D array.
sum cpu {} sums across axis=0 in 2D array, keepDims.
sum cpu {} sums across axis=1 in 2D array.
sum cpu {} 2D, axis=1 provided as number.
sum cpu {} 2D, axis = -1 provided as number.
sum cpu {} sums across axis=0,1 in 2D array.
sum cpu {} 2D, axis=[-1,-2] in 2D array.
sum cpu {} gradients: sum(2d).
sum cpu {} gradient with clones.
sum cpu {} gradients: sum(2d, axis=0).
sum cpu {} gradients: sum(2d, axis=1).
sum cpu {} throws when passed a non-tensor.
sum cpu {} accepts a tensor-like object.
sum cpu {} throws error for string tensor.
prod cpu {} basic.
prod cpu {} propagates NaNs.
prod cpu {} prod over dtype int32.
prod cpu {} prod over dtype bool.
prod cpu {} prods all values in 2D array with keep dim.
prod cpu {} prods across axis=0 in 2D array.
prod cpu {} prods across axis=0 in 2D array, keepDims.
prod cpu {} prods across axis=1 in 2D array.
prod cpu {} 2D, axis=1 provided as number.
prod cpu {} 2D, axis = -1 provided as number.
prod cpu {} prods across axis=0,1 in 2D array.
prod cpu {} 2D, axis=[-1,-2] in 2D array.
prod cpu {} throws when passed a non-tensor.
prod cpu {} accepts a tensor-like object.
prod cpu {} throws error for string tensor.
mean cpu {} basic.
mean cpu {} propagates NaNs.
mean cpu {} mean(int32) => float32.
mean cpu {} mean(bool) => float32.
mean cpu {} 2D array with keep dim.
mean cpu {} axis=0 in 2D array.
mean cpu {} axis=0 in 2D array, keepDims.
mean cpu {} axis=1 in 2D array.
mean cpu {} axis = -1 in 2D array.
mean cpu {} 2D, axis=1 provided as number.
mean cpu {} axis=0,1 in 2D array.
mean cpu {} gradients.
mean cpu {} gradient with clones.
mean cpu {} gradients throws for defined axis.
mean cpu {} throws when passed a non-tensor.
mean cpu {} accepts a tensor-like object.
mean cpu {} throws error for string tensor.
moments cpu {} basic.
moments cpu {} propagates NaNs.
moments cpu {} moments(int32) => float32.
moments cpu {} moments(bool) => float32.
moments cpu {} 2D array with keep dim.
moments cpu {} axis=0 in 2D array.
moments cpu {} axis=1 in 2D array.
moments cpu {} 2D, axis=1 provided as number.
moments cpu {} 2D, axis=-1 provided as number.
moments cpu {} axis=0,1 in 2D array.
moments cpu {} throws when passed a non-tensor.
moments cpu {} accepts a tensor-like object.
norm cpu {} scalar norm.
norm cpu {} vector inf norm.
norm cpu {} vector -inf norm.
norm cpu {} vector 1 norm.
norm cpu {} vector euclidean norm.
norm cpu {} vector 2-norm.
norm cpu {} vector >2-norm to throw error.
norm cpu {} matrix inf norm.
norm cpu {} matrix -inf norm.
norm cpu {} matrix 1 norm.
norm cpu {} matrix euclidean norm.
norm cpu {} matrix fro norm.
norm cpu {} matrix other norm to throw error.
norm cpu {} propagates NaNs for norm.
norm cpu {} axis=null in 2D array norm.
norm cpu {} 2D array norm with keep dim.
norm cpu {} axis=0 in 2D array norm.
norm cpu {} axis=1 in 2D array norm.
norm cpu {} axis=1 keepDims in 2D array norm.
norm cpu {} 2D norm with axis=1 provided as number.
norm cpu {} axis=0,1 in 2D array norm.
norm cpu {} axis=0,1 keepDims in 2D array norm.
norm cpu {} 3D norm axis=0,1, matrix inf norm.
norm cpu {} axis=0,1 keepDims in 3D array norm.
norm cpu {} axis=0,1 keepDims in 3D array norm.
norm cpu {} axis=null in 3D array norm.
norm cpu {} axis=null in 4D array norm.
norm cpu {} axis=0,1 in 4D array norm.
norm cpu {} axis=0,1 in 4D array norm.
norm cpu {} throws when passed a non-tensor.
norm cpu {} accepts a tensor-like object.
norm cpu {} throws error for string tensors.
all cpu {} Tensor1D.
all cpu {} ignores NaNs.
all cpu {} 2D.
all cpu {} 2D axis=[0,1].
all cpu {} 2D, axis=0.
all cpu {} 2D, axis=0, keepDims.
all cpu {} 2D, axis=1 provided as a number.
all cpu {} 2D, axis = -1 provided as a number.
all cpu {} 2D, axis=[1].
all cpu {} throws when dtype is not boolean.
all cpu {} throws when passed a non-tensor.
all cpu {} accepts a tensor-like object.
all cpu {} throws error for string tensor.
any cpu {} Tensor1D.
any cpu {} ignores NaNs.
any cpu {} 2D.
any cpu {} 2D axis=[0,1].
any cpu {} 2D, axis=0.
any cpu {} 2D, axis=0, keepDims.
any cpu {} 2D, axis=1 provided as a number.
any cpu {} 2D, axis = -1 provided as a number.
any cpu {} 2D, axis=[1].
any cpu {} throws when dtype is not boolean.
any cpu {} throws when passed a non-tensor.
any cpu {} accepts a tensor-like object.
any cpu {} throws error for string tensor.
resizeBilinear cpu {} simple alignCorners=false.
resizeBilinear cpu {} 5x5-bilinear, no change in shape.
resizeBilinear cpu {} simple alignCorners=true.
resizeBilinear cpu {} works when rows are copied.
resizeBilinear cpu {} works for ints.
resizeBilinear cpu {} matches tensorflow w/ random numbers alignCorners=false.
resizeBilinear cpu {} matches tensorflow w/ random numbers alignCorners=true.
resizeBilinear cpu {} batch of 2, simple, alignCorners=true.
resizeBilinear cpu {} target width = 1, alignCorners=true.
resizeBilinear cpu {} target height = 1, alignCorners=true.
resizeBilinear cpu {} throws when passed a non-tensor.
resizeBilinear cpu {} accepts a tensor-like object.
resizeBilinear gradients cpu {} greyscale: upscale, same aspect ratio.
resizeBilinear gradients cpu {} with clones, greyscale: upscale, same aspect ratio.
resizeBilinear gradients cpu {} greyscale: upscale, same aspect ratio, align corners.
resizeBilinear gradients cpu {} greyscale: upscale, taller than wider.
resizeBilinear gradients cpu {} greyscale: upscale, taller than wider, align corners.
resizeBilinear gradients cpu {} greyscale: upscale, wider than taller.
resizeBilinear gradients cpu {} greyscale: upscale, wider than taller, align corners.
resizeBilinear gradients cpu {} greyscale: downscale, same aspect ratio.
resizeBilinear gradients cpu {} greyscale: downscale, same aspect ratio, align corners.
resizeBilinear gradients cpu {} greyscale: downscale, taller than wider.
resizeBilinear gradients cpu {} greyscale: downscale, taller than wider, align corners.
resizeBilinear gradients cpu {} greyscale: downscale, wider than taller.
resizeBilinear gradients cpu {} greyscale: downscale, wider than taller, align corners.
resizeBilinear gradients cpu {} greyscale: same size.
resizeBilinear gradients cpu {} greyscale: same size, align corners.
resizeBilinear gradients cpu {} color: upscale, wider than taller.
resizeBilinear gradients cpu {} color: upscale, wider than taller, align corners.
resizeBilinear gradients cpu {} color: downscale, taller than wider.
resizeBilinear gradients cpu {} color: downscale, width = 1, align corners.
resizeBilinear gradients cpu {} color: downscale, height = 1, align corners.
resizeBilinear gradients cpu {} color: downscale, taller than wider, align corners.
resizeBilinear gradients cpu {} color: same size.
resizeBilinear gradients cpu {} color: same size, align corners.
resizeNearestNeighbor cpu {} simple alignCorners=false.
resizeNearestNeighbor cpu {} simple alignCorners=true.
resizeNearestNeighbor cpu {} matches tensorflow w/ random numbers alignCorners=false.
resizeNearestNeighbor cpu {} matches tensorflow w/ random numbers alignCorners=true.
resizeNearestNeighbor cpu {} batch of 2, simple, alignCorners=true.
resizeNearestNeighbor cpu {} throws when passed a non-tensor.
resizeNearestNeighbor cpu {} accepts a tensor-like object.
resizeNearestNeighbor cpu {} does not throw when some output dim is 1 and alignCorners=true.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, same aspect ratio.
resizeNearestNeighbor gradients cpu {} with clones, greyscale: upscale, same aspect ratio.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, same aspect ratio, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, taller than wider.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, taller than wider, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, wider than taller.
resizeNearestNeighbor gradients cpu {} greyscale: upscale, wider than taller, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, same aspect ratio.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, same aspect ratio, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, taller than wider.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, taller than wider, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, taller than wider.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, taller than wider, align corners.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, same size.
resizeNearestNeighbor gradients cpu {} greyscale: downscale, same size, align corners.
resizeNearestNeighbor gradients cpu {} color: upscale, wider than taller.
resizeNearestNeighbor gradients cpu {} color: upscale, wider than taller, align corners.
resizeNearestNeighbor gradients cpu {} color: downscale, taller than wider.
resizeNearestNeighbor gradients cpu {} color: downscale, taller than wider, align corners.
resizeNearestNeighbor gradients cpu {} color: same size.
reverse1d cpu {} reverse a 1D array.
reverse1d cpu {} reverse a 1D array, even length.
reverse1d cpu {} grad.
reverse1d cpu {} gradient with clones.
reverse1d cpu {} accepts a tensor-like object.
reverse2d cpu {} reverse a 2D array at axis [0].
reverse2d cpu {} reverse a 2D array at axis [1].
reverse2d cpu {} reverse a 2D array odd rows and columns at axis [0, 1].
reverse2d cpu {} throws error with invalid input.
reverse2d cpu {} throws error with invalid axis param.
reverse2d cpu {} throws error with non integer axis param.
reverse2d cpu {} grad.
reverse2d cpu {} grad with reverse(axis=0).
reverse2d cpu {} grad with reverse(axis=1).
reverse2d cpu {} accepts a tensor-like object.
reverse3d cpu {} reverse a 3D array at axis [0].
reverse3d cpu {} reverse a 3D array at axis [1].
reverse3d cpu {} reverse a 3D array at axis [2].
reverse3d cpu {} reverse a 3D array at axis [0, 1].
reverse3d cpu {} reverse a 3D array at axis [0, 2].
reverse3d cpu {} reverse a 3D array at axis [1, 2].
reverse3d cpu {} throws error with invalid input.
reverse3d cpu {} throws error with invalid axis param.
reverse3d cpu {} throws error with non integer axis param.
reverse3d cpu {} accepts a tensor-like object.
reverse4d cpu {} reverse a 4D array at axis [0].
reverse4d cpu {} reverse a 4D array at axis [1].
reverse4d cpu {} reverse a 4D array at axis [2].
reverse4d cpu {} reverse a 4D array at axis [3].
reverse4d cpu {} reverse a 4D array at axis [0, 2].
reverse4d cpu {} reverse a 4D array at axis [1, 3].
reverse4d cpu {} throws error with invalid input.
reverse4d cpu {} throws error with invalid axis param.
reverse4d cpu {} throws error with non integer axis param.
reverse4d cpu {} accepts a tensor-like object.
reverse cpu {} throws when passed a non-tensor.
reverse cpu {} accepts a tensor-like object.
scatterND cpu {} should work for 2d.
scatterND cpu {} should work for simple 1d.
scatterND cpu {} should work for multiple 1d.
scatterND cpu {} should work for high rank updates.
scatterND cpu {} should work for high rank indices.
scatterND cpu {} should work for high rank indices and update.
scatterND cpu {} should sum the duplicated indices.
scatterND cpu {} should work for tensorLike input.
scatterND cpu {} should throw error when indices type is not int32.
scatterND cpu {} should throw error when indices and update mismatch.
scatterND cpu {} should throw error when indices and update count mismatch.
scatterND cpu {} should throw error when indices are scalar.
scatterND cpu {} should throw error when update is scalar.
unsortedSegmentSum cpu {} tensor1D.
unsortedSegmentSum cpu {} tensor2D.
unsortedSegmentSum cpu {} tensor3D.
unsortedSegmentSum cpu {} N > than parallelization threshold, tensor1D.
unsortedSegmentSum cpu {} ignores negative segmentIds.
unsortedSegmentSum cpu {} gradient ignores negative segmentIds.
unsortedSegmentSum cpu {} tensor1D gradient.
unsortedSegmentSum cpu {} gradient with clones.
unsortedSegmentSum cpu {} tensor2D gradient.
unsortedSegmentSum cpu {} tensor3D gradient.
unsortedSegmentSum cpu {} accepts a tensor-like object.
unsortedSegmentSum cpu {} accepts a tensor-like object chained.
hannWindow cpu {} length=3.
hannWindow cpu {} length=7.
hannWindow cpu {} length=6.
hannWindow cpu {} length=20.
hammingWindow cpu {} length=3.
hammingWindow cpu {} length=6.
hammingWindow cpu {} length=7.
hammingWindow cpu {} length=20.
frame cpu {} 3 length frames.
frame cpu {} 3 length frames with step 2.
frame cpu {} 3 length frames with step 5.
frame cpu {} Exceeding frame length.
frame cpu {} Zero frame step.
frame cpu {} Padding with default value.
frame cpu {} Padding with the given value.
frame cpu {} Padding all remaining frames with step=1.
frame cpu {} Padding all remaining frames with step=1 and given pad-value.
frame cpu {} Padding all remaining frames with step=2.
stft cpu {} 3 length with hann window.
stft cpu {} 3 length with hann window (sequencial number).
stft cpu {} 3 length, 2 step with hann window.
stft cpu {} 3 fftLength, 5 frameLength, 2 step.
stft cpu {} 5 length with hann window.
stft cpu {} 5 length with hann window (sequential).
stft cpu {} 3 length with hamming window.
stft cpu {} 3 length, 2 step with hamming window.
stft cpu {} 3 fftLength, 5 frameLength, 2 step with hamming window.
stft cpu {} 5 length with hann window (sequential).
stft cpu {} 3 length without window function.
stft cpu {} 3 length, 2 step without window function.
slice1d cpu {} slices 1x1 into 1x1 (effectively a copy).
slice1d cpu {} slices 5x1 into shape 2x1 starting at 3.
slice1d cpu {} slices 5x1 into shape 3x1 starting at 1.
slice1d cpu {} grad.
slice1d cpu {} gradient with clones.
slice1d cpu {} accepts a tensor-like object.
slice2d cpu {} slicing a 1x1 from a 1x1 returns a 1x1.
slice2d cpu {} returns a tensor of slice size.
slice2d cpu {} returns the upper-left submatrix when begin is [0, 0].
slice2d cpu {} returns the rectangle specified.
slice2d cpu {} throws when requesting out of bounds slice.
slice2d cpu {} grad.
slice2d cpu {} accepts a tensor-like object.
slice2d cpu {} slice an already sliced tensor, first was not continous.
slice2d cpu {} slice an already sliced tensor, first was continous.
slice2d cpu {} slice an already sliced tensor and do async read.
slice2d cpu {} square a sliced texture, followed by non-sliced texture of same shape.
slice2d cpu {} square a non-sliced texture, followed by a sliced texture of same shape.
slice2d cpu {} slice a tensor and do async read.
slice2d cpu {} flatten a sliced tensor that was continuous in memory.
slice2d cpu {} slice a tensor that was not continuous in memory.
slice2d cpu {} flatten a sliced tensor that was not continuous in memory.
slice2d cpu {} flatten a sliced tensor not continuous in memory and run program.
slice2d cpu {} reshape a sliced 1d into a 2d tensor.
slice2d cpu {} reshape a sliced 1d into a 2d tensor and run program.
slice2d cpu {} broadcast the original with the sliced tensor.
slice2d cpu {} zero-sized slice out of a non-zero sized tensor.
slice2d cpu {} zero-sized slice out of a zero-sized tensor.
slice3d cpu {} slices 1x1x1 into shape 1x1x1 (effectively a copy).
slice3d cpu {} slices 2x2x2 array into 1x2x2 starting at [1, 0, 0].
slice3d cpu {} slices 2x2x2 array into 2x1x1 starting at [0, 1, 1].
slice3d cpu {} accepts a tensor-like object.
slice4d cpu {} slices 1x1x1x1 into shape 1x1x1x1 (effectively a copy).
slice4d cpu {} slices 2x2x2x2 array into 1x2x2x2 starting at [1, 0, 0, 0].
slice4d cpu {} slices 2x2x2x2 array into 2x1x1x1 starting at [0, 1, 1, 1].
slice4d cpu {} accepts a tensor-like object.
slice5d cpu {} slices 1x1x1x1x1 into shape 1x1x1x1x1 (effectively a copy).
slice5d cpu {} slices 2x2x2x2x2 array into 1x2x2x2x2 starting at [1,0,0,0,0].
slice5d cpu {} slices 2x2x2x2x2 array into 2x1x1x1x1 starting at [0,1,1,1,1].
slice5d cpu {} accepts a tensor-like object.
slice6d cpu {} slices 1x1x1x1x1x1 into shape 1x1x1x1x1x1 (effectively a copy).
slice6d cpu {} slices 2x2x2x2x2x2 array into 1x2x2x2x2x2 starting at [1,0,0,0,0,0].
slice6d cpu {} slices 2x2x2x2x2x2 array into 2x1x1x1x1x1 starting at [0,1,1,1,1,1].
slice6d cpu {} accepts a tensor-like object.
slice ergonomics cpu {} slices 2x2x2 array into 2x1x1 no size.
slice ergonomics cpu {} slices 2x2x2 array into 1x2x2 with scalar begin no size.
slice ergonomics cpu {} slices 2x2x2 array using 2d size and 2d size.
slice ergonomics cpu {} slices 2x2x2 array using negative size.
slice ergonomics cpu {} slices 2x2x2 array using 1d size.
slice ergonomics cpu {} throws when passed a non-tensor.
slice ergonomics cpu {} accepts a tensor-like object.
slice ergonomics cpu {} should match source tensor dtype.
slice ergonomics cpu {} throws when begin is negative.
shallow slicing cpu {} shallow slice an input that was cast.
shallow slicing cpu {} delayed async read of sliced tensor has no mem leak.
shallow slicing cpu {} delayed sync read of sliced tensor has no mem leak.
isSliceContinous cpu {} [] => [].
isSliceContinous cpu {} [5] sliced to [3].
isSliceContinous cpu {} [5, 3] sliced to [2, 3] skipping a row.
isSliceContinous cpu {} [5, 3] sliced to [5, 2] skipping a column.
isSliceContinous cpu {} [5, 3] sliced to [1, 2] skipping a row and column.
isSliceContinous cpu {} [1, 5, 3] sliced to [1, 2, 3], skipping middle axis.
isSliceContinous cpu {} [2, 5, 3] sliced to [2, 2, 3], skipping middle axis.
softmax cpu {} regular test.
softmax cpu {} overflow.
softmax cpu {} underflow.
softmax cpu {} Huge difference between probabilities.
softmax cpu {} Propagates NaNs.
softmax cpu {} 2D, dim=1.
softmax cpu {} 2D, implicit dim=1.
softmax cpu {} 2D, dim=0 throws error.
softmax cpu {} 1D gradient.
softmax cpu {} gradient with clones.
softmax cpu {} 2D gradient.
softmax cpu {} throws when passed a non-tensor.
softmax cpu {} accepts a tensor-like object.
logSoftmax cpu {} regular test.
logSoftmax cpu {} Huge difference.
logSoftmax cpu {} Propagates NaNs.
logSoftmax cpu {} 2D, axis=1.
logSoftmax cpu {} 2D, implicit axis=1.
logSoftmax cpu {} 1D gradient.
logSoftmax cpu {} 2D, axis=0 throws error.
logSoftmax cpu {} throws when passed a non-tensor.
logSoftmax cpu {} accepts a tensor-like object.
sparseToDense cpu {} should work for scalar indices.
sparseToDense cpu {} should work for vector.
sparseToDense cpu {} should work for scalar value.
sparseToDense cpu {} should work for matrix.
sparseToDense cpu {} should throw exception if default value does not match dtype.
sparseToDense cpu {} should allow setting default value.
sparseToDense cpu {} no default value passed.
sparseToDense cpu {} should support TensorLike inputs.
sparseToDense cpu {} should work with 0-sized tensors.
sparseToDense cpu {} should throw error when indices are not int32.
sparseToDense cpu {} should throw error when indices rank > 2.
sparseToDense cpu {} should throw error when values has rank > 1.
sparseToDense cpu {} should throw error when values has wrong size.
1D FFT cpu {} should return the same value with TensorFlow (2 elements).
1D FFT cpu {} should calculate FFT from Tensor directly.
1D FFT cpu {} should return the same value as TensorFlow (3 elements).
1D FFT cpu {} should return the same value as TensorFlow with imaginary (3 elements).
1D FFT cpu {} should return the same value as TensorFlow (negative 3 elements).
1D FFT cpu {} should return the same value with TensorFlow (4 elements).
1D FFT cpu {} should return the same value as TensorFlow with imaginary (4 elements).
2D FFT cpu {} 2D: should return the same value as TensorFlow.
2D FFT cpu {} 3D: should return the same value as TensorFlow.
1D IFFT cpu {} should return the same value with TensorFlow (2 elements).
1D IFFT cpu {} should calculate FFT from Tensor directly.
1D IFFT cpu {} should return the same value as TensorFlow (3 elements).
1D IFFT cpu {} should return the same value as TensorFlow with imaginary (3 elements).
1D IFFT cpu {} should return the same value as TensorFlow (negative 3 elements).
1D IFFT cpu {} should return the same value with TensorFlow (4 elements).
1D IFFT cpu {} should return the same value as TensorFlow with imaginary (4 elements).
2D IFFT cpu {} 2D: should return the same value as TensorFlow.
2D IFFT cpu {} 3D: should return the same value as TensorFlow.
1D RFFT cpu {} should return the same value with TensorFlow (3 elements).
1D RFFT cpu {} should calculate from tensor directly.
1D RFFT cpu {} should return the same value with TensorFlow (6 elements).
1D RFFT cpu {} should return the same value without any fftLength.
1D RFFT cpu {} should return the value with cropped input.
1D RFFT cpu {} should return the value with padded input.
2D RFFT cpu {} should return the same value with TensorFlow (2x2 elements).
2D RFFT cpu {} should return the same value with TensorFlow (2x3 elements).
2D RFFT cpu {} should return the same value with TensorFlow (2x2x2 elements).
2D RFFT cpu {} should return the value with cropping.
2D RFFT cpu {} should return the value with padding.
1D IRFFT cpu {} should return the same value with TensorFlow (2 elements).
1D IRFFT cpu {} should calculate from the tensor directly.
1D IRFFT cpu {} should return the same value with TensorFlow (5 elements).
1D IRFFT cpu {} should return the same value with TensorFlow (5 elements) with imag.
2D IRFFT cpu {} should return the same value with TensorFlow (2x2 elements).
2D IRFFT cpu {} should return the same value with TensorFlow (2x3 elements).
2D IRFFT cpu {} should return the same value with TensorFlow (2x3 elements) with imag.
3D IRFFT cpu {} should return the same value with TensorFlow (2x2x2 elements).
3D IRFFT cpu {} should return the same value with TensorFlow (2x2x3 elements).
3D IRFFT cpu {} should return the same value with TensorFlow (2x2x3 elements) with imag.
stridedSlice cpu {} stridedSlice with first axis being new.
stridedSlice cpu {} strided slice with several new axes.
stridedSlice cpu {} strided slice with new axes and shrink axes.
stridedSlice cpu {} stridedSlice should fail if ellipsis mask is set.
stridedSlice cpu {} stridedSlice should support 1d tensor.
stridedSlice cpu {} stridedSlice should support 1d tensor.
stridedSlice cpu {} stridedSlice with 1d tensor should be used by tensor directly.
stridedSlice cpu {} stridedSlice should support 1d tensor empty result.
stridedSlice cpu {} stridedSlice should support 1d tensor negative begin.
stridedSlice cpu {} stridedSlice should support 1d tensor out of range begin.
stridedSlice cpu {} stridedSlice should support 1d tensor negative end.
stridedSlice cpu {} stridedSlice should support 1d tensor out of range end.
stridedSlice cpu {} stridedSlice should support 1d tensor begin mask.
stridedSlice cpu {} stridedSlice should support 1d tensor nagtive begin and stride.
stridedSlice cpu {} stridedSlice should support 1d tensor out of range begin and negative stride.
stridedSlice cpu {} stridedSlice should support 1d tensor nagtive end and stride.
stridedSlice cpu {} stridedSlice should support 1d tensor out of range end and negative stride.
stridedSlice cpu {} stridedSlice should support 1d tensor end mask.
stridedSlice cpu {} stridedSlice should support 1d tensor shrink axis mask.
stridedSlice cpu {} stridedSlice should support 1d tensor negative stride.
stridedSlice cpu {} stridedSlice should support 1d tensor even length stride.
stridedSlice cpu {} stridedSlice should support 1d tensor odd length stride.
stridedSlice cpu {} stridedSlice should support 2d tensor identity.
stridedSlice cpu {} stridedSlice should support 2d tensor.
stridedSlice cpu {} stridedSlice should support 2d tensor strides.
stridedSlice cpu {} stridedSlice with 2d tensor should be used by tensor directly.
stridedSlice cpu {} stridedSlice should support 2d tensor negative strides.
stridedSlice cpu {} stridedSlice should support 2d tensor begin mask.
stridedSlice cpu {} stridedSlice should support 2d tensor shrink mask.
stridedSlice cpu {} stridedSlice should support 2d tensor end mask.
stridedSlice cpu {} stridedSlice should support 2d tensor negative strides and begin mask.
stridedSlice cpu {} stridedSlice should support 2d tensor negative strides and end mask.
stridedSlice cpu {} stridedSlice should support 3d tensor identity.
stridedSlice cpu {} stridedSlice should support 3d tensor negative stride.
stridedSlice cpu {} stridedSlice should support 3d tensor strided 2.
stridedSlice cpu {} stridedSlice should support 3d tensor shrink mask.
stridedSlice cpu {} stridedSlice should support 3d with smaller length of begin array.
stridedSlice cpu {} stridedSlice should support 3d with smaller length of end array.
stridedSlice cpu {} stridedSlice should support 3d with smaller length of stride array.
stridedSlice cpu {} stridedSlice should throw when passed a non-tensor.
stridedSlice cpu {} accepts a tensor-like object.
sub cpu {} c - A.
sub cpu {} A - c.
sub cpu {} A - c propagates NaNs.
sub cpu {} A - B.
sub cpu {} TensorLike.
sub cpu {} TensorLike chained.
sub cpu {} A - B propagates NaNs.
sub cpu {} A - B throws when passed tensors with different shape.
sub cpu {} A - B broadcasting same rank Tensors different shape.
sub cpu {} A - B broadcast 2D + 1D.
sub cpu {} 2D-scalar broadcast.
sub cpu {} scalar-1D broadcast.
sub cpu {} 2D-2D broadcast each with 1 dim.
sub cpu {} 2D-2D broadcast inner dim of b.
sub cpu {} 3D-scalar.
sub cpu {} gradients: basic 1D arrays.
sub cpu {} gradient with clones.
sub cpu {} gradients: basic 2D arrays.
sub cpu {} gradient: 1D - scalar broadcast.
sub cpu {} gradient: scalar - 1D broadcast.
sub cpu {} gradient: 2D - 2D broadcast.
sub cpu {} complex number subtraction.
sub cpu {} complex number broadcasting subtraction.
sub cpu {} throws when passed a as a non-tensor.
sub cpu {} throws when passed b as a non-tensor.
sub cpu {} upcasts when dtypes dont match.
sub cpu {} accepts a tensor-like object.
tile cpu {} 1D (tile).
tile cpu {} 2D (tile).
tile cpu {} 3D (tile).
tile cpu {} 4D (tile).
tile cpu {} 5D (tile).
tile cpu {} 1d string tensor.
tile cpu {} 2d string tensor.
tile cpu {} propagates NaNs.
tile cpu {} 1D bool (tile).
tile cpu {} 2D bool (tile).
tile cpu {} 3D bool (tile).
tile cpu {} 1D int32 (tile).
tile cpu {} 2D int32 (tile).
tile cpu {} 3D int32 (tile).
tile cpu {} 1D (tile) gradient.
tile cpu {} gradient with clones.
tile cpu {} 2D (tile) gradient.
tile cpu {} 3D (tile) gradient.
tile cpu {} 4D (tile) gradient.
tile cpu {} throws when passed a non-tensor.
tile cpu {} accepts a tensor-like object.
topk cpu {} 1d array with default k.
topk cpu {} 1d array with default k from tensor.topk.
topk cpu {} 2d array with default k.
topk cpu {} 2d array with k=2.
topk cpu {} 2d array with k=2 from tensor.topk.
topk cpu {} 3d array with k=3.
topk cpu {} topk(int32) propagates int32 dtype.
topk cpu {} lower-index element appears first, k=4.
topk cpu {} throws when k > size of array.
topk cpu {} throws when passed a scalar.
topk cpu {} accepts a tensor-like object, k=2.
transpose cpu {} of scalar is no-op.
transpose cpu {} of 1D is no-op.
transpose cpu {} of scalar with perm of incorrect rank throws error.
transpose cpu {} of 1d with perm out of bounds throws error.
transpose cpu {} of 1d with perm incorrect rank throws error.
transpose cpu {} 2D (no change).
transpose cpu {} 2D (transpose).
transpose cpu {} 2D, shape has ones.
transpose cpu {} 3D [r, c, d] => [d, r, c].
transpose cpu {} 3D [r, c, d] => [d, c, r].
transpose cpu {} 3D [r, c, d] => [d, r, c], shape has ones.
transpose cpu {} 3D [r, c, d] => [r, d, c].
transpose cpu {} 5D [r, c, d, e, f] => [r, c, d, f, e].
transpose cpu {} 4D [r, c, d, e] => [c, r, d, e].
transpose cpu {} 4D [r, c, d, e] => [c, r, e, d].
transpose cpu {} 4D [r, c, d, e] => [e, r, c, d].
transpose cpu {} 4D [r, c, d, e] => [d, c, e, r].
transpose cpu {} 5D [r, c, d, e, f] => [c, r, d, e, f].
transpose cpu {} 6D [r, c, d, e, f] => [r, c, d, f, e].
transpose cpu {} 6D [r, c, d, e, f, g] => [c, r, d, e, f, g].
transpose cpu {} gradient 3D [r, c, d] => [d, c, r].
transpose cpu {} gradient with clones.
transpose cpu {} throws when passed a non-tensor.
transpose cpu {} accepts a tensor-like object.
truncatedNormal cpu {} should return a random 1D float32 array.
truncatedNormal cpu {} should return a randon 1D int32 array.
truncatedNormal cpu {} should return a 2D float32 array.
truncatedNormal cpu {} should return a 2D int32 array.
truncatedNormal cpu {} should return a 3D float32 array.
truncatedNormal cpu {} should return a 3D int32 array.
truncatedNormal cpu {} should return a 4D float32 array.
truncatedNormal cpu {} should return a 4D int32 array.
relu cpu {} basic.
relu cpu {} basic relu6.
relu cpu {} 5D.
relu cpu {} 6D.
relu cpu {} does nothing to positive values.
relu cpu {} sets negative values to 0.
relu cpu {} preserves zero values.
relu cpu {} propagates NaNs, float32.
relu cpu {} gradients: positive scalar.
relu cpu {} gradients: relu6.
relu cpu {} gradient with clones.
relu cpu {} gradients: negative scalar.
relu cpu {} gradients: array.
relu cpu {} gradients: relu6 array.
relu cpu {} throws when passed a non-tensor.
relu cpu {} accepts a tensor-like object.
relu cpu {} throws for string tensor.
abs cpu {} basic.
abs cpu {} 5D.
abs cpu {} 6D.
abs cpu {} complex64 rank-1.
abs cpu {} complex64 rank-2.
abs cpu {} complex64 rank-3.
abs cpu {} is underflow-safe for complex64.
abs cpu {} propagates NaNs.
abs cpu {} gradients: Scalar.
abs cpu {} gradient with clones.
abs cpu {} gradients: Tensor1D.
abs cpu {} gradients: Tensor2D.
abs cpu {} throws when passed a non-tensor.
abs cpu {} accepts a tensor-like object.
abs cpu {} throws for string tensor.
step cpu {} with 1d tensor.
step cpu {} with 1d tensor and alpha.
step cpu {} with 2d tensor.
step cpu {} propagates NaNs.
step cpu {} gradients: Scalar.
step cpu {} gradient with clones.
step cpu {} gradients: Tensor1D.
step cpu {} gradients: Tensor2D.
step cpu {} throws when passed a non-tensor.
step cpu {} accepts a tensor-like object.
step cpu {} throws for string tensor.
neg cpu {} basic.
neg cpu {} propagate NaNs.
neg cpu {} gradients: Scalar.
neg cpu {} gradients: Scalar.
neg cpu {} gradients: Tensor1D.
neg cpu {} gradients: Tensor2D.
neg cpu {} throws when passed a non-tensor.
neg cpu {} accepts a tensor-like object.
neg cpu {} throws for string tensor.
sigmoid cpu {} basic.
sigmoid cpu {} 6D.
sigmoid cpu {} propagates NaNs.
sigmoid cpu {} gradients: Tensor1D.
sigmoid cpu {} gradient with clones.
sigmoid cpu {} throws when passed a non-tensor.
sigmoid cpu {} accepts a tensor-like object.
sigmoid cpu {} throws for string tensor.
logSigmoid cpu {} basic.
logSigmoid cpu {} scalar.
logSigmoid cpu {} tensor2D.
logSigmoid cpu {} larger magnitude negative inputs.
logSigmoid cpu {} larger magnitude positive inputs.
logSigmoid cpu {} propagates NaNs.
logSigmoid cpu {} gradients: Scalar.
logSigmoid cpu {} gradients: Tensor1D.
logSigmoid cpu {} gradient with clones.
logSigmoid cpu {} gradients: Tensor2D.
logSigmoid cpu {} throws when passed a non-tensor.
logSigmoid cpu {} accepts a tensor-like object.
logSigmoid cpu {} throws for string tensor.
softplus cpu {} basic.
softplus cpu {} scalar.
softplus cpu {} tensor2D.
softplus cpu {} larger magnitude negative inputs.
softplus cpu {} larger magnitude positive inputs.
softplus cpu {} propagates NaNs.
softplus cpu {} gradients: Scalar.
softplus cpu {} gradients: Scalar.
softplus cpu {} gradients: Tensor1D.
softplus cpu {} gradients: Tensor2D.
softplus cpu {} throws when passed a non-tensor.
softplus cpu {} accepts a tensor-like object.
softplus cpu {} throws for string tensor.
sqrt cpu {} sqrt.
sqrt cpu {} sqrt propagates NaNs.
sqrt cpu {} gradients: Scalar.
sqrt cpu {} gradient with clones.
sqrt cpu {} gradients: Tensor1D.
sqrt cpu {} gradients: Tensor2D.
sqrt cpu {} throws when passed a non-tensor.
sqrt cpu {} accepts a tensor-like object.
sqrt cpu {} throws for string tensor.
rsqrt cpu {} rsqrt.
rsqrt cpu {} rsqrt propagates NaNs.
rsqrt cpu {} gradients: Scalar.
rsqrt cpu {} gradients: Scalar.
rsqrt cpu {} gradients: Tensor1D.
rsqrt cpu {} gradients: Tensor2D.
rsqrt cpu {} throws when passed a non-tensor.
rsqrt cpu {} accepts a tensor-like object.
rsqrt cpu {} throws for string tensor.
square cpu {} 1D array.
square cpu {} 2D array.
square cpu {} 5D array.
square cpu {} 6D array.
square cpu {} square propagates NaNs.
square cpu {} gradients: Scalar.
square cpu {} gradients: Scalar.
square cpu {} gradients: Tensor1D.
square cpu {} gradients: Tensor2D.
square cpu {} gradients: Tensor5D.
square cpu {} gradients: Tensor6D.
square cpu {} throws when passed a non-tensor.
square cpu {} accepts a tensor-like object.
square cpu {} throws for string tensor.
reciprocal cpu {} 1D array.
reciprocal cpu {} 2D array.
reciprocal cpu {} reciprocal propagates NaNs.
reciprocal cpu {} gradients: Scalar.
reciprocal cpu {} gradient with clones.
reciprocal cpu {} gradients: Tensor1D.
reciprocal cpu {} gradients: Tensor2D.
reciprocal cpu {} throws when passed a non-tensor.
reciprocal cpu {} accepts a tensor-like object.
reciprocal cpu {} throws for string tensor.
log cpu {} log.
log cpu {} log 6D.
log cpu {} log propagates NaNs.
log cpu {} gradients: Scalar.
log cpu {} gradient with clones.
log cpu {} gradients: Tensor1D.
log cpu {} gradients: Tensor2D.
log cpu {} throws when passed a non-tensor.
log cpu {} accepts a tensor-like object.
log cpu {} throws for string tensor.
log1p cpu {} log1p.
log1p cpu {} log1p propagates NaNs.
log1p cpu {} gradients: Scalar.
log1p cpu {} gradient with clones.
log1p cpu {} gradients: Tensor1D.
log1p cpu {} gradients: Tensor2D.
log1p cpu {} throws when passed a non-tensor.
log1p cpu {} accepts a tensor-like object.
log1p cpu {} throws for string tensor.
ceil cpu {} basic.
ceil cpu {} propagates NaNs.
ceil cpu {} gradients: Scalar.
ceil cpu {} gradient with clones.
ceil cpu {} gradients: Tensor1D.
ceil cpu {} gradients: Tensor2D.
ceil cpu {} throws when passed a non-tensor.
ceil cpu {} accepts a tensor-like object.
ceil cpu {} throws for string tensor.
floor cpu {} basic.
floor cpu {} propagates NaNs.
floor cpu {} gradients: Scalar.
floor cpu {} gradient with clones.
floor cpu {} gradients: Tensor1D.
floor cpu {} gradients: Tensor2D.
floor cpu {} throws when passed a non-tensor.
floor cpu {} accepts a tensor-like object.
floor cpu {} throws for string tensor.
sign cpu {} basic.
sign cpu {} does not propagate NaNs.
sign cpu {} gradients: Scalar.
sign cpu {} gradient with clones.
sign cpu {} gradients: Tensor1D.
sign cpu {} gradients: Tensor2D.
sign cpu {} throws when passed a non-tensor.
sign cpu {} accepts a tensor-like object.
sign cpu {} throws for string tensor.
isNaN cpu {} basic.
isNaN cpu {} gradients: Scalar.
isNaN cpu {} gradients: Tensor1D.
isNaN cpu {} gradients: Tensor2D.
isNaN cpu {} throws when passed a non-tensor.
isNaN cpu {} accepts a tensor-like object.
isNaN cpu {} throws for string tensor.
isInf cpu {} basic.
isInf cpu {} gradients: Scalar.
isInf cpu {} gradients: Tensor1D.
isInf cpu {} gradients: Tensor2D.
isInf cpu {} throws when passed a non-tensor.
isInf cpu {} accepts a tensor-like object.
isInf cpu {} throws for string tensor.
isFinite cpu {} basic.
isFinite cpu {} gradients: Scalar.
isFinite cpu {} gradients: Tensor1D.
isFinite cpu {} gradients: Tensor2D.
isFinite cpu {} throws when passed a non-tensor.
isFinite cpu {} accepts a tensor-like object.
isFinite cpu {} throws for string tensor.
exp cpu {} exp.
exp cpu {} exp propagates NaNs.
exp cpu {} gradients: Scalar.
exp cpu {} gradient with clones.
exp cpu {} gradients: Tensor1D.
exp cpu {} gradients: Tensor2D.
exp cpu {} throws when passed a non-tensor.
exp cpu {} accepts a tensor-like object.
exp cpu {} throws for string tensor.
expm1 cpu {} expm1.
expm1 cpu {} expm1 propagates NaNs.
expm1 cpu {} gradients: Scalar.
expm1 cpu {} gradient with clones.
expm1 cpu {} gradients: Tensor1D.
expm1 cpu {} gradients: Tensor2D.
expm1 cpu {} throws when passed a non-tensor.
expm1 cpu {} accepts a tensor-like object.
expm1 cpu {} throws for string tensor.
sin cpu {} basic.
sin cpu {} propagates NaNs.
sin cpu {} gradients: Scalar.
sin cpu {} gradient with clones.
sin cpu {} gradients: Tensor1D.
sin cpu {} gradients: Tensor2D.
sin cpu {} throws when passed a non-tensor.
sin cpu {} accepts a tensor-like object.
sin cpu {} throws for string tensor.
cos cpu {} basic.
cos cpu {} propagates NaNs.
cos cpu {} gradients: Scalar.
cos cpu {} gradient with clones.
cos cpu {} gradients: Tensor1D.
cos cpu {} gradients: Tensor2D.
cos cpu {} throws when passed a non-tensor.
cos cpu {} accepts a tensor-like object.
cos cpu {} throws for string tensor.
tan cpu {} basic.
tan cpu {} propagates NaNs.
tan cpu {} gradients: Scalar.
tan cpu {} gradient with clones.
tan cpu {} gradients: Tensor1D.
tan cpu {} gradients: Tensor2D.
tan cpu {} throws when passed a non-tensor.
tan cpu {} accepts a tensor-like object.
tan cpu {} throws for string tensor.
asin cpu {} basic.
asin cpu {} propagates NaNs.
asin cpu {} gradients: Scalar.
asin cpu {} gradient with clones.
asin cpu {} gradients: Tensor1D.
asin cpu {} gradients: Tensor2D.
asin cpu {} throws when passed a non-tensor.
asin cpu {} accepts a tensor-like object.
asin cpu {} throws for string tensor.
acos cpu {} basic.
acos cpu {} propagates NaNs.
acos cpu {} gradients: Scalar.
acos cpu {} gradient with clones.
acos cpu {} gradients: Tensor1D.
acos cpu {} gradients: Tensor2D.
acos cpu {} throws when passed a non-tensor.
acos cpu {} accepts a tensor-like object.
acos cpu {} throws for string tensor.
atan cpu {} basic.
atan cpu {} 6D atan.
atan cpu {} propagates NaNs.
atan cpu {} gradients: Scalar.
atan cpu {} gradient with clones.
atan cpu {} gradients: Tensor1D.
atan cpu {} gradients: Tensor2D.
atan cpu {} throws when passed a non-tensor.
atan cpu {} accepts a tensor-like object.
atan cpu {} throws for string tensor.
sinh cpu {} basic.
sinh cpu {} propagates NaNs.
sinh cpu {} gradients: Scalar.
sinh cpu {} gradient with clones.
sinh cpu {} gradients: Tensor1D.
sinh cpu {} gradients: Tensor2D.
sinh cpu {} throws when passed a non-tensor.
sinh cpu {} accepts a tensor-like object.
sinh cpu {} throws for string tensor.
cosh cpu {} basic.
cosh cpu {} propagates NaNs.
cosh cpu {} gradients: Scalar.
cosh cpu {} gradient with clones.
cosh cpu {} gradients: Tensor1D.
cosh cpu {} gradients: Tensor2D.
cosh cpu {} throws when passed a non-tensor.
cosh cpu {} accepts a tensor-like object.
cosh cpu {} throws for string tensor.
tanh cpu {} basic.
tanh cpu {} propagates NaNs.
tanh cpu {} gradients: Scalar.
tanh cpu {} gradient with clones.
tanh cpu {} gradients: Tensor1D.
tanh cpu {} gradients: Tensor2D.
tanh cpu {} throws when passed a non-tensor.
tanh cpu {} accepts a tensor-like object.
tanh cpu {} throws for string tensor.
leakyRelu cpu {} basic.
leakyRelu cpu {} propagates NaN.
leakyRelu cpu {} gradients: Scalar.
leakyRelu cpu {} gradient with clones.
leakyRelu cpu {} gradients: Tensor1D.
leakyRelu cpu {} gradients: Tensor2D.
leakyRelu cpu {} throws when passed a non-tensor.
leakyRelu cpu {} accepts a tensor-like object.
leakyRelu cpu {} throws for string tensor.
elu cpu {} calculate elu.
elu cpu {} elu propagates NaN.
elu cpu {} derivative.
elu cpu {} gradient with clones.
elu cpu {} throws when passed a non-tensor.
elu cpu {} accepts a tensor-like object.
elu cpu {} throws for string tensor.
selu cpu {} calculate selu.
selu cpu {} selu propagates NaN.
selu cpu {} gradients: Scalar.
selu cpu {} gradient with clones.
selu cpu {} gradients: Tensor1D.
selu cpu {} gradients: Tensor2D.
selu cpu {} throws when passed a non-tensor.
selu cpu {} accepts a tensor-like object.
selu cpu {} throws for string tensor.
clip cpu {} basic.
clip cpu {} propagates NaNs.
clip cpu {} min greater than max.
clip cpu {} gradient: 1D tensor.
clip cpu {} gradient: 1D tensor with max or min value.
clip cpu {} gradient: scalar.
clip cpu {} gradient with clones.
clip cpu {} gradient with primitive as input.
clip cpu {} throws when passed a non-tensor.
clip cpu {} accepts a tensor-like object.
clip cpu {} clip(x, eps, 1-eps) never returns 0 or 1.
clip cpu {} throws for string tensor.
round cpu {} basic.
round cpu {} propagates NaNs.
round cpu {} gradients: Scalar.
round cpu {} gradient with clones.
round cpu {} gradients: Tensor1D.
round cpu {} gradients: Tensor2D.
round cpu {} throws when passed a non-tensor.
round cpu {} accepts a tensor-like object.
round cpu {} throws for string tensor.
asinh cpu {} basic.
asinh cpu {} scalar.
asinh cpu {} tensor2D.
asinh cpu {} propagates NaNs.
asinh cpu {} gradients: Scalar.
asinh cpu {} gradient with clones.
asinh cpu {} gradients: Tensor1D.
asinh cpu {} gradients: Tensor2D.
asinh cpu {} throws when passed a non-tensor.
asinh cpu {} accepts a tensor-like object.
asinh cpu {} throws for string tensor.
acosh cpu {} basic.
acosh cpu {} scalar.
acosh cpu {} tensor2d.
acosh cpu {} propagates NaNs.
acosh cpu {} NaN outside function domain.
acosh cpu {} gradients: Scalar.
acosh cpu {} gradient with clones.
acosh cpu {} gradients: Tensor1D.
acosh cpu {} gradients: Tensor2D.
acosh cpu {} throws when passed a non-tensor.
acosh cpu {} accepts a tensor-like object.
acosh cpu {} throws for string tensor.
atanh cpu {} basic.
atanh cpu {} scalar.
atanh cpu {} tensor2d.
atanh cpu {} propagates NaNs.
atanh cpu {} NaN outside function domain.
atanh cpu {} gradients: Scalar.
atanh cpu {} gradient with clones.
atanh cpu {} gradients: Tensor1D.
atanh cpu {} gradients: Tensor2D.
atanh cpu {} throws when passed a non-tensor.
atanh cpu {} accepts a tensor-like object.
atanh cpu {} throws for string tensor.
erf cpu {} basic.
erf cpu {} blowup.
erf cpu {} scalar.
erf cpu {} scalar in int32.
erf cpu {} tensor2d.
erf cpu {} propagates NaNs.
erf cpu {} gradients: Scalar.
erf cpu {} gradient with clones.
erf cpu {} gradients: Tensor1D.
erf cpu {} gradients: Tensor2D.
erf cpu {} throws when passed a non-tensor.
erf cpu {} accepts a tensor-like object.
erf cpu {} throws for string tensor.
AdadeltaOptimizer cpu {} basic.
AdadeltaOptimizer cpu {} Save, load weights and continue training.
AdadeltaOptimizer cpu {} serialization round-trip.
AdagradOptimizer cpu {} basic.
AdagradOptimizer cpu {} Continue training after loading weights.
AdagradOptimizer cpu {} serialization round-trip.
AdamOptimizer cpu {} basic.
AdamOptimizer cpu {} Continue training after loading weights.
AdamOptimizer cpu {} serialization round-trip.
AdamaxOptimizer cpu {} basic.
AdamaxOptimizer cpu {} serialization round-trip.
MomentumOptimizer cpu {} basic.
MomentumOptimizer cpu {} basic - with Nesterov.
MomentumOptimizer cpu {} Save, load weights and conntinue training.
MomentumOptimizer cpu {} serialization round-trip.
optimizer cpu {} basic.
optimizer cpu {} varList array of all variables.
optimizer cpu {} varList empty array of variables throws error.
optimizer cpu {} varList subset of variables update.
optimizer cpu {} only bias trainable.
optimizer cpu {} only bias trainable, only x in varList throws error.
optimizer cpu {} instanceof Optimizer.
optimizer cpu {} throws error when f returns a non-scalar.
RMSPropOptimizer cpu {} basic.
RMSPropOptimizer cpu {} gradient with centered momentum.
RMSPropOptimizer cpu {} Save and load weights: centered = false.
RMSPropOptimizer cpu {} Save, load weights and continue training: centered = true.
RMSPropOptimizer cpu {} serialization round-trip.
RMSPropOptimizer cpu {} must define learning rate.
SGDOptimizer cpu {} basic.
SGDOptimizer cpu {} Set and get weights: empty.
SGDOptimizer cpu {} serialization round-trip.
PlatformNode cpu {} fetch should use global.fetch if defined.
PlatformNode cpu {} fetch should use node-fetch with tf.env().global.fetch is null.
PlatformNode cpu {} now should use process.hrtime.
PlatformNode cpu {} encodeUTF8 single string.
PlatformNode cpu {} encodeUTF8 two strings delimited.
PlatformNode cpu {} encodeUTF8 cyrillic.
PlatformNode cpu {} decode single string.
PlatformNode cpu {} decode two strings delimited.
PlatformNode cpu {} decode cyrillic.
profiler.Profiler cpu {} profiles simple function.
profiler.Profiler cpu {} profiles nested kernel.
profiler.checkComputationForErrors Float32Array has NaN.
profiler.checkComputationForErrors Float32Array has Infinity.
profiler.checkComputationForErrors Float32Array no NaN.
chained ops cpu {} all chained ops should exist on tensor .
registerClass registerClass succeeds.
registerClass registerClass fails on missing className.
registerClass registerClass fails on missing className.
registerClass registerClass fails on missing className.
getFilteredNodesXToY cpu {} no paths from x to y.
getFilteredNodesXToY cpu {} one operation x => y.
getFilteredNodesXToY cpu {} 1 operation [x0, x1] => y, all input paths.
getFilteredNodesXToY cpu {} one operation [x0, x1] => y, one input paths.
getFilteredNodesXToY cpu {} two operations x => intermediate => y.
getFilteredNodesXToY cpu {} two operations [x0, x1], [x2] => intermediate => y.
getFilteredNodesXToY cpu {} x => y and x => orphan.
getFilteredNodesXToY cpu {} x => y and orphan => y.
getFilteredNodesXToY cpu {} 1 op with 3 outputs x => y1, y2, y3.
backpropagateGradients cpu {} Throws if gradient is not defined.
backpropagateGradients cpu {} basic backprop with 1 node.
backpropagateGradients cpu {} basic backprop with 2 nodes.
backpropagateGradients cpu {} basic backprop with a split node accumulates gradients.
backpropagateGradients cpu {} backprop over 1 node with 3 outputs, w.r.t to the 2nd output.
tensor cpu {} Tensors of arbitrary size.
tensor cpu {} Tensors of explicit size.
tensor cpu {} Tensor dataSync CPU --> GPU.
tensor cpu {} Tensor.data() CPU --> GPU.
tensor cpu {} Tensor.data() packed CPU --> GPU.
tensor cpu {} Scalar basic methods.
tensor cpu {} indexToLoc Scalar.
tensor cpu {} indexToLoc Tensor1D.
tensor cpu {} indexToLoc Tensor2D.
tensor cpu {} indexToLoc Tensor3D.
tensor cpu {} indexToLoc Tensor 5D.
tensor cpu {} locToIndex Scalar.
tensor cpu {} locToIndex Tensor1D.
tensor cpu {} locToIndex Tensor2D.
tensor cpu {} locToIndex Tensor3D.
tensor cpu {} Tensor assignability (asserts compiler).
tensor cpu {} tf.tensor1d() from number[].
tensor cpu {} tf.tensor1d() throw error with null input value.
tensor cpu {} tf.tensor1d() from string[].
tensor cpu {} tf.tensor1d() from encoded strings.
tensor cpu {} tf.tensor1d() from encoded strings without dtype errors.
tensor cpu {} tf.tensor1d() from encoded strings, shape mismatch.
tensor cpu {} tf.tensor1d() from number[][], shape mismatch.
tensor cpu {} tf.tensor1d() from string[][], shape mismatch.
tensor cpu {} tf.tensor2d() from number[][].
tensor cpu {} tf.tensor2d() from string[][].
tensor cpu {} tf.tensor2d() from encoded strings.
tensor cpu {} tf.tensor2d() from encoded strings without dtype errors.
tensor cpu {} tf.tensor2d() from encoded strings, shape mismatch.
tensor cpu {} tf.tensor2d() requires shape to be of length 2.
tensor cpu {} tf.tensor2d() from number[][], but shape does not match.
tensor cpu {} tf.tensor2d() from string[][], but shape does not match.
tensor cpu {} tf.tensor2d() from number[], but no shape throws error.
tensor cpu {} tf.tensor2d() from string[], but no shape throws error.
tensor cpu {} tf.tensor2d() throw error with null input value.
tensor cpu {} tensor3d() from number[][][].
tensor cpu {} tensor3d() from string[][][].
tensor cpu {} tf.tensor3d() from encoded strings.
tensor cpu {} tf.tensor3d() from encoded strings without dtype errors.
tensor cpu {} tf.tensor3d() from encoded strings, shape mismatch.
tensor cpu {} tensor3d() from number[][][], but shape does not match.
tensor cpu {} tf.tensor3d() from number[], but no shape throws error.
tensor cpu {} tf.tensor3d() requires shape to be of length 3.
tensor cpu {} tf.tensor3d() throw error with null input value.
tensor cpu {} tensor4d() from number[][][][].
tensor cpu {} tensor4d() from string[][][][].
tensor cpu {} tf.tensor4d() from encoded strings.
tensor cpu {} tf.tensor4d() from encoded strings without dtype errors.
tensor cpu {} tf.tensor4d() from encoded strings, shape mismatch.
tensor cpu {} tensor4d() from string[][][][] infer shape.
tensor cpu {} tensor4d() from number[][][][], but shape does not match.
tensor cpu {} tf.tensor4d() from number[], but no shape throws error.
tensor cpu {} tf.tensor4d() requires shape to be of length 4.
tensor cpu {} tf.tensor4d() throw error with null input value.
tensor cpu {} tf.tensor5d() throw error with null input value.
tensor cpu {} tf.tensor6d() throw error with null input value.
tensor cpu {} default dtype.
tensor cpu {} float32 dtype.
tensor cpu {} int32 dtype.
tensor cpu {} int32 dtype, 3.9 => 3, like numpy.
tensor cpu {} int32 dtype, -3.9 => -3, like numpy.
tensor cpu {} bool dtype, 3 => true, like numpy.
tensor cpu {} bool dtype, -2 => true, like numpy.
tensor cpu {} bool dtype, 0 => false, like numpy.
tensor cpu {} bool dtype from boolean.
tensor cpu {} int32 dtype from boolean.
tensor cpu {} default dtype from boolean.
tensor cpu {} default dtype.
tensor cpu {} float32 dtype.
tensor cpu {} int32 dtype.
tensor cpu {} int32 dtype, non-ints get floored, like numpy.
tensor cpu {} int32 dtype, negative non-ints get ceiled, like numpy.
tensor cpu {} bool dtype, !=0 is truthy, 0 is falsy, like numpy.
tensor cpu {} default dtype from boolean[].
tensor cpu {} default dtype from UInt8Array.
tensor cpu {} default dtype from Int32Array.
tensor cpu {} tf.tensor() from Float32Array and number[].
tensor cpu {} tf.tensor() from Int32Array and number[].
tensor cpu {} tf.tensor() from mixed TypedArray.
tensor cpu {} tf.tensor() from TypedArrays which are themselves 3D.
tensor cpu {} tf.tensor() from TypedArrays which are themselves 3D, wrong shape.
tensor cpu {} default dtype from ascii string.
tensor cpu {} default dtype from utf-8 string.
tensor cpu {} default dtype from empty string.
tensor cpu {} default dtype from unicode escaped string.
tensor cpu {} default dtype from string[].
tensor cpu {} float32 dtype from boolean[].
tensor cpu {} int32 dtype from boolean[].
tensor cpu {} bool dtype from boolean[].
tensor cpu {} default dtype.
tensor cpu {} float32 dtype.
tensor cpu {} int32 dtype.
tensor cpu {} int32 dtype, non-ints get floored, like numpy.
tensor cpu {} int32 dtype, negative non-ints get ceiled, like numpy.
tensor cpu {} bool dtype, !=0 is truthy, 0 is falsy, like numpy.
tensor cpu {} default dtype from boolean[].
tensor cpu {} float32 dtype from boolean[].
tensor cpu {} int32 dtype from boolean[].
tensor cpu {} bool dtype from boolean[].
tensor cpu {} default dtype.
tensor cpu {} float32 dtype.
tensor cpu {} int32 dtype.
tensor cpu {} int32 dtype, non-ints get floored, like numpy.
tensor cpu {} int32 dtype, negative non-ints get ceiled, like numpy.
tensor cpu {} bool dtype, !=0 is truthy, 0 is falsy, like numpy.
tensor cpu {} default dtype from boolean[].
tensor cpu {} float32 dtype from boolean[].
tensor cpu {} int32 dtype from boolean[].
tensor cpu {} bool dtype from boolean[].
tensor cpu {} default dtype.
tensor cpu {} float32 dtype.
tensor cpu {} int32 dtype.
tensor cpu {} int32 dtype, non-ints get floored, like numpy.
tensor cpu {} int32 dtype, negative non-ints get ceiled, like numpy.
tensor cpu {} bool dtype, !=0 is truthy, 0 is falsy, like numpy.
tensor cpu {} default dtype from boolean[].
tensor cpu {} float32 dtype from boolean[].
tensor cpu {} int32 dtype from boolean[].
tensor cpu {} bool dtype from boolean[].
tensor cpu {} Scalar default dtype.
tensor cpu {} Scalar float32 dtype.
tensor cpu {} Scalar string dtype.
tensor cpu {} scalar from encoded string.
tensor cpu {} scalar from encoded string, but missing dtype.
tensor cpu {} scalar from encoded string, but value is not uint8array.
tensor cpu {} Scalar inferred dtype from bool.
tensor cpu {} Scalar inferred dtype from string.
tensor cpu {} Scalar int32 dtype.
tensor cpu {} Scalar bool dtype.
tensor cpu {} Scalar complex64 dtype.
tensor cpu {} Tensor1D default dtype.
tensor cpu {} Tensor1D inferred dtype from bools.
tensor cpu {} Tensor1D inferred dtype from strings.
tensor cpu {} Tensor1D float32 dtype.
tensor cpu {} Tensor1D int32 dtype.
tensor cpu {} Tensor1D complex64 dtype.
tensor cpu {} Tensor2D default dtype.
tensor cpu {} Tensor2D float32 dtype.
tensor cpu {} Tensor2D int32 dtype.
tensor cpu {} Tensor2D bool dtype.
tensor cpu {} Tensor2D complex64 dtype.
tensor cpu {} Tensor3D default dtype.
tensor cpu {} Tensor3D float32 dtype.
tensor cpu {} Tensor3D int32 dtype.
tensor cpu {} Tensor3D bool dtype.
tensor cpu {} Tensor3D complex64 dtype.
tensor cpu {} Tensor4D default dtype.
tensor cpu {} Tensor4D float32 dtype.
tensor cpu {} Tensor4D int32 dtype.
tensor cpu {} Tensor4D complex64 dtype.
tensor cpu {} Tensor4D bool dtype.
tensor cpu {} .data() with casting, string tensor.
tensor cpu {} reshape is functional.
tensor cpu {} reshape a string tensor.
tensor cpu {} reshape throws when passed a non-tensor.
tensor cpu {} reshape accepts a tensor-like object.
tensor cpu {} cast bool -> bool.
tensor cpu {} cast bool -> int32.
tensor cpu {} cast bool -> float32.
tensor cpu {} cast int32 -> bool.
tensor cpu {} cast int32 -> int32.
tensor cpu {} cast int32 -> float32.
tensor cpu {} cast float32 -> bool.
tensor cpu {} cast float32 -> int32.
tensor cpu {} cast float32 -> int32. async download.
tensor cpu {} cast float32 -> int32. queued async download.
tensor cpu {} cast float32 -> int32. sync download.
tensor cpu {} cast float32 -> float32.
tensor cpu {} cast complex64 -> float32.
tensor cpu {} cast complex64 -> int32.
tensor cpu {} cast complex64 -> bool.
tensor cpu {} cast throws when passed a non-tensor.
tensor cpu {} cast accepts a tensor-like object.
tensor cpu {} cast string -> !string throws error.
tensor cpu {} cast !string -> string throws error.
tensor cpu {} scalar bool -> int32.
tensor cpu {} Tensor1D float32 -> int32.
tensor cpu {} Tensor2D float32 -> bool.
tensor cpu {} Tensor2D int32 -> bool.
tensor cpu {} Tensor3D bool -> float32.
tensor cpu {} bool CPU -> GPU -> CPU.
tensor cpu {} int32 CPU -> GPU -> CPU.
tensor cpu {} asType is functional.
tensor cpu {} squeeze no axis.
tensor cpu {} squeeze with axis.
tensor cpu {} squeeze with negative axis.
tensor cpu {} squeeze with multiple negative axis.
tensor cpu {} squeeze wrong axis.
tensor cpu {} squeeze wrong negative axis.
tensor cpu {} squeeze axis out of range.
tensor cpu {} squeeze negative axis out of range.
tensor cpu {} squeeze throws when passed a non-tensor.
tensor cpu {} squeeze accepts a tensor-like object.
tensor cpu {} squeeze a zero-sized tensor.
tensor cpu {} squeeze can take an empty list of axis.
tensor cpu {} squeeze a complex64 tensor.
tensor cpu {} scalar -> 2d.
tensor cpu {} 1d -> 2d.
tensor cpu {} 2d -> 4d.
tensor cpu {} 3d -> 2d.
tensor cpu {} 4d -> 1d.
tensor cpu {} throws when passed non-integer shape.
tensor cpu {} throws when passed negative shape.
tensor cpu {} ones with complex type.
tensor cpu {} can create a tensor where values.size != buffer.size.
tensor debug mode cpu {} tf.tensor() from TypedArray + number[] fails due to wrong shape.
tensor dataSync cpu {} .dataSync() with casting, string tensor.
tensor.toString cpu {} scalar verbose.
tensor.toString cpu {} string scalar verbose.
tensor.toString cpu {} bool scalar verbose.
tensor.toString cpu {} 1d tensor verbose.
tensor.toString cpu {} 1d string tensor verbose.
tensor.toString cpu {} 1d bool tensor verbose.
tensor.toString cpu {} 2d tensor verbose.
tensor.toString cpu {} 2d string tensor verbose.
tensor.toString cpu {} 2d bool tensor verbose.
tensor.toString cpu {} 3d tensor verbose.
tensor.toString cpu {} 3d string tensor verbose.
tensor.toString cpu {} 3d bool tensor verbose.
tensor.toString cpu {} 1d long tensor verbose.
tensor.toString cpu {} 1d long string tensor verbose.
tensor.toString cpu {} 2d long tensor verbose.
tensor.toString cpu {} 2d long string tensor verbose.
tensor.toString cpu {} 2d with padding to align columns verbose.
tensor.toString cpu {} 2d string tensor with padding verbose.
tensor.toString cpu {} scalar.
tensor.toString cpu {} scalar string.
tensor.toString cpu {} 1d tensor.
tensor.toString cpu {} 2d tensor.
tensor.toString cpu {} 3d tensor.
tensor.toString cpu {} 1d long tensor.
tensor.toString cpu {} 2d long tensor.
tensor.toString cpu {} 2d with padding to align columns.
tensor.toString cpu {} scalar complex64 verbose.
tensor.toString cpu {} 1d complex64 tensor verbose.
tensor.toString cpu {} 2d complex64 tensor verbose.
tensor.toString cpu {} 3d complex64 tensor verbose.
tensor.toString cpu {} 1d long complex64 tensor verbose.
tensor.toString cpu {} 2d long complex64 tensor verbose.
tensor.toString cpu {} 2d complex64 with padding to align columns verbose.
tensor.toString cpu {} scalar complex64.
tensor.toString cpu {} 1d complex64 tensor.
tensor.toString cpu {} 2d complex64 tensor.
tensor.toString cpu {} 3d complex64 tensor.
tensor.toString cpu {} 1d long complex64 tensor.
tensor.toString cpu {} 2d long complex64 tensor.
tensor.toString cpu {} 2d complex64 with padding to align columns.
tensor grad cpu {} grad with second derivative.
tensor.data cpu {} interleaving .data() and .dataSync().
tensor.data cpu {} .data() postpones disposal of tensor.
tensor.data cpu {} calling .data() twice works (2 subscribers to a single read).
x instanceof Tensor cpu {} x: Tensor.
x instanceof Tensor cpu {} x: Tensor-like.
x instanceof Tensor cpu {} x: other object, fails.
x instanceof Tensor cpu {} x: undefined or null, fails.
tensor with 0 in shape cpu {} 1d of shape [0].
tensor with 0 in shape cpu {} 1d string tensor of shape [0].
tensor with 0 in shape cpu {} 2d of shape [0, 5].
tensor with 0 in shape cpu {} 2d string tensor of shape [0, 5].
tensor with 0 in shape cpu {} 2d throws when values are not empty.
tensor with 0 in shape cpu {} 3d of shape [0, 3, 0].
tensor with 0 in shape cpu {} 3d throws when values are not empty.
tensor with 0 in shape cpu {} 4d of shape [1, 3, 0, 5].
tensor with 0 in shape cpu {} 4d throws when values are not empty.
tensor with 0 in shape cpu {} complex64 with 0 in shape.
tensor.bytes() cpu {} float32 tensor.
tensor.bytes() cpu {} int32 tensor.
tensor.bytes() cpu {} bool tensor.
tensor.bytes() cpu {} string tensor from native strings.
tensor.bytes() cpu {} string tensor from encoded bytes.
tensor_util.isTensorInList cpu {} not in list.
tensor_util.isTensorInList cpu {} in list.
getTensorsInContainer cpu {} null input returns empty tensor.
getTensorsInContainer cpu {} tensor input returns one element tensor.
getTensorsInContainer cpu {} name tensor map returns flattened tensor.
getTensorsInContainer cpu {} can extract from arbitrary depth.
getTensorsInContainer cpu {} works with loops in container.
convertToTensor cpu {} primitive integer, NaN converts to zero, no error thrown.
convertToTensor cpu {} primitive number.
convertToTensor cpu {} primitive integer, NaN converts to zero.
convertToTensor cpu {} primitive boolean, parsed as bool tensor.
convertToTensor cpu {} primitive boolean, forced to be parsed as bool tensor.
convertToTensor cpu {} array1d.
convertToTensor cpu {} array2d.
convertToTensor cpu {} array3d.
convertToTensor cpu {} array4d.
convertToTensor cpu {} passing a tensor returns the tensor itself.
convertToTensor cpu {} passing a tensor with wrong type errors.
convertToTensor cpu {} fails when passed a string and force numeric is true.
convertToTensor cpu {} force numeric is true by default.
convertToTensor cpu {} primitive string, do not force numeric.
convertToTensor cpu {} string[], do not force numeric.
convertToTensor cpu {} string, explicitly parse as bool.
convertToTensor cpu {} fails to convert a dict to tensor.
convertToTensor cpu {} fails to convert a string to tensor.
convertToTensor debug mode cpu {} fails to convert a non-valid shape array to tensor.
expectArraysEqual cpu {} same arrays.
expectArraysEqual cpu {} throws on different arrays.
expectArraysEqual cpu {} same nested arrays.
expectArraysEqual cpu {} throws on different nested arrays.
expectArraysEqual cpu {} throws on different nested shapes.
expectArraysEqual cpu {} float32 with regular array.
expectArraysEqual cpu {} throws on different values of float32 with regular array.
expectArraysEqual cpu {} int32 with regular array.
expectArraysEqual cpu {} throws on different values of int32 with regular array.
expectArraysEqual cpu {} throws on float32 with int32.
expectArraysEqual cpu {} throws on int32 with uint8.
expectArraysClose cpu {} same arrays.
expectArraysClose cpu {} throws on different arrays.
expectArraysClose cpu {} same nested arrays.
expectArraysClose cpu {} throws on different nested arrays.
expectArraysClose cpu {} throws on different nested shapes.
expectArraysClose cpu {} float32 with regular array.
expectArraysClose cpu {} throws on different values of float32 with regular array.
expectArraysClose cpu {} int32 with regular array.
expectArraysClose cpu {} throws on different values of int32 with regular array.
expectArraysClose cpu {} throws on float32 with int32.
expectArraysClose cpu {} throws on int32 with uint8.
expectArraysClose cpu {} similar arrays with good epsilon.
expectArraysClose cpu {} similar arrays with bad epsilon.
upcastType upcasts bool to bool.
upcastType upcasts bool/int32 to int32.
upcastType upcasts bool/int32/float32 to float32.
upcastType upcasts bool/int32/float32/complex64 to complex64.
upcastType fails to upcast anything other than string with string.
Util Correctly gets size from shape.
Util Correctly identifies scalars.
Util Number arrays equal.
Util Is integer.
Util Size to squarish shape (perfect square).
Util Size to squarish shape (prime number).
Util Size to squarish shape (almost square).
Util Size of 1 to squarish shape.
Util infer shape single number.
Util infer shape 1d array.
Util infer shape 2d array.
Util infer shape 3d array.
Util infer shape 4d array.
Util infer shape of typed array.
Util infer shape of Uint8Array[], string tensor.
Util infer shape of Uint8Array[][], string tensor.
Util infer shape of Uint8Array[][][], string tensor.
util.flatten nested number arrays.
util.flatten nested string arrays.
util.flatten mixed TypedArray and number[].
util.flatten nested Uint8Arrays, skipTypedArray=true.
util.bytesFromStringArray count bytes after utf8 encoding.
util.inferDtype a single string => string.
util.inferDtype a single boolean => bool.
util.inferDtype a single number => float32.
util.inferDtype a list of strings => string.
util.inferDtype a list of bools => float32.
util.inferDtype a list of numbers => float32.
util.repeatedTry resolves.
util.repeatedTry rejects.
util.inferFromImplicitShape empty shape.
util.inferFromImplicitShape [2, 3, 4] -> [2, 3, 4].
util.inferFromImplicitShape [2, -1, 4] -> [2, 3, 4], size=24.
util.inferFromImplicitShape [-1, 3, 4] -> [2, 3, 4], size=24.
util.inferFromImplicitShape [2, 3, -1] -> [2, 3, 4], size=24.
util.inferFromImplicitShape [2, -1, -1] throws error.
util.inferFromImplicitShape [2, 3, -1] size=13 throws error.
util.inferFromImplicitShape [2, 3, 4] size=25 (should be 24) throws error.
util parseAxisParam axis=null returns no axes for scalar.
util parseAxisParam axis=null returns 0 axis for Tensor1D.
util parseAxisParam axis=null returns all axes for Tensor3D.
util parseAxisParam axis as a single number.
util parseAxisParam axis as single negative number.
util parseAxisParam axis as list of negative numbers.
util parseAxisParam axis as list of positive numbers.
util parseAxisParam axis as combo of positive and negative numbers.
util parseAxisParam axis out of range throws error.
util parseAxisParam axis a list with one number out of range throws error.
util parseAxisParam axis with decimal value throws error.
util.squeezeShape scalar.
util.squeezeShape 1x1 reduced to scalar.
util.squeezeShape 1x3x1 reduced to [3].
util.squeezeShape 1x1x4 reduced to [4].
util.squeezeShape 2x3x4 not reduction.
util.squeezeShape with axis should only reduce dimensions specified by axis.
util.squeezeShape with axis should only reduce dimensions specified by negative axis.
util.squeezeShape with axis should only reduce dimensions specified by negative axis.
util.squeezeShape with axis throws error when specified axis is not squeezable.
util.squeezeShape with axis throws error when specified negative axis is not squeezable.
util.squeezeShape with axis throws error when specified axis is out of range.
util.squeezeShape with axis throws error when specified negative axis is out of range.
util.checkConversionForErrors Float32Array has NaN.
util.checkConversionForErrors Float32Array has Infinity.
util.checkConversionForErrors Int32Array has NaN.
util.hasEncodingLoss complex64 to any.
util.hasEncodingLoss any to complex64.
util.hasEncodingLoss any to float32.
util.hasEncodingLoss float32 to any.
util.hasEncodingLoss int32 to lower.
util.hasEncodingLoss lower to int32.
util.hasEncodingLoss bool to bool.
util.toNestedArray cpu {} 2 dimensions.
util.toNestedArray cpu {} 3 dimensions (2x2x3).
util.toNestedArray cpu {} 3 dimensions (3x2x2).
util.toNestedArray cpu {} invalid dimension.
util.toNestedArray cpu {} tensor to nested array.
util.toNestedArray cpu {} scalar to nested array.
util.toNestedArray cpu {} tensor with zero shape.
util.fetch should call the platform fetch.
util.encodeString Encode an empty string, default encoding.
util.encodeString Encode an empty string, utf-8 encoding.
util.encodeString Encode an empty string, invalid decoding.
util.encodeString Encode cyrillic letters.
util.encodeString Encode ascii letters.
util.decodeString decode an empty string.
util.decodeString decode ascii.
util.decodeString decode cyrillic.
util.decodeString decode utf-16.
variable cpu {} simple assign.
variable cpu {} simple chain assign.
variable cpu {} default names are unique.
variable cpu {} user provided name.
variable cpu {} if name already used, throw error.
variable cpu {} ops can take variables.
variable cpu {} chained variables works.
variable cpu {} variables are not affected by tidy.
variable cpu {} disposing a named variable allows creating new named variable.
variable cpu {} double disposing a variable works.
variable cpu {} constructor does not dispose.
variable cpu {} variables are assignable to tensors.
variable cpu {} assign does not dispose old data.
variable cpu {} shape must match.
variable cpu {} dtype must match.
x instanceof Variable cpu {} x: Variable.
x instanceof Variable cpu {} x: Variable-like.
x instanceof Variable cpu {} x: other object, fails.
x instanceof Variable cpu {} x: Tensor, fails.
version version is contained.
backendCPU cpu {} register string tensor with values.
backendCPU cpu {} register string tensor with values and mismatched shape.
depthToSpace cpu {} throws when CPU backend used with data format NCHW.
gatherND CPU cpu {} should throw error when index out of range.
scatterND CPU cpu {} should throw error when index out of range.
scatterND CPU cpu {} should throw error when indices has wrong dimension.
sparseToDense CPU cpu {} should throw error when index out of range.
memory cpu cpu {} unreliable is true due to auto gc.
memory cpu cpu {} unreliable is true due to both auto gc and string tensors.
CPU backend has sync init cpu {} can do matmul without waiting for ready.
