#!/usr/bin/env node
// Copyright 2019 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =============================================================================

/**
 * This script generates the tests.ts file which enumerates all the
 * backend-agonstic tests. These are the tests that get executed from other
 * packages (e.g. WebGPU).
 */

const LICENSE = `/**
 * @license
 * Copyright ${(new Date).getFullYear()} Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
`;

const AUTOGEN_CLAUSE = `///// DO NOT EDIT: This file is auto-generated by ` +
    `/tools/enumerate-tests.ts
`;

import * as fs from 'fs';
import {posix as path} from 'path';
import {ArgumentParser} from 'argparse';

const parser = new ArgumentParser({
  description: "This script generates the tests.ts file which enumerates all"
      + " the backend-agonstic tests. These are the tests that get executed from"
      + " other packages (e.g. WebGPU).",
});

parser.addArgument('test_file_list', {action: 'store', type: String});
parser.addArgument(['-o', '--output'], {
  action: 'store',
  required: true,
  type: String
});
parser.addArgument(['-r', '--root'], {
  action: 'store',
  defaultValue: '',
  type: String,
});

const args = parser.parseArgs();

const tests_file_contents = fs.readFileSync(args.test_file_list, 'utf8');
if (! tests_file_contents) {
  throw new Error(`Failed to read tests file ${args.test_file_list}`);
}
const tests = tests_file_contents.split('\n');

const root: string = path.normalize(args.root);
const files = tests.map(filePath => {
  const normalized = path.normalize(filePath);

  // Trim the 'bazel-out/platform-dependent-folder-name/bin/' path from
  // generated files so they can be used by this rule.
  const trimmed = normalized.replace(/^bazel-out\/.*\/bin\//, '');

  if (trimmed.slice(0, root.length) !== root) {
    throw new Error(`File ${trimmed} is not under root path ${root}`);
  }

  return './' + path.relative(root, trimmed).replace('.ts', '');
});

const imports = files.map(f => `import '${f}';`);
const newContent = `${LICENSE}
${AUTOGEN_CLAUSE}
${imports.sort().join('\n')}
`;

fs.writeFileSync(args.output, newContent);
